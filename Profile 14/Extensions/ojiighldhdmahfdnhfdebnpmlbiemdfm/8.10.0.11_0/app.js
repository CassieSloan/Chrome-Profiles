!function(e, t) {
    "use strict";
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
        if (e.document) return t(e);
        throw new Error("jQuery requires a window with a document");
    } : t(e);
}("undefined" != typeof window ? window : this, function(C, e) {
    "use strict";
    function m(e) {
        return "function" == typeof e && "number" != typeof e.nodeType && "function" != typeof e.item;
    }
    function x(e) {
        return null != e && e === e.window;
    }
    var t = [], r = Object.getPrototypeOf, s = t.slice, g = t.flat ? function(e) {
        return t.flat.call(e);
    } : function(e) {
        return t.concat.apply([], e);
    }, u = t.push, i = t.indexOf, n = {}, o = n.toString, v = n.hasOwnProperty, a = v.toString, l = a.call(Object), y = {}, E = C.document, c = {
        type: !0,
        src: !0,
        nonce: !0,
        noModule: !0
    };
    function b(e, t, n) {
        var r, i, o = (n = n || E).createElement("script");
        if (o.text = e, t) for (r in c) (i = t[r] || t.getAttribute && t.getAttribute(r)) && o.setAttribute(r, i);
        n.head.appendChild(o).parentNode.removeChild(o);
    }
    function w(e) {
        return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? n[o.call(e)] || "object" : typeof e;
    }
    var f = "3.6.0", S = function(e, t) {
        return new S.fn.init(e, t);
    };
    function p(e) {
        var t = !!e && "length" in e && e.length, n = w(e);
        return !m(e) && !x(e) && ("array" === n || 0 === t || "number" == typeof t && 0 < t && t - 1 in e);
    }
    S.fn = S.prototype = {
        jquery: f,
        constructor: S,
        length: 0,
        toArray: function() {
            return s.call(this);
        },
        get: function(e) {
            return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e];
        },
        pushStack: function(e) {
            e = S.merge(this.constructor(), e);
            return e.prevObject = this, e;
        },
        each: function(e) {
            return S.each(this, e);
        },
        map: function(n) {
            return this.pushStack(S.map(this, function(e, t) {
                return n.call(e, t, e);
            }));
        },
        slice: function() {
            return this.pushStack(s.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        even: function() {
            return this.pushStack(S.grep(this, function(e, t) {
                return (t + 1) % 2;
            }));
        },
        odd: function() {
            return this.pushStack(S.grep(this, function(e, t) {
                return t % 2;
            }));
        },
        eq: function(e) {
            var t = this.length, e = +e + (e < 0 ? t : 0);
            return this.pushStack(0 <= e && e < t ? [ this[e] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        push: u,
        sort: t.sort,
        splice: t.splice
    }, S.extend = S.fn.extend = function() {
        var e, t, r, i, n, a = arguments[0] || {}, s = 1, u = arguments.length, l = !1;
        for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || m(a) || (a = {}), 
        s === u && (a = this, s--); s < u; s++) if (null != (e = arguments[s])) for (t in e) r = e[t], 
        "__proto__" !== t && a !== r && (l && r && (S.isPlainObject(r) || (i = Array.isArray(r))) ? (n = a[t], 
        n = i && !Array.isArray(n) ? [] : i || S.isPlainObject(n) ? n : {}, i = !1, 
        a[t] = S.extend(l, n, r)) : void 0 !== r && (a[t] = r));
        return a;
    }, S.extend({
        expando: "jQuery" + (f + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(e) {
            throw new Error(e);
        },
        noop: function() {},
        isPlainObject: function(e) {
            return !(!e || "[object Object]" !== o.call(e) || (e = r(e)) && ("function" != typeof (e = v.call(e, "constructor") && e.constructor) || a.call(e) !== l));
        },
        isEmptyObject: function(e) {
            for (var t in e) return !1;
            return !0;
        },
        globalEval: function(e, t, n) {
            b(e, {
                nonce: t && t.nonce
            }, n);
        },
        each: function(e, t) {
            var n, r = 0;
            if (p(e)) for (n = e.length; r < n && !1 !== t.call(e[r], r, e[r]); r++); else for (r in e) if (!1 === t.call(e[r], r, e[r])) break;
            return e;
        },
        makeArray: function(e, t) {
            t = t || [];
            return null != e && (p(Object(e)) ? S.merge(t, "string" == typeof e ? [ e ] : e) : u.call(t, e)), 
            t;
        },
        inArray: function(e, t, n) {
            return null == t ? -1 : i.call(t, e, n);
        },
        merge: function(e, t) {
            for (var n = +t.length, r = 0, i = e.length; r < n; r++) e[i++] = t[r];
            return e.length = i, e;
        },
        grep: function(e, t, n) {
            for (var r = [], i = 0, o = e.length, a = !n; i < o; i++) !t(e[i], i) != a && r.push(e[i]);
            return r;
        },
        map: function(e, t, n) {
            var r, i, o = 0, a = [];
            if (p(e)) for (r = e.length; o < r; o++) null != (i = t(e[o], o, n)) && a.push(i); else for (o in e) null != (i = t(e[o], o, n)) && a.push(i);
            return g(a);
        },
        guid: 1,
        support: y
    }), "function" == typeof Symbol && (S.fn[Symbol.iterator] = t[Symbol.iterator]), 
    S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e, t) {
        n["[object " + t + "]"] = t.toLowerCase();
    });
    function h(e, t, n) {
        for (var r = [], i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType; ) if (1 === e.nodeType) {
            if (i && S(e).is(n)) break;
            r.push(e);
        }
        return r;
    }
    function T(e, t) {
        for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
        return n;
    }
    var f = function(n) {
        function ne(e, t) {
            return e = "0x" + e.slice(1) - 65536, t || (e < 0 ? String.fromCharCode(65536 + e) : String.fromCharCode(e >> 10 | 55296, 1023 & e | 56320));
        }
        function ie(e, t) {
            return t ? "\0" === e ? "ï¿½" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
        }
        function oe() {
            T();
        }
        var e, d, b, o, i, h, f, g, w, u, l, T, C, a, E, v, s, c, y, S = "sizzle" + +new Date(), p = n.document, k = 0, r = 0, m = ue(), x = ue(), A = ue(), N = ue(), j = function(e, t) {
            return e === t && (l = !0), 0;
        }, D = {}.hasOwnProperty, t = [], q = t.pop, L = t.push, H = t.push, O = t.slice, P = function(e, t) {
            for (var n = 0, r = e.length; n < r; n++) if (e[n] === t) return n;
            return -1;
        }, R = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", M = "[\\x20\\t\\r\\n\\f]", I = "(?:\\\\[\\da-fA-F]{1,6}" + M + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", W = "\\[" + M + "*(" + I + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + I + "))|)" + M + "*\\]", F = ":(" + I + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + W + ")*)|.*)\\)|)", B = new RegExp(M + "+", "g"), $ = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"), _ = new RegExp("^" + M + "*," + M + "*"), z = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"), U = new RegExp(M + "|>"), X = new RegExp(F), V = new RegExp("^" + I + "$"), G = {
            ID: new RegExp("^#(" + I + ")"),
            CLASS: new RegExp("^\\.(" + I + ")"),
            TAG: new RegExp("^(" + I + "|[*])"),
            ATTR: new RegExp("^" + W),
            PSEUDO: new RegExp("^" + F),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + R + ")$", "i"),
            needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
        }, Y = /HTML$/i, Q = /^(?:input|select|textarea|button)$/i, J = /^h\d$/i, K = /^[^{]+\{\s*\[native \w/, Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ee = /[+~]/, te = new RegExp("\\\\[\\da-fA-F]{1,6}" + M + "?|\\\\([^\\r\\n\\f])", "g"), re = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, ae = be(function(e) {
            return !0 === e.disabled && "fieldset" === e.nodeName.toLowerCase();
        }, {
            dir: "parentNode",
            next: "legend"
        });
        try {
            H.apply(t = O.call(p.childNodes), p.childNodes), t[p.childNodes.length].nodeType;
        } catch (e) {
            H = {
                apply: t.length ? function(e, t) {
                    L.apply(e, O.call(t));
                } : function(e, t) {
                    for (var n = e.length, r = 0; e[n++] = t[r++]; );
                    e.length = n - 1;
                }
            };
        }
        function se(t, e, n, r) {
            var i, o, s, u, l, a, f = e && e.ownerDocument, p = e ? e.nodeType : 9;
            if (n = n || [], "string" != typeof t || !t || 1 !== p && 9 !== p && 11 !== p) return n;
            if (!r && (T(e), e = e || C, E)) {
                if (11 !== p && (u = Z.exec(t))) if (i = u[1]) {
                    if (9 === p) {
                        if (!(a = e.getElementById(i))) return n;
                        if (a.id === i) return n.push(a), n;
                    } else if (f && (a = f.getElementById(i)) && y(e, a) && a.id === i) return n.push(a), 
                    n;
                } else {
                    if (u[2]) return H.apply(n, e.getElementsByTagName(t)), n;
                    if ((i = u[3]) && d.getElementsByClassName && e.getElementsByClassName) return H.apply(n, e.getElementsByClassName(i)), 
                    n;
                }
                if (d.qsa && !N[t + " "] && (!v || !v.test(t)) && (1 !== p || "object" !== e.nodeName.toLowerCase())) {
                    if (a = t, f = e, 1 === p && (U.test(t) || z.test(t))) {
                        for ((f = ee.test(t) && ye(e.parentNode) || e) === e && d.scope || ((s = e.getAttribute("id")) ? s = s.replace(re, ie) : e.setAttribute("id", s = S)), 
                        o = (l = h(t)).length; o--; ) l[o] = (s ? "#" + s : ":scope") + " " + xe(l[o]);
                        a = l.join(",");
                    }
                    try {
                        return H.apply(n, f.querySelectorAll(a)), n;
                    } catch (e) {
                        N(t, !0);
                    } finally {
                        s === S && e.removeAttribute("id");
                    }
                }
            }
            return g(t.replace($, "$1"), e, n, r);
        }
        function ue() {
            var r = [];
            return function e(t, n) {
                return r.push(t + " ") > b.cacheLength && delete e[r.shift()], e[t + " "] = n;
            };
        }
        function le(e) {
            return e[S] = !0, e;
        }
        function ce(e) {
            var t = C.createElement("fieldset");
            try {
                return !!e(t);
            } catch (e) {
                return !1;
            } finally {
                t.parentNode && t.parentNode.removeChild(t);
            }
        }
        function fe(e, t) {
            for (var n = e.split("|"), r = n.length; r--; ) b.attrHandle[n[r]] = t;
        }
        function pe(e, t) {
            var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
            if (r) return r;
            if (n) for (;n = n.nextSibling; ) if (n === t) return -1;
            return e ? 1 : -1;
        }
        function ge(t) {
            return function(e) {
                return "form" in e ? e.parentNode && !1 === e.disabled ? "label" in e ? "label" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : "label" in e && e.disabled === t;
            };
        }
        function ve(a) {
            return le(function(o) {
                return o = +o, le(function(e, t) {
                    for (var n, r = a([], e.length, o), i = r.length; i--; ) e[n = r[i]] && (e[n] = !(t[n] = e[n]));
                });
            });
        }
        function ye(e) {
            return e && void 0 !== e.getElementsByTagName && e;
        }
        for (e in d = se.support = {}, i = se.isXML = function(e) {
            var t = e && e.namespaceURI, e = e && (e.ownerDocument || e).documentElement;
            return !Y.test(t || e && e.nodeName || "HTML");
        }, T = se.setDocument = function(e) {
            var e = e ? e.ownerDocument || e : p;
            return e != C && 9 === e.nodeType && e.documentElement && (a = (C = e).documentElement, 
            E = !i(C), p != C && (e = C.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", oe, !1) : e.attachEvent && e.attachEvent("onunload", oe)), 
            d.scope = ce(function(e) {
                return a.appendChild(e).appendChild(C.createElement("div")), void 0 !== e.querySelectorAll && !e.querySelectorAll(":scope fieldset div").length;
            }), d.attributes = ce(function(e) {
                return e.className = "i", !e.getAttribute("className");
            }), d.getElementsByTagName = ce(function(e) {
                return e.appendChild(C.createComment("")), !e.getElementsByTagName("*").length;
            }), d.getElementsByClassName = K.test(C.getElementsByClassName), d.getById = ce(function(e) {
                return a.appendChild(e).id = S, !C.getElementsByName || !C.getElementsByName(S).length;
            }), d.getById ? (b.filter.ID = function(e) {
                var t = e.replace(te, ne);
                return function(e) {
                    return e.getAttribute("id") === t;
                };
            }, b.find.ID = function(e, t) {
                if (void 0 !== t.getElementById && E) return (t = t.getElementById(e)) ? [ t ] : [];
            }) : (b.filter.ID = function(e) {
                var n = e.replace(te, ne);
                return function(e) {
                    e = void 0 !== e.getAttributeNode && e.getAttributeNode("id");
                    return e && e.value === n;
                };
            }, b.find.ID = function(e, t) {
                if (void 0 !== t.getElementById && E) {
                    var n, r, i, o = t.getElementById(e);
                    if (o) {
                        if ((n = o.getAttributeNode("id")) && n.value === e) return [ o ];
                        for (i = t.getElementsByName(e), r = 0; o = i[r++]; ) if ((n = o.getAttributeNode("id")) && n.value === e) return [ o ];
                    }
                    return [];
                }
            }), b.find.TAG = d.getElementsByTagName ? function(e, t) {
                return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : d.qsa ? t.querySelectorAll(e) : void 0;
            } : function(e, t) {
                var n, r = [], i = 0, o = t.getElementsByTagName(e);
                if ("*" !== e) return o;
                for (;n = o[i++]; ) 1 === n.nodeType && r.push(n);
                return r;
            }, b.find.CLASS = d.getElementsByClassName && function(e, t) {
                if (void 0 !== t.getElementsByClassName && E) return t.getElementsByClassName(e);
            }, s = [], v = [], (d.qsa = K.test(C.querySelectorAll)) && (ce(function(e) {
                var t;
                a.appendChild(e).innerHTML = "<a id='" + S + "'></a><select id='" + S + "-\r\\' msallowcapture=''><option selected=''></option></select>", 
                e.querySelectorAll("[msallowcapture^='']").length && v.push("[*^$]=" + M + "*(?:''|\"\")"), 
                e.querySelectorAll("[selected]").length || v.push("\\[" + M + "*(?:value|" + R + ")"), 
                e.querySelectorAll("[id~=" + S + "-]").length || v.push("~="), (t = C.createElement("input")).setAttribute("name", ""), 
                e.appendChild(t), e.querySelectorAll("[name='']").length || v.push("\\[" + M + "*name" + M + "*=" + M + "*(?:''|\"\")"), 
                e.querySelectorAll(":checked").length || v.push(":checked"), e.querySelectorAll("a#" + S + "+*").length || v.push(".#.+[+~]"), 
                e.querySelectorAll("\\\f"), v.push("[\\r\\n\\f]");
            }), ce(function(e) {
                e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var t = C.createElement("input");
                t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), 
                e.querySelectorAll("[name=d]").length && v.push("name" + M + "*[*^$|!~]?="), 
                2 !== e.querySelectorAll(":enabled").length && v.push(":enabled", ":disabled"), 
                a.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && v.push(":enabled", ":disabled"), 
                e.querySelectorAll("*,:x"), v.push(",.*:");
            })), (d.matchesSelector = K.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce(function(e) {
                d.disconnectedMatch = c.call(e, "*"), c.call(e, "[s!='']:x"), s.push("!=", F);
            }), v = v.length && new RegExp(v.join("|")), s = s.length && new RegExp(s.join("|")), 
            e = K.test(a.compareDocumentPosition), y = e || K.test(a.contains) ? function(e, t) {
                var n = 9 === e.nodeType ? e.documentElement : e, t = t && t.parentNode;
                return e === t || !(!t || 1 !== t.nodeType || !(n.contains ? n.contains(t) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(t)));
            } : function(e, t) {
                if (t) for (;t = t.parentNode; ) if (t === e) return !0;
                return !1;
            }, j = e ? function(e, t) {
                return e === t ? (l = !0, 0) : !e.compareDocumentPosition - !t.compareDocumentPosition || (1 & (n = (e.ownerDocument || e) == (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !d.sortDetached && t.compareDocumentPosition(e) === n ? e == C || e.ownerDocument == p && y(p, e) ? -1 : t == C || t.ownerDocument == p && y(p, t) ? 1 : u ? P(u, e) - P(u, t) : 0 : 4 & n ? -1 : 1);
                var n;
            } : function(e, t) {
                if (e === t) return l = !0, 0;
                var n, r = 0, i = e.parentNode, o = t.parentNode, a = [ e ], s = [ t ];
                if (!i || !o) return e == C ? -1 : t == C ? 1 : i ? -1 : o ? 1 : u ? P(u, e) - P(u, t) : 0;
                if (i === o) return pe(e, t);
                for (n = e; n = n.parentNode; ) a.unshift(n);
                for (n = t; n = n.parentNode; ) s.unshift(n);
                for (;a[r] === s[r]; ) r++;
                return r ? pe(a[r], s[r]) : a[r] == p ? -1 : s[r] == p ? 1 : 0;
            }), C;
        }, se.matches = function(e, t) {
            return se(e, null, null, t);
        }, se.matchesSelector = function(e, t) {
            if (T(e), d.matchesSelector && E && !N[t + " "] && (!s || !s.test(t)) && (!v || !v.test(t))) try {
                var n = c.call(e, t);
                if (n || d.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n;
            } catch (e) {
                N(t, !0);
            }
            return 0 < se(t, C, null, [ e ]).length;
        }, se.contains = function(e, t) {
            return (e.ownerDocument || e) != C && T(e), y(e, t);
        }, se.attr = function(e, t) {
            (e.ownerDocument || e) != C && T(e);
            var n = b.attrHandle[t.toLowerCase()], n = n && D.call(b.attrHandle, t.toLowerCase()) ? n(e, t, !E) : void 0;
            return void 0 !== n ? n : d.attributes || !E ? e.getAttribute(t) : (n = e.getAttributeNode(t)) && n.specified ? n.value : null;
        }, se.escape = function(e) {
            return (e + "").replace(re, ie);
        }, se.error = function(e) {
            throw new Error("Syntax error, unrecognized expression: " + e);
        }, se.uniqueSort = function(e) {
            var t, n = [], r = 0, i = 0;
            if (l = !d.detectDuplicates, u = !d.sortStable && e.slice(0), e.sort(j), 
            l) {
                for (;t = e[i++]; ) t === e[i] && (r = n.push(i));
                for (;r--; ) e.splice(n[r], 1);
            }
            return u = null, e;
        }, o = se.getText = function(e) {
            var t, n = "", r = 0, i = e.nodeType;
            if (i) {
                if (1 === i || 9 === i || 11 === i) {
                    if ("string" == typeof e.textContent) return e.textContent;
                    for (e = e.firstChild; e; e = e.nextSibling) n += o(e);
                } else if (3 === i || 4 === i) return e.nodeValue;
            } else for (;t = e[r++]; ) n += o(t);
            return n;
        }, (b = se.selectors = {
            cacheLength: 50,
            createPseudo: le,
            match: G,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(e) {
                    return e[1] = e[1].replace(te, ne), e[3] = (e[3] || e[4] || e[5] || "").replace(te, ne), 
                    "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
                },
                CHILD: function(e) {
                    return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]), 
                    e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), 
                    e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && se.error(e[0]), 
                    e;
                },
                PSEUDO: function(e) {
                    var t, n = !e[6] && e[2];
                    return G.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && X.test(n) && (t = h(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), 
                    e[2] = n.slice(0, t)), e.slice(0, 3));
                }
            },
            filter: {
                TAG: function(e) {
                    var t = e.replace(te, ne).toLowerCase();
                    return "*" === e ? function() {
                        return !0;
                    } : function(e) {
                        return e.nodeName && e.nodeName.toLowerCase() === t;
                    };
                },
                CLASS: function(e) {
                    var t = m[e + " "];
                    return t || (t = new RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && m(e, function(e) {
                        return t.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "");
                    });
                },
                ATTR: function(n, r, i) {
                    return function(e) {
                        e = se.attr(e, n);
                        return null == e ? "!=" === r : !r || (e += "", "=" === r ? e === i : "!=" === r ? e !== i : "^=" === r ? i && 0 === e.indexOf(i) : "*=" === r ? i && -1 < e.indexOf(i) : "$=" === r ? i && e.slice(-i.length) === i : "~=" === r ? -1 < (" " + e.replace(B, " ") + " ").indexOf(i) : "|=" === r && (e === i || e.slice(0, i.length + 1) === i + "-"));
                    };
                },
                CHILD: function(h, e, t, g, v) {
                    var y = "nth" !== h.slice(0, 3), m = "last" !== h.slice(-4), x = "of-type" === e;
                    return 1 === g && 0 === v ? function(e) {
                        return !!e.parentNode;
                    } : function(e, t, n) {
                        var r, i, o, a, s, u, l = y != m ? "nextSibling" : "previousSibling", c = e.parentNode, f = x && e.nodeName.toLowerCase(), p = !n && !x, d = !1;
                        if (c) {
                            if (y) {
                                for (;l; ) {
                                    for (a = e; a = a[l]; ) if (x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) return !1;
                                    u = l = "only" === h && !u && "nextSibling";
                                }
                                return !0;
                            }
                            if (u = [ m ? c.firstChild : c.lastChild ], m && p) {
                                for (d = (s = (r = (i = (o = (a = c)[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === k && r[1]) && r[2], 
                                a = s && c.childNodes[s]; a = ++s && a && a[l] || (d = s = 0) || u.pop(); ) if (1 === a.nodeType && ++d && a === e) {
                                    i[h] = [ k, s, d ];
                                    break;
                                }
                            } else if (!1 === (d = p ? s = (r = (i = (o = (a = e)[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === k && r[1] : d)) for (;(a = ++s && a && a[l] || (d = s = 0) || u.pop()) && ((x ? a.nodeName.toLowerCase() !== f : 1 !== a.nodeType) || !++d || (p && ((i = (o = a[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] = [ k, d ]), 
                            a !== e)); );
                            return (d -= v) === g || d % g == 0 && 0 <= d / g;
                        }
                    };
                },
                PSEUDO: function(e, o) {
                    var t, a = b.pseudos[e] || b.setFilters[e.toLowerCase()] || se.error("unsupported pseudo: " + e);
                    return a[S] ? a(o) : 1 < a.length ? (t = [ e, e, "", o ], b.setFilters.hasOwnProperty(e.toLowerCase()) ? le(function(e, t) {
                        for (var n, r = a(e, o), i = r.length; i--; ) e[n = P(e, r[i])] = !(t[n] = r[i]);
                    }) : function(e) {
                        return a(e, 0, t);
                    }) : a;
                }
            },
            pseudos: {
                not: le(function(e) {
                    var r = [], i = [], s = f(e.replace($, "$1"));
                    return s[S] ? le(function(e, t, n, r) {
                        for (var i, o = s(e, null, r, []), a = e.length; a--; ) (i = o[a]) && (e[a] = !(t[a] = i));
                    }) : function(e, t, n) {
                        return r[0] = e, s(r, null, n, i), r[0] = null, !i.pop();
                    };
                }),
                has: le(function(t) {
                    return function(e) {
                        return 0 < se(t, e).length;
                    };
                }),
                contains: le(function(t) {
                    return t = t.replace(te, ne), function(e) {
                        return -1 < (e.textContent || o(e)).indexOf(t);
                    };
                }),
                lang: le(function(n) {
                    return V.test(n || "") || se.error("unsupported lang: " + n), 
                    n = n.replace(te, ne).toLowerCase(), function(e) {
                        var t;
                        do {
                            if (t = E ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + "-");
                        } while ((e = e.parentNode) && 1 === e.nodeType);
                        return !1;
                    };
                }),
                target: function(e) {
                    var t = n.location && n.location.hash;
                    return t && t.slice(1) === e.id;
                },
                root: function(e) {
                    return e === a;
                },
                focus: function(e) {
                    return e === C.activeElement && (!C.hasFocus || C.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
                },
                enabled: ge(!1),
                disabled: ge(!0),
                checked: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && !!e.checked || "option" === t && !!e.selected;
                },
                selected: function(e) {
                    return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
                },
                empty: function(e) {
                    for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(e) {
                    return !b.pseudos.empty(e);
                },
                header: function(e) {
                    return J.test(e.nodeName);
                },
                input: function(e) {
                    return Q.test(e.nodeName);
                },
                button: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && "button" === e.type || "button" === t;
                },
                text: function(e) {
                    return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (e = e.getAttribute("type")) || "text" === e.toLowerCase());
                },
                first: ve(function() {
                    return [ 0 ];
                }),
                last: ve(function(e, t) {
                    return [ t - 1 ];
                }),
                eq: ve(function(e, t, n) {
                    return [ n < 0 ? n + t : n ];
                }),
                even: ve(function(e, t) {
                    for (var n = 0; n < t; n += 2) e.push(n);
                    return e;
                }),
                odd: ve(function(e, t) {
                    for (var n = 1; n < t; n += 2) e.push(n);
                    return e;
                }),
                lt: ve(function(e, t, n) {
                    for (var r = n < 0 ? n + t : t < n ? t : n; 0 <= --r; ) e.push(r);
                    return e;
                }),
                gt: ve(function(e, t, n) {
                    for (var r = n < 0 ? n + t : n; ++r < t; ) e.push(r);
                    return e;
                })
            }
        }).pseudos.nth = b.pseudos.eq, {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) b.pseudos[e] = function(t) {
            return function(e) {
                return "input" === e.nodeName.toLowerCase() && e.type === t;
            };
        }(e);
        for (e in {
            submit: !0,
            reset: !0
        }) b.pseudos[e] = function(n) {
            return function(e) {
                var t = e.nodeName.toLowerCase();
                return ("input" === t || "button" === t) && e.type === n;
            };
        }(e);
        function me() {}
        function xe(e) {
            for (var t = 0, n = e.length, r = ""; t < n; t++) r += e[t].value;
            return r;
        }
        function be(s, e, t) {
            var u = e.dir, l = e.next, c = l || u, f = t && "parentNode" === c, p = r++;
            return e.first ? function(e, t, n) {
                for (;e = e[u]; ) if (1 === e.nodeType || f) return s(e, t, n);
                return !1;
            } : function(e, t, n) {
                var r, o, a = [ k, p ];
                if (n) {
                    for (;e = e[u]; ) if ((1 === e.nodeType || f) && s(e, t, n)) return !0;
                } else for (;e = e[u]; ) if (1 === e.nodeType || f) if (o = (o = e[S] || (e[S] = {}))[e.uniqueID] || (o[e.uniqueID] = {}), 
                l && l === e.nodeName.toLowerCase()) e = e[u] || e; else {
                    if ((r = o[c]) && r[0] === k && r[1] === p) return a[2] = r[2];
                    if ((o[c] = a)[2] = s(e, t, n)) return !0;
                }
                return !1;
            };
        }
        function we(i) {
            return 1 < i.length ? function(e, t, n) {
                for (var r = i.length; r--; ) if (!i[r](e, t, n)) return !1;
                return !0;
            } : i[0];
        }
        function Te(e, t, n, r, i) {
            for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) !(o = e[s]) || n && !n(o, r, i) || (a.push(o), 
            l && t.push(s));
            return a;
        }
        function Ee(e) {
            for (var i, t, n, r = e.length, o = b.relative[e[0].type], a = o || b.relative[" "], s = o ? 1 : 0, u = be(function(e) {
                return e === i;
            }, a, !0), l = be(function(e) {
                return -1 < P(i, e);
            }, a, !0), c = [ function(e, t, n) {
                e = !o && (n || t !== w) || ((i = t).nodeType ? u : l)(e, t, n);
                return i = null, e;
            } ]; s < r; s++) if (t = b.relative[e[s].type]) c = [ be(we(c), t) ]; else {
                if ((t = b.filter[e[s].type].apply(null, e[s].matches))[S]) {
                    for (n = ++s; n < r && !b.relative[e[n].type]; n++);
                    return function Ce(d, h, g, v, y, e) {
                        return v && !v[S] && (v = Ce(v)), y && !y[S] && (y = Ce(y, e)), 
                        le(function(e, t, n, r) {
                            var i, o, a, s = [], u = [], l = t.length, c = e || function(e, t, n) {
                                for (var r = 0, i = t.length; r < i; r++) se(e, t[r], n);
                                return n;
                            }(h || "*", n.nodeType ? [ n ] : n, []), f = !d || !e && h ? c : Te(c, s, d, n, r), p = g ? y || (e ? d : l || v) ? [] : t : f;
                            if (g && g(f, p, n, r), v) for (i = Te(p, u), v(i, [], n, r), 
                            o = i.length; o--; ) (a = i[o]) && (p[u[o]] = !(f[u[o]] = a));
                            if (e) {
                                if (y || d) {
                                    if (y) {
                                        for (i = [], o = p.length; o--; ) (a = p[o]) && i.push(f[o] = a);
                                        y(null, p = [], i, r);
                                    }
                                    for (o = p.length; o--; ) (a = p[o]) && -1 < (i = y ? P(e, a) : s[o]) && (e[i] = !(t[i] = a));
                                }
                            } else p = Te(p === t ? p.splice(l, p.length) : p), 
                            y ? y(null, t, p, r) : H.apply(t, p);
                        });
                    }(1 < s && we(c), 1 < s && xe(e.slice(0, s - 1).concat({
                        value: " " === e[s - 2].type ? "*" : ""
                    })).replace($, "$1"), t, s < n && Ee(e.slice(s, n)), n < r && Ee(e = e.slice(n)), n < r && xe(e));
                }
                c.push(t);
            }
            return we(c);
        }
        return me.prototype = b.filters = b.pseudos, b.setFilters = new me(), h = se.tokenize = function(e, t) {
            var n, r, i, o, a, s, u, l = x[e + " "];
            if (l) return t ? 0 : l.slice(0);
            for (a = e, s = [], u = b.preFilter; a; ) {
                for (o in n && !(r = _.exec(a)) || (r && (a = a.slice(r[0].length) || a), 
                s.push(i = [])), n = !1, (r = z.exec(a)) && (n = r.shift(), i.push({
                    value: n,
                    type: r[0].replace($, " ")
                }), a = a.slice(n.length)), b.filter) !(r = G[o].exec(a)) || u[o] && !(r = u[o](r)) || (n = r.shift(), 
                i.push({
                    value: n,
                    type: o,
                    matches: r
                }), a = a.slice(n.length));
                if (!n) break;
            }
            return t ? a.length : a ? se.error(e) : x(e, s).slice(0);
        }, f = se.compile = function(e, t) {
            var n, v, y, m, x, r, i = [], o = [], a = A[e + " "];
            if (!a) {
                for (n = (t = t || h(e)).length; n--; ) ((a = Ee(t[n]))[S] ? i : o).push(a);
                (a = A(e, (m = 0 < (y = i).length, x = 0 < (v = o).length, r = function(e, t, n, r, i) {
                    var o, a, s, u = 0, l = "0", c = e && [], f = [], p = w, d = e || x && b.find.TAG("*", i), h = k += null == p ? 1 : Math.random() || .1, g = d.length;
                    for (i && (w = t == C || t || i); l !== g && null != (o = d[l]); l++) {
                        if (x && o) {
                            for (a = 0, t || o.ownerDocument == C || (T(o), n = !E); s = v[a++]; ) if (s(o, t || C, n)) {
                                r.push(o);
                                break;
                            }
                            i && (k = h);
                        }
                        m && ((o = !s && o) && u--, e && c.push(o));
                    }
                    if (u += l, m && l !== u) {
                        for (a = 0; s = y[a++]; ) s(c, f, t, n);
                        if (e) {
                            if (0 < u) for (;l--; ) c[l] || f[l] || (f[l] = q.call(r));
                            f = Te(f);
                        }
                        H.apply(r, f), i && !e && 0 < f.length && 1 < u + y.length && se.uniqueSort(r);
                    }
                    return i && (k = h, w = p), c;
                }, m ? le(r) : r))).selector = e;
            }
            return a;
        }, g = se.select = function(e, t, n, r) {
            var i, o, a, s, u, l = "function" == typeof e && e, c = !r && h(e = l.selector || e);
            if (n = n || [], 1 === c.length) {
                if (2 < (o = c[0] = c[0].slice(0)).length && "ID" === (a = o[0]).type && 9 === t.nodeType && E && b.relative[o[1].type]) {
                    if (!(t = (b.find.ID(a.matches[0].replace(te, ne), t) || [])[0])) return n;
                    l && (t = t.parentNode), e = e.slice(o.shift().value.length);
                }
                for (i = G.needsContext.test(e) ? 0 : o.length; i-- && (a = o[i], 
                !b.relative[s = a.type]); ) if ((u = b.find[s]) && (r = u(a.matches[0].replace(te, ne), ee.test(o[0].type) && ye(t.parentNode) || t))) {
                    if (o.splice(i, 1), e = r.length && xe(o)) break;
                    return H.apply(n, r), n;
                }
            }
            return (l || f(e, c))(r, t, !E, n, !t || ee.test(e) && ye(t.parentNode) || t), 
            n;
        }, d.sortStable = S.split("").sort(j).join("") === S, d.detectDuplicates = !!l, 
        T(), d.sortDetached = ce(function(e) {
            return 1 & e.compareDocumentPosition(C.createElement("fieldset"));
        }), ce(function(e) {
            return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
        }) || fe("type|href|height|width", function(e, t, n) {
            if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
        }), d.attributes && ce(function(e) {
            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), 
            "" === e.firstChild.getAttribute("value");
        }) || fe("value", function(e, t, n) {
            if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
        }), ce(function(e) {
            return null == e.getAttribute("disabled");
        }) || fe(R, function(e, t, n) {
            if (!n) return !0 === e[t] ? t.toLowerCase() : (n = e.getAttributeNode(t)) && n.specified ? n.value : null;
        }), se;
    }(C), k = (S.find = f, S.expr = f.selectors, S.expr[":"] = S.expr.pseudos, S.uniqueSort = S.unique = f.uniqueSort, 
    S.text = f.getText, S.isXMLDoc = f.isXML, S.contains = f.contains, S.escapeSelector = f.escape, 
    S.expr.match.needsContext);
    function A(e, t) {
        return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }
    var N = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function j(e, n, r) {
        return m(n) ? S.grep(e, function(e, t) {
            return !!n.call(e, t, e) !== r;
        }) : n.nodeType ? S.grep(e, function(e) {
            return e === n !== r;
        }) : "string" != typeof n ? S.grep(e, function(e) {
            return -1 < i.call(n, e) !== r;
        }) : S.filter(n, e, r);
    }
    S.filter = function(e, t, n) {
        var r = t[0];
        return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? S.find.matchesSelector(r, e) ? [ r ] : [] : S.find.matches(e, S.grep(t, function(e) {
            return 1 === e.nodeType;
        }));
    }, S.fn.extend({
        find: function(e) {
            var t, n, r = this.length, i = this;
            if ("string" != typeof e) return this.pushStack(S(e).filter(function() {
                for (t = 0; t < r; t++) if (S.contains(i[t], this)) return !0;
            }));
            for (n = this.pushStack([]), t = 0; t < r; t++) S.find(e, i[t], n);
            return 1 < r ? S.uniqueSort(n) : n;
        },
        filter: function(e) {
            return this.pushStack(j(this, e || [], !1));
        },
        not: function(e) {
            return this.pushStack(j(this, e || [], !0));
        },
        is: function(e) {
            return !!j(this, "string" == typeof e && k.test(e) ? S(e) : e || [], !1).length;
        }
    });
    var D, q = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, L = ((S.fn.init = function(e, t, n) {
        if (!e) return this;
        if (n = n || D, "string" != typeof e) return e.nodeType ? (this[0] = e, 
        this.length = 1, this) : m(e) ? void 0 !== n.ready ? n.ready(e) : e(S) : S.makeArray(e, this);
        if (!(r = "<" === e[0] && ">" === e[e.length - 1] && 3 <= e.length ? [ null, e, null ] : q.exec(e)) || !r[1] && t) return (!t || t.jquery ? t || n : this.constructor(t)).find(e);
        if (r[1]) {
            if (t = t instanceof S ? t[0] : t, S.merge(this, S.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : E, !0)), 
            N.test(r[1]) && S.isPlainObject(t)) for (var r in t) m(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
            return this;
        }
        return (n = E.getElementById(r[2])) && (this[0] = n, this.length = 1), this;
    }).prototype = S.fn, D = S(E), /^(?:parents|prev(?:Until|All))/), H = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    function O(e, t) {
        for (;(e = e[t]) && 1 !== e.nodeType; );
        return e;
    }
    S.fn.extend({
        has: function(e) {
            var t = S(e, this), n = t.length;
            return this.filter(function() {
                for (var e = 0; e < n; e++) if (S.contains(this, t[e])) return !0;
            });
        },
        closest: function(e, t) {
            var n, r = 0, i = this.length, o = [], a = "string" != typeof e && S(e);
            if (!k.test(e)) for (;r < i; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? -1 < a.index(n) : 1 === n.nodeType && S.find.matchesSelector(n, e))) {
                o.push(n);
                break;
            }
            return this.pushStack(1 < o.length ? S.uniqueSort(o) : o);
        },
        index: function(e) {
            return e ? "string" == typeof e ? i.call(S(e), this[0]) : i.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(e, t) {
            return this.pushStack(S.uniqueSort(S.merge(this.get(), S(e, t))));
        },
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
        }
    }), S.each({
        parent: function(e) {
            e = e.parentNode;
            return e && 11 !== e.nodeType ? e : null;
        },
        parents: function(e) {
            return h(e, "parentNode");
        },
        parentsUntil: function(e, t, n) {
            return h(e, "parentNode", n);
        },
        next: function(e) {
            return O(e, "nextSibling");
        },
        prev: function(e) {
            return O(e, "previousSibling");
        },
        nextAll: function(e) {
            return h(e, "nextSibling");
        },
        prevAll: function(e) {
            return h(e, "previousSibling");
        },
        nextUntil: function(e, t, n) {
            return h(e, "nextSibling", n);
        },
        prevUntil: function(e, t, n) {
            return h(e, "previousSibling", n);
        },
        siblings: function(e) {
            return T((e.parentNode || {}).firstChild, e);
        },
        children: function(e) {
            return T(e.firstChild);
        },
        contents: function(e) {
            return null != e.contentDocument && r(e.contentDocument) ? e.contentDocument : (A(e, "template") && (e = e.content || e), 
            S.merge([], e.childNodes));
        }
    }, function(r, i) {
        S.fn[r] = function(e, t) {
            var n = S.map(this, i, e);
            return (t = "Until" !== r.slice(-5) ? e : t) && "string" == typeof t && (n = S.filter(t, n)), 
            1 < this.length && (H[r] || S.uniqueSort(n), L.test(r) && n.reverse()), 
            this.pushStack(n);
        };
    });
    var P = /[^\x20\t\r\n\f]+/g;
    function R(e) {
        return e;
    }
    function M(e) {
        throw e;
    }
    function I(e, t, n, r) {
        var i;
        try {
            e && m(i = e.promise) ? i.call(e).done(t).fail(n) : e && m(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [ e ].slice(r));
        } catch (e) {
            n.apply(void 0, [ e ]);
        }
    }
    S.Callbacks = function(r) {
        var e, n;
        r = "string" == typeof r ? (e = r, n = {}, S.each(e.match(P) || [], function(e, t) {
            n[t] = !0;
        }), n) : S.extend({}, r);
        function c() {
            for (a = a || r.once, o = i = !0; u.length; l = -1) for (t = u.shift(); ++l < s.length; ) !1 === s[l].apply(t[0], t[1]) && r.stopOnFalse && (l = s.length, 
            t = !1);
            r.memory || (t = !1), i = !1, a && (s = t ? [] : "");
        }
        var i, t, o, a, s = [], u = [], l = -1, f = {
            add: function() {
                return s && (t && !i && (l = s.length - 1, u.push(t)), function n(e) {
                    S.each(e, function(e, t) {
                        m(t) ? r.unique && f.has(t) || s.push(t) : t && t.length && "string" !== w(t) && n(t);
                    });
                }(arguments), t && !i && c()), this;
            },
            remove: function() {
                return S.each(arguments, function(e, t) {
                    for (var n; -1 < (n = S.inArray(t, s, n)); ) s.splice(n, 1), 
                    n <= l && l--;
                }), this;
            },
            has: function(e) {
                return e ? -1 < S.inArray(e, s) : 0 < s.length;
            },
            empty: function() {
                return s = s && [], this;
            },
            disable: function() {
                return a = u = [], s = t = "", this;
            },
            disabled: function() {
                return !s;
            },
            lock: function() {
                return a = u = [], t || i || (s = t = ""), this;
            },
            locked: function() {
                return !!a;
            },
            fireWith: function(e, t) {
                return a || (t = [ e, (t = t || []).slice ? t.slice() : t ], u.push(t), 
                i || c()), this;
            },
            fire: function() {
                return f.fireWith(this, arguments), this;
            },
            fired: function() {
                return !!o;
            }
        };
        return f;
    }, S.extend({
        Deferred: function(e) {
            var o = [ [ "notify", "progress", S.Callbacks("memory"), S.Callbacks("memory"), 2 ], [ "resolve", "done", S.Callbacks("once memory"), S.Callbacks("once memory"), 0, "resolved" ], [ "reject", "fail", S.Callbacks("once memory"), S.Callbacks("once memory"), 1, "rejected" ] ], i = "pending", a = {
                state: function() {
                    return i;
                },
                always: function() {
                    return s.done(arguments).fail(arguments), this;
                },
                catch: function(e) {
                    return a.then(null, e);
                },
                pipe: function() {
                    var i = arguments;
                    return S.Deferred(function(r) {
                        S.each(o, function(e, t) {
                            var n = m(i[t[4]]) && i[t[4]];
                            s[t[1]](function() {
                                var e = n && n.apply(this, arguments);
                                e && m(e.promise) ? e.promise().progress(r.notify).done(r.resolve).fail(r.reject) : r[t[0] + "With"](this, n ? [ e ] : arguments);
                            });
                        }), i = null;
                    }).promise();
                },
                then: function(t, n, r) {
                    var u = 0;
                    function l(i, o, a, s) {
                        return function() {
                            function e() {
                                var e, t;
                                if (!(i < u)) {
                                    if ((e = a.apply(n, r)) === o.promise()) throw new TypeError("Thenable self-resolution");
                                    t = e && ("object" == typeof e || "function" == typeof e) && e.then, 
                                    m(t) ? s ? t.call(e, l(u, o, R, s), l(u, o, M, s)) : (u++, 
                                    t.call(e, l(u, o, R, s), l(u, o, M, s), l(u, o, R, o.notifyWith))) : (a !== R && (n = void 0, 
                                    r = [ e ]), (s || o.resolveWith)(n, r));
                                }
                            }
                            var n = this, r = arguments, t = s ? e : function() {
                                try {
                                    e();
                                } catch (e) {
                                    S.Deferred.exceptionHook && S.Deferred.exceptionHook(e, t.stackTrace), 
                                    u <= i + 1 && (a !== M && (n = void 0, r = [ e ]), 
                                    o.rejectWith(n, r));
                                }
                            };
                            i ? t() : (S.Deferred.getStackHook && (t.stackTrace = S.Deferred.getStackHook()), 
                            C.setTimeout(t));
                        };
                    }
                    return S.Deferred(function(e) {
                        o[0][3].add(l(0, e, m(r) ? r : R, e.notifyWith)), o[1][3].add(l(0, e, m(t) ? t : R)), 
                        o[2][3].add(l(0, e, m(n) ? n : M));
                    }).promise();
                },
                promise: function(e) {
                    return null != e ? S.extend(e, a) : a;
                }
            }, s = {};
            return S.each(o, function(e, t) {
                var n = t[2], r = t[5];
                a[t[1]] = n.add, r && n.add(function() {
                    i = r;
                }, o[3 - e][2].disable, o[3 - e][3].disable, o[0][2].lock, o[0][3].lock), 
                n.add(t[3].fire), s[t[0]] = function() {
                    return s[t[0] + "With"](this === s ? void 0 : this, arguments), 
                    this;
                }, s[t[0] + "With"] = n.fireWith;
            }), a.promise(s), e && e.call(s, s), s;
        },
        when: function(e) {
            function a(t) {
                return function(e) {
                    r[t] = this, i[t] = 1 < arguments.length ? s.call(arguments) : e, 
                    --n || o.resolveWith(r, i);
                };
            }
            var n = arguments.length, t = n, r = Array(t), i = s.call(arguments), o = S.Deferred();
            if (n <= 1 && (I(e, o.done(a(t)).resolve, o.reject, !n), "pending" === o.state() || m(i[t] && i[t].then))) return o.then();
            for (;t--; ) I(i[t], a(t), o.reject);
            return o.promise();
        }
    });
    var W = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/, F = (S.Deferred.exceptionHook = function(e, t) {
        C.console && C.console.warn && e && W.test(e.name) && C.console.warn("jQuery.Deferred exception: " + e.message, e.stack, t);
    }, S.readyException = function(e) {
        C.setTimeout(function() {
            throw e;
        });
    }, S.Deferred());
    function B() {
        E.removeEventListener("DOMContentLoaded", B), C.removeEventListener("load", B), 
        S.ready();
    }
    S.fn.ready = function(e) {
        return F.then(e).catch(function(e) {
            S.readyException(e);
        }), this;
    }, S.extend({
        isReady: !1,
        readyWait: 1,
        ready: function(e) {
            (!0 === e ? --S.readyWait : S.isReady) || (S.isReady = !0) !== e && 0 < --S.readyWait || F.resolveWith(E, [ S ]);
        }
    }), S.ready.then = F.then, "complete" === E.readyState || "loading" !== E.readyState && !E.documentElement.doScroll ? C.setTimeout(S.ready) : (E.addEventListener("DOMContentLoaded", B), 
    C.addEventListener("load", B));
    function $(e, t, n, r, i, o, a) {
        var s = 0, u = e.length, l = null == n;
        if ("object" === w(n)) for (s in i = !0, n) $(e, t, s, n[s], !0, o, a); else if (void 0 !== r && (i = !0, 
        m(r) || (a = !0), t = l ? a ? (t.call(e, r), null) : (l = t, function(e, t, n) {
            return l.call(S(e), n);
        }) : t)) for (;s < u; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
        return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
    }
    var _ = /^-ms-/, z = /-([a-z])/g;
    function U(e, t) {
        return t.toUpperCase();
    }
    function X(e) {
        return e.replace(_, "ms-").replace(z, U);
    }
    function V(e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
    }
    function G() {
        this.expando = S.expando + G.uid++;
    }
    G.uid = 1, G.prototype = {
        cache: function(e) {
            var t = e[this.expando];
            return t || (t = {}, V(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t;
        },
        set: function(e, t, n) {
            var r, i = this.cache(e);
            if ("string" == typeof t) i[X(t)] = n; else for (r in t) i[X(r)] = t[r];
            return i;
        },
        get: function(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][X(t)];
        },
        access: function(e, t, n) {
            return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), 
            void 0 !== n ? n : t);
        },
        remove: function(e, t) {
            var n, r = e[this.expando];
            if (void 0 !== r) {
                if (void 0 !== t) {
                    n = (t = Array.isArray(t) ? t.map(X) : (t = X(t)) in r ? [ t ] : t.match(P) || []).length;
                    for (;n--; ) delete r[t[n]];
                }
                void 0 !== t && !S.isEmptyObject(r) || (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
            }
        },
        hasData: function(e) {
            e = e[this.expando];
            return void 0 !== e && !S.isEmptyObject(e);
        }
    };
    var Y = new G(), Q = new G(), J = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, K = /[A-Z]/g;
    function Z(e, t, n) {
        var r, i;
        if (void 0 === n && 1 === e.nodeType) if (r = "data-" + t.replace(K, "-$&").toLowerCase(), 
        "string" == typeof (n = e.getAttribute(r))) {
            try {
                n = "true" === (i = n) || "false" !== i && ("null" === i ? null : i === +i + "" ? +i : J.test(i) ? JSON.parse(i) : i);
            } catch (e) {}
            Q.set(e, t, n);
        } else n = void 0;
        return n;
    }
    S.extend({
        hasData: function(e) {
            return Q.hasData(e) || Y.hasData(e);
        },
        data: function(e, t, n) {
            return Q.access(e, t, n);
        },
        removeData: function(e, t) {
            Q.remove(e, t);
        },
        _data: function(e, t, n) {
            return Y.access(e, t, n);
        },
        _removeData: function(e, t) {
            Y.remove(e, t);
        }
    }), S.fn.extend({
        data: function(n, e) {
            var t, r, i, o = this[0], a = o && o.attributes;
            if (void 0 !== n) return "object" == typeof n ? this.each(function() {
                Q.set(this, n);
            }) : $(this, function(e) {
                var t;
                if (o && void 0 === e) return void 0 !== (t = Q.get(o, n)) || void 0 !== (t = Z(o, n)) ? t : void 0;
                this.each(function() {
                    Q.set(this, n, e);
                });
            }, null, e, 1 < arguments.length, null, !0);
            if (this.length && (i = Q.get(o), 1 === o.nodeType && !Y.get(o, "hasDataAttrs"))) {
                for (t = a.length; t--; ) a[t] && 0 === (r = a[t].name).indexOf("data-") && (r = X(r.slice(5)), 
                Z(o, r, i[r]));
                Y.set(o, "hasDataAttrs", !0);
            }
            return i;
        },
        removeData: function(e) {
            return this.each(function() {
                Q.remove(this, e);
            });
        }
    }), S.extend({
        queue: function(e, t, n) {
            var r;
            if (e) return r = Y.get(e, t = (t || "fx") + "queue"), n && (!r || Array.isArray(n) ? r = Y.access(e, t, S.makeArray(n)) : r.push(n)), 
            r || [];
        },
        dequeue: function(e, t) {
            t = t || "fx";
            var n = S.queue(e, t), r = n.length, i = n.shift(), o = S._queueHooks(e, t);
            "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), 
            delete o.stop, i.call(e, function() {
                S.dequeue(e, t);
            }, o)), !r && o && o.empty.fire();
        },
        _queueHooks: function(e, t) {
            var n = t + "queueHooks";
            return Y.get(e, n) || Y.access(e, n, {
                empty: S.Callbacks("once memory").add(function() {
                    Y.remove(e, [ t + "queue", n ]);
                })
            });
        }
    }), S.fn.extend({
        queue: function(t, n) {
            var e = 2;
            return "string" != typeof t && (n = t, t = "fx", e--), arguments.length < e ? S.queue(this[0], t) : void 0 === n ? this : this.each(function() {
                var e = S.queue(this, t, n);
                S._queueHooks(this, t), "fx" === t && "inprogress" !== e[0] && S.dequeue(this, t);
            });
        },
        dequeue: function(e) {
            return this.each(function() {
                S.dequeue(this, e);
            });
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", []);
        },
        promise: function(e, t) {
            function s() {
                --r || i.resolveWith(o, [ o ]);
            }
            var n, r = 1, i = S.Deferred(), o = this, a = this.length;
            for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; a--; ) (n = Y.get(o[a], e + "queueHooks")) && n.empty && (r++, 
            n.empty.add(s));
            return s(), i.promise(t);
        }
    });
    function ae(e, t) {
        return "none" === (e = t || e).style.display || "" === e.style.display && ie(e) && "none" === S.css(e, "display");
    }
    var f = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, te = new RegExp("^(?:([+-])=|)(" + f + ")([a-z%]*)$", "i"), ne = [ "Top", "Right", "Bottom", "Left" ], re = E.documentElement, ie = function(e) {
        return S.contains(e.ownerDocument, e);
    }, oe = {
        composed: !0
    };
    re.getRootNode && (ie = function(e) {
        return S.contains(e.ownerDocument, e) || e.getRootNode(oe) === e.ownerDocument;
    });
    function se(e, t, n, r) {
        var i, o, a = 20, s = r ? function() {
            return r.cur();
        } : function() {
            return S.css(e, t, "");
        }, u = s(), l = n && n[3] || (S.cssNumber[t] ? "" : "px"), c = e.nodeType && (S.cssNumber[t] || "px" !== l && +u) && te.exec(S.css(e, t));
        if (c && c[3] !== l) {
            for (l = l || c[3], c = +(u /= 2) || 1; a--; ) S.style(e, t, c + l), 
            (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;
            S.style(e, t, (c *= 2) + l), n = n || [];
        }
        return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], 
        r && (r.unit = l, r.start = c, r.end = i)), i;
    }
    var ue = {};
    function le(e, t) {
        for (var n, r, o, a, s, u, l = [], c = 0, f = e.length; c < f; c++) (r = e[c]).style && (n = r.style.display, 
        t ? ("none" === n && (l[c] = Y.get(r, "display") || null, l[c] || (r.style.display = "")), 
        "" === r.style.display && ae(r) && (l[c] = (u = a = o = void 0, a = r.ownerDocument, 
        s = r.nodeName, (u = ue[s]) || (o = a.body.appendChild(a.createElement(s)), 
        u = S.css(o, "display"), o.parentNode.removeChild(o), ue[s] = u = "none" === u ? "block" : u)))) : "none" !== n && (l[c] = "none", 
        Y.set(r, "display", n)));
        for (c = 0; c < f; c++) null != l[c] && (e[c].style.display = l[c]);
        return e;
    }
    S.fn.extend({
        show: function() {
            return le(this, !0);
        },
        hide: function() {
            return le(this);
        },
        toggle: function(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                ae(this) ? S(this).show() : S(this).hide();
            });
        }
    });
    var pe = /^(?:checkbox|radio)$/i, de = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i, he = /^$|^module$|\/(?:java|ecma)script/i, ce = E.createDocumentFragment().appendChild(E.createElement("div")), ge = ((fe = E.createElement("input")).setAttribute("type", "radio"), 
    fe.setAttribute("checked", "checked"), fe.setAttribute("name", "t"), ce.appendChild(fe), 
    y.checkClone = ce.cloneNode(!0).cloneNode(!0).lastChild.checked, ce.innerHTML = "<textarea>x</textarea>", 
    y.noCloneChecked = !!ce.cloneNode(!0).lastChild.defaultValue, ce.innerHTML = "<option></option>", 
    y.option = !!ce.lastChild, {
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    });
    function ve(e, t) {
        var n = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || "*") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || "*") : [];
        return void 0 === t || t && A(e, t) ? S.merge([ e ], n) : n;
    }
    function ye(e, t) {
        for (var n = 0, r = e.length; n < r; n++) Y.set(e[n], "globalEval", !t || Y.get(t[n], "globalEval"));
    }
    ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td, y.option || (ge.optgroup = ge.option = [ 1, "<select multiple='multiple'>", "</select>" ]);
    var me = /<|&#?\w+;/;
    function xe(e, t, n, r, i) {
        for (var o, a, s, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) if ((o = e[d]) || 0 === o) if ("object" === w(o)) S.merge(p, o.nodeType ? [ o ] : o); else if (me.test(o)) {
            for (a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || [ "", "" ])[1].toLowerCase(), 
            s = ge[s] || ge._default, a.innerHTML = s[1] + S.htmlPrefilter(o) + s[2], 
            c = s[0]; c--; ) a = a.lastChild;
            S.merge(p, a.childNodes), (a = f.firstChild).textContent = "";
        } else p.push(t.createTextNode(o));
        for (f.textContent = "", d = 0; o = p[d++]; ) if (r && -1 < S.inArray(o, r)) i && i.push(o); else if (l = ie(o), 
        a = ve(f.appendChild(o), "script"), l && ye(a), n) for (c = 0; o = a[c++]; ) he.test(o.type || "") && n.push(o);
        return f;
    }
    var be = /^([^.]*)(?:\.(.+)|)/;
    function we() {
        return !0;
    }
    function Te() {
        return !1;
    }
    function Ce(e, t) {
        return e === function() {
            try {
                return E.activeElement;
            } catch (e) {}
        }() == ("focus" === t);
    }
    function Ee(e, t, n, r, i, o) {
        var a, s;
        if ("object" == typeof t) {
            for (s in "string" != typeof n && (r = r || n, n = void 0), t) Ee(e, s, n, r, t[s], o);
            return e;
        }
        if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, 
        r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Te; else if (!i) return e;
        return 1 === o && (a = i, (i = function(e) {
            return S().off(e), a.apply(this, arguments);
        }).guid = a.guid || (a.guid = S.guid++)), e.each(function() {
            S.event.add(this, t, i, r, n);
        });
    }
    function Se(e, i, o) {
        o ? (Y.set(e, i, !1), S.event.add(e, i, {
            namespace: !1,
            handler: function(e) {
                var t, n, r = Y.get(this, i);
                if (1 & e.isTrigger && this[i]) {
                    if (r.length) (S.event.special[i] || {}).delegateType && e.stopPropagation(); else if (r = s.call(arguments), 
                    Y.set(this, i, r), t = o(this, i), this[i](), r !== (n = Y.get(this, i)) || t ? Y.set(this, i, !1) : n = {}, 
                    r !== n) return e.stopImmediatePropagation(), e.preventDefault(), 
                    n && n.value;
                } else r.length && (Y.set(this, i, {
                    value: S.event.trigger(S.extend(r[0], S.Event.prototype), r.slice(1), this)
                }), e.stopImmediatePropagation());
            }
        })) : void 0 === Y.get(e, i) && S.event.add(e, i, we);
    }
    S.event = {
        global: {},
        add: function(t, e, n, r, i) {
            var o, a, u, l, f, p, d, s, g, v = Y.get(t);
            if (V(t)) for (n.handler && (n = (o = n).handler, i = o.selector), i && S.find.matchesSelector(re, i), 
            n.guid || (n.guid = S.guid++), (u = v.events) || (u = v.events = Object.create(null)), 
            (a = v.handle) || (a = v.handle = function(e) {
                return void 0 !== S && S.event.triggered !== e.type ? S.event.dispatch.apply(t, arguments) : void 0;
            }), l = (e = (e || "").match(P) || [ "" ]).length; l--; ) d = g = (s = be.exec(e[l]) || [])[1], 
            s = (s[2] || "").split(".").sort(), d && (f = S.event.special[d] || {}, 
            d = (i ? f.delegateType : f.bindType) || d, f = S.event.special[d] || {}, 
            g = S.extend({
                type: d,
                origType: g,
                data: r,
                handler: n,
                guid: n.guid,
                selector: i,
                needsContext: i && S.expr.match.needsContext.test(i),
                namespace: s.join(".")
            }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(t, r, s, a) || t.addEventListener && t.addEventListener(d, a)), 
            f.add && (f.add.call(t, g), g.handler.guid || (g.handler.guid = n.guid)), 
            i ? p.splice(p.delegateCount++, 0, g) : p.push(g), S.event.global[d] = !0);
        },
        remove: function(e, t, n, r, i) {
            var o, a, s, u, l, c, f, p, d, h, g, v = Y.hasData(e) && Y.get(e);
            if (v && (u = v.events)) {
                for (l = (t = (t || "").match(P) || [ "" ]).length; l--; ) if (d = g = (s = be.exec(t[l]) || [])[1], 
                h = (s[2] || "").split(".").sort(), d) {
                    for (f = S.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], 
                    s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), 
                    a = o = p.length; o--; ) c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), 
                    c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
                    a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, v.handle) || S.removeEvent(e, d, v.handle), 
                    delete u[d]);
                } else for (d in u) S.event.remove(e, d + t[l], n, r, !0);
                S.isEmptyObject(u) && Y.remove(e, "handle events");
            }
        },
        dispatch: function(e) {
            var t, n, i, o, a, s = new Array(arguments.length), u = S.event.fix(e), e = (Y.get(this, "events") || Object.create(null))[u.type] || [], c = S.event.special[u.type] || {};
            for (s[0] = u, t = 1; t < arguments.length; t++) s[t] = arguments[t];
            if (u.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, u)) {
                for (a = S.event.handlers.call(this, u, e), t = 0; (i = a[t++]) && !u.isPropagationStopped(); ) for (u.currentTarget = i.elem, 
                n = 0; (o = i.handlers[n++]) && !u.isImmediatePropagationStopped(); ) u.rnamespace && !1 !== o.namespace && !u.rnamespace.test(o.namespace) || (u.handleObj = o, 
                u.data = o.data, void 0 !== (o = ((S.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, s)) && !1 === (u.result = o) && (u.preventDefault(), 
                u.stopPropagation()));
                return c.postDispatch && c.postDispatch.call(this, u), u.result;
            }
        },
        handlers: function(e, t) {
            var n, r, i, o, a, s = [], u = t.delegateCount, l = e.target;
            if (u && l.nodeType && !("click" === e.type && 1 <= e.button)) for (;l !== this; l = l.parentNode || this) if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
                for (o = [], a = {}, n = 0; n < u; n++) void 0 === a[i = (r = t[n]).selector + " "] && (a[i] = r.needsContext ? -1 < S(i, this).index(l) : S.find(i, this, null, [ l ]).length), 
                a[i] && o.push(r);
                o.length && s.push({
                    elem: l,
                    handlers: o
                });
            }
            return l = this, u < t.length && s.push({
                elem: l,
                handlers: t.slice(u)
            }), s;
        },
        addProp: function(t, e) {
            Object.defineProperty(S.Event.prototype, t, {
                enumerable: !0,
                configurable: !0,
                get: m(e) ? function() {
                    if (this.originalEvent) return e(this.originalEvent);
                } : function() {
                    if (this.originalEvent) return this.originalEvent[t];
                },
                set: function(e) {
                    Object.defineProperty(this, t, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: e
                    });
                }
            });
        },
        fix: function(e) {
            return e[S.expando] ? e : new S.Event(e);
        },
        special: {
            load: {
                noBubble: !0
            },
            click: {
                setup: function(e) {
                    e = this || e;
                    return pe.test(e.type) && e.click && A(e, "input") && Se(e, "click", we), 
                    !1;
                },
                trigger: function(e) {
                    e = this || e;
                    return pe.test(e.type) && e.click && A(e, "input") && Se(e, "click"), 
                    !0;
                },
                _default: function(e) {
                    e = e.target;
                    return pe.test(e.type) && e.click && A(e, "input") && Y.get(e, "click") || A(e, "a");
                }
            },
            beforeunload: {
                postDispatch: function(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
                }
            }
        }
    }, S.removeEvent = function(e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n);
    }, S.Event = function(e, t) {
        if (!(this instanceof S.Event)) return new S.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? we : Te, 
        this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, 
        this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, 
        t && S.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), 
        this[S.expando] = !0;
    }, S.Event.prototype = {
        constructor: S.Event,
        isDefaultPrevented: Te,
        isPropagationStopped: Te,
        isImmediatePropagationStopped: Te,
        isSimulated: !1,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = we, e && !this.isSimulated && e.preventDefault();
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = we, e && !this.isSimulated && e.stopPropagation();
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = we, e && !this.isSimulated && e.stopImmediatePropagation(), 
            this.stopPropagation();
        }
    }, S.each({
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        char: !0,
        code: !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: !0
    }, S.event.addProp), S.each({
        focus: "focusin",
        blur: "focusout"
    }, function(e, t) {
        S.event.special[e] = {
            setup: function() {
                return Se(this, e, Ce), !1;
            },
            trigger: function() {
                return Se(this, e), !0;
            },
            _default: function() {
                return !0;
            },
            delegateType: t
        };
    }), S.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(e, i) {
        S.event.special[e] = {
            delegateType: i,
            bindType: i,
            handle: function(e) {
                var t, n = e.relatedTarget, r = e.handleObj;
                return n && (n === this || S.contains(this, n)) || (e.type = r.origType, 
                t = r.handler.apply(this, arguments), e.type = i), t;
            }
        };
    }), S.fn.extend({
        on: function(e, t, n, r) {
            return Ee(this, e, t, n, r);
        },
        one: function(e, t, n, r) {
            return Ee(this, e, t, n, r, 1);
        },
        off: function(e, t, n) {
            var r, i;
            if (e && e.preventDefault && e.handleObj) return r = e.handleObj, S(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), 
            this;
            if ("object" != typeof e) return !1 !== t && "function" != typeof t || (n = t, 
            t = void 0), !1 === n && (n = Te), this.each(function() {
                S.event.remove(this, e, n, t);
            });
            for (i in e) this.off(i, t, e[i]);
            return this;
        }
    });
    var ke = /<script|<style|<link/i, Ae = /checked\s*(?:[^=]|=\s*.checked.)/i, Ne = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function je(e, t) {
        return A(e, "table") && A(11 !== t.nodeType ? t : t.firstChild, "tr") && S(e).children("tbody")[0] || e;
    }
    function De(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }
    function qe(e) {
        return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), 
        e;
    }
    function Le(e, t) {
        var n, r, i, s;
        if (1 === t.nodeType) {
            if (Y.hasData(e) && (s = Y.get(e).events)) for (i in Y.remove(t, "handle events"), 
            s) for (n = 0, r = s[i].length; n < r; n++) S.event.add(t, i, s[i][n]);
            Q.hasData(e) && (e = Q.access(e), e = S.extend({}, e), Q.set(t, e));
        }
    }
    function He(n, r, i, o) {
        r = g(r);
        var e, t, a, s, u, l, c = 0, f = n.length, p = f - 1, d = r[0], h = m(d);
        if (h || 1 < f && "string" == typeof d && !y.checkClone && Ae.test(d)) return n.each(function(e) {
            var t = n.eq(e);
            h && (r[0] = d.call(this, e, t.html())), He(t, r, i, o);
        });
        if (f && (t = (e = xe(r, n[0].ownerDocument, !1, n, o)).firstChild, 1 === e.childNodes.length && (e = t), 
        t || o)) {
            for (s = (a = S.map(ve(e, "script"), De)).length; c < f; c++) u = e, 
            c !== p && (u = S.clone(u, !0, !0), s && S.merge(a, ve(u, "script"))), 
            i.call(n[c], u, c);
            if (s) for (l = a[a.length - 1].ownerDocument, S.map(a, qe), c = 0; c < s; c++) u = a[c], 
            he.test(u.type || "") && !Y.access(u, "globalEval") && S.contains(l, u) && (u.src && "module" !== (u.type || "").toLowerCase() ? S._evalUrl && !u.noModule && S._evalUrl(u.src, {
                nonce: u.nonce || u.getAttribute("nonce")
            }, l) : b(u.textContent.replace(Ne, ""), u, l));
        }
        return n;
    }
    function Oe(e, t, n) {
        for (var r, i = t ? S.filter(t, e) : e, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || S.cleanData(ve(r)), 
        r.parentNode && (n && ie(r) && ye(ve(r, "script")), r.parentNode.removeChild(r));
        return e;
    }
    S.extend({
        htmlPrefilter: function(e) {
            return e;
        },
        clone: function(e, t, n) {
            var r, i, o, a, s, u, l, c = e.cloneNode(!0), f = ie(e);
            if (!(y.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || S.isXMLDoc(e))) for (a = ve(c), 
            r = 0, i = (o = ve(e)).length; r < i; r++) s = o[r], "input" === (l = (u = a[r]).nodeName.toLowerCase()) && pe.test(s.type) ? u.checked = s.checked : "input" !== l && "textarea" !== l || (u.defaultValue = s.defaultValue);
            if (t) if (n) for (o = o || ve(e), a = a || ve(c), r = 0, i = o.length; r < i; r++) Le(o[r], a[r]); else Le(e, c);
            return 0 < (a = ve(c, "script")).length && ye(a, !f && ve(e, "script")), 
            c;
        },
        cleanData: function(e) {
            for (var t, n, r, i = S.event.special, o = 0; void 0 !== (n = e[o]); o++) if (V(n)) {
                if (t = n[Y.expando]) {
                    if (t.events) for (r in t.events) i[r] ? S.event.remove(n, r) : S.removeEvent(n, r, t.handle);
                    n[Y.expando] = void 0;
                }
                n[Q.expando] && (n[Q.expando] = void 0);
            }
        }
    }), S.fn.extend({
        detach: function(e) {
            return Oe(this, e, !0);
        },
        remove: function(e) {
            return Oe(this, e);
        },
        text: function(e) {
            return $(this, function(e) {
                return void 0 === e ? S.text(this) : this.empty().each(function() {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
                });
            }, null, e, arguments.length);
        },
        append: function() {
            return He(this, arguments, function(e) {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || je(this, e).appendChild(e);
            });
        },
        prepend: function() {
            return He(this, arguments, function(e) {
                var t;
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (t = je(this, e)).insertBefore(e, t.firstChild);
            });
        },
        before: function() {
            return He(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this);
            });
        },
        after: function() {
            return He(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
            });
        },
        empty: function() {
            for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (S.cleanData(ve(e, !1)), 
            e.textContent = "");
            return this;
        },
        clone: function(e, t) {
            return e = null != e && e, t = null == t ? e : t, this.map(function() {
                return S.clone(this, e, t);
            });
        },
        html: function(e) {
            return $(this, function(e) {
                var t = this[0] || {}, n = 0, r = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !ke.test(e) && !ge[(de.exec(e) || [ "", "" ])[1].toLowerCase()]) {
                    e = S.htmlPrefilter(e);
                    try {
                        for (;n < r; n++) 1 === (t = this[n] || {}).nodeType && (S.cleanData(ve(t, !1)), 
                        t.innerHTML = e);
                        t = 0;
                    } catch (e) {}
                }
                t && this.empty().append(e);
            }, null, e, arguments.length);
        },
        replaceWith: function() {
            var n = [];
            return He(this, arguments, function(e) {
                var t = this.parentNode;
                S.inArray(this, n) < 0 && (S.cleanData(ve(this)), t && t.replaceChild(e, this));
            }, n);
        }
    }), S.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(e, a) {
        S.fn[e] = function(e) {
            for (var t, n = [], r = S(e), i = r.length - 1, o = 0; o <= i; o++) t = o === i ? this : this.clone(!0), 
            S(r[o])[a](t), u.apply(n, t.get());
            return this.pushStack(n);
        };
    });
    function Re(e) {
        var t = e.ownerDocument.defaultView;
        return (t = t && t.opener ? t : C).getComputedStyle(e);
    }
    function Me(e, t, n) {
        var i, o = {};
        for (i in t) o[i] = e.style[i], e.style[i] = t[i];
        for (i in n = n.call(e), t) e.style[i] = o[i];
        return n;
    }
    var Pe = new RegExp("^(" + f + ")(?!px)[a-z%]+$", "i"), Ie = new RegExp(ne.join("|"), "i");
    function We(e, t, n) {
        var o, a, s = e.style;
        return (n = n || Re(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || ie(e) || (a = S.style(e, t)), 
        !y.pixelBoxStyles() && Pe.test(a) && Ie.test(t) && (e = s.width, t = s.minWidth, 
        o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = e, 
        s.minWidth = t, s.maxWidth = o)), void 0 !== a ? a + "" : a;
    }
    function Fe(e, t) {
        return {
            get: function() {
                if (!e()) return (this.get = t).apply(this, arguments);
                delete this.get;
            }
        };
    }
    !function() {
        function e() {
            var e;
            l && (u.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", 
            l.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", 
            re.appendChild(u).appendChild(l), e = C.getComputedStyle(l), n = "1%" !== e.top, 
            s = 12 === t(e.marginLeft), l.style.right = "60%", o = 36 === t(e.right), 
            r = 36 === t(e.width), l.style.position = "absolute", i = 12 === t(l.offsetWidth / 3), 
            re.removeChild(u), l = null);
        }
        function t(e) {
            return Math.round(parseFloat(e));
        }
        var n, r, i, o, a, s, u = E.createElement("div"), l = E.createElement("div");
        l.style && (l.style.backgroundClip = "content-box", l.cloneNode(!0).style.backgroundClip = "", 
        y.clearCloneStyle = "content-box" === l.style.backgroundClip, S.extend(y, {
            boxSizingReliable: function() {
                return e(), r;
            },
            pixelBoxStyles: function() {
                return e(), o;
            },
            pixelPosition: function() {
                return e(), n;
            },
            reliableMarginLeft: function() {
                return e(), s;
            },
            scrollboxSize: function() {
                return e(), i;
            },
            reliableTrDimensions: function() {
                var e, t, n;
                return null == a && (e = E.createElement("table"), t = E.createElement("tr"), 
                n = E.createElement("div"), e.style.cssText = "position:absolute;left:-11111px;border-collapse:separate", 
                t.style.cssText = "border:1px solid", t.style.height = "1px", n.style.height = "9px", 
                n.style.display = "block", re.appendChild(e).appendChild(t).appendChild(n), 
                n = C.getComputedStyle(t), a = parseInt(n.height, 10) + parseInt(n.borderTopWidth, 10) + parseInt(n.borderBottomWidth, 10) === t.offsetHeight, 
                re.removeChild(e)), a;
            }
        }));
    }();
    var Be = [ "Webkit", "Moz", "ms" ], $e = E.createElement("div").style, _e = {};
    function ze(e) {
        return S.cssProps[e] || _e[e] || (e in $e ? e : _e[e] = function(e) {
            for (var t = e[0].toUpperCase() + e.slice(1), n = Be.length; n--; ) if ((e = Be[n] + t) in $e) return e;
        }(e) || e);
    }
    var Ue = /^(none|table(?!-c[ea]).+)/, Xe = /^--/, Ve = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, Ge = {
        letterSpacing: "0",
        fontWeight: "400"
    };
    function Ye(e, t, n) {
        var r = te.exec(t);
        return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t;
    }
    function Qe(e, t, n, r, i, o) {
        var a = "width" === t ? 1 : 0, s = 0, u = 0;
        if (n === (r ? "border" : "content")) return 0;
        for (;a < 4; a += 2) "margin" === n && (u += S.css(e, n + ne[a], !0, i)), 
        r ? ("content" === n && (u -= S.css(e, "padding" + ne[a], !0, i)), "margin" !== n && (u -= S.css(e, "border" + ne[a] + "Width", !0, i))) : (u += S.css(e, "padding" + ne[a], !0, i), 
        "padding" !== n ? u += S.css(e, "border" + ne[a] + "Width", !0, i) : s += S.css(e, "border" + ne[a] + "Width", !0, i));
        return !r && 0 <= o && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5)) || 0), 
        u;
    }
    function Je(e, t, n) {
        var r = Re(e), i = (!y.boxSizingReliable() || n) && "border-box" === S.css(e, "boxSizing", !1, r), o = i, a = We(e, t, r), s = "offset" + t[0].toUpperCase() + t.slice(1);
        if (Pe.test(a)) {
            if (!n) return a;
            a = "auto";
        }
        return (!y.boxSizingReliable() && i || !y.reliableTrDimensions() && A(e, "tr") || "auto" === a || !parseFloat(a) && "inline" === S.css(e, "display", !1, r)) && e.getClientRects().length && (i = "border-box" === S.css(e, "boxSizing", !1, r), 
        (o = s in e) && (a = e[s])), (a = parseFloat(a) || 0) + Qe(e, t, n || (i ? "border" : "content"), o, r, a) + "px";
    }
    function Ke(e, t, n, r, i) {
        return new Ke.prototype.init(e, t, n, r, i);
    }
    S.extend({
        cssHooks: {
            opacity: {
                get: function(e, t) {
                    if (t) return "" === (t = We(e, "opacity")) ? "1" : t;
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            gridArea: !0,
            gridColumn: !0,
            gridColumnEnd: !0,
            gridColumnStart: !0,
            gridRow: !0,
            gridRowEnd: !0,
            gridRowStart: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {},
        style: function(e, t, n, r) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var i, o, a, s = X(t), u = Xe.test(t), l = e.style;
                if (u || (t = ze(s)), a = S.cssHooks[t] || S.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];
                "string" == (o = typeof n) && (i = te.exec(n)) && i[1] && (n = se(e, t, i), 
                o = "number"), null != n && n == n && ("number" !== o || u || (n += i && i[3] || (S.cssNumber[s] ? "" : "px")), 
                y.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), 
                a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
            }
        },
        css: function(e, t, n, r) {
            var i, s = X(t);
            return Xe.test(t) || (t = ze(s)), "normal" === (i = void 0 === (i = (s = S.cssHooks[t] || S.cssHooks[s]) && "get" in s ? s.get(e, !0, n) : i) ? We(e, t, r) : i) && t in Ge && (i = Ge[t]), 
            "" === n || n ? (s = parseFloat(i), !0 === n || isFinite(s) ? s || 0 : i) : i;
        }
    }), S.each([ "height", "width" ], function(e, u) {
        S.cssHooks[u] = {
            get: function(e, t, n) {
                if (t) return !Ue.test(S.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? Je(e, u, n) : Me(e, Ve, function() {
                    return Je(e, u, n);
                });
            },
            set: function(e, t, n) {
                var i = Re(e), o = !y.scrollboxSize() && "absolute" === i.position, a = (o || n) && "border-box" === S.css(e, "boxSizing", !1, i), n = n ? Qe(e, u, n, a, i) : 0;
                return a && o && (n -= Math.ceil(e["offset" + u[0].toUpperCase() + u.slice(1)] - parseFloat(i[u]) - Qe(e, u, "border", !1, i) - .5)), 
                n && (a = te.exec(t)) && "px" !== (a[3] || "px") && (e.style[u] = t, 
                t = S.css(e, u)), Ye(0, t, n);
            }
        };
    }), S.cssHooks.marginLeft = Fe(y.reliableMarginLeft, function(e, t) {
        if (t) return (parseFloat(We(e, "marginLeft")) || e.getBoundingClientRect().left - Me(e, {
            marginLeft: 0
        }, function() {
            return e.getBoundingClientRect().left;
        })) + "px";
    }), S.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(i, o) {
        S.cssHooks[i + o] = {
            expand: function(e) {
                for (var t = 0, n = {}, r = "string" == typeof e ? e.split(" ") : [ e ]; t < 4; t++) n[i + ne[t] + o] = r[t] || r[t - 2] || r[0];
                return n;
            }
        }, "margin" !== i && (S.cssHooks[i + o].set = Ye);
    }), S.fn.extend({
        css: function(e, t) {
            return $(this, function(e, t, n) {
                var r, i, o = {}, a = 0;
                if (Array.isArray(t)) {
                    for (r = Re(e), i = t.length; a < i; a++) o[t[a]] = S.css(e, t[a], !1, r);
                    return o;
                }
                return void 0 !== n ? S.style(e, t, n) : S.css(e, t);
            }, e, t, 1 < arguments.length);
        }
    }), ((S.Tween = Ke).prototype = {
        constructor: Ke,
        init: function(e, t, n, r, i, o) {
            this.elem = e, this.prop = n, this.easing = i || S.easing._default, 
            this.options = t, this.start = this.now = this.cur(), this.end = r, 
            this.unit = o || (S.cssNumber[n] ? "" : "px");
        },
        cur: function() {
            var e = Ke.propHooks[this.prop];
            return (e && e.get ? e : Ke.propHooks._default).get(this);
        },
        run: function(e) {
            var t, n = Ke.propHooks[this.prop];
            return this.options.duration ? this.pos = t = S.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, 
            this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
            (n && n.set ? n : Ke.propHooks._default).set(this), this;
        }
    }).init.prototype = Ke.prototype, (Ke.propHooks = {
        _default: {
            get: function(e) {
                return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (e = S.css(e.elem, e.prop, "")) && "auto" !== e ? e : 0;
            },
            set: function(e) {
                S.fx.step[e.prop] ? S.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !S.cssHooks[e.prop] && null == e.elem.style[ze(e.prop)] ? e.elem[e.prop] = e.now : S.style(e.elem, e.prop, e.now + e.unit);
            }
        }
    }).scrollTop = Ke.propHooks.scrollLeft = {
        set: function(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
        }
    }, S.easing = {
        linear: function(e) {
            return e;
        },
        swing: function(e) {
            return .5 - Math.cos(e * Math.PI) / 2;
        },
        _default: "swing"
    }, S.fx = Ke.prototype.init, S.fx.step = {};
    var Ze, et, fe, rt = /^(?:toggle|show|hide)$/, it = /queueHooks$/;
    function ot() {
        et && (!1 === E.hidden && C.requestAnimationFrame ? C.requestAnimationFrame(ot) : C.setTimeout(ot, S.fx.interval), 
        S.fx.tick());
    }
    function at() {
        return C.setTimeout(function() {
            Ze = void 0;
        }), Ze = Date.now();
    }
    function st(e, t) {
        var n, r = 0, i = {
            height: e
        };
        for (t = t ? 1 : 0; r < 4; r += 2 - t) i["margin" + (n = ne[r])] = i["padding" + n] = e;
        return t && (i.opacity = i.width = e), i;
    }
    function ut(e, t, n) {
        for (var r, i = (lt.tweeners[t] || []).concat(lt.tweeners["*"]), o = 0, a = i.length; o < a; o++) if (r = i[o].call(n, t, e)) return r;
    }
    function lt(o, e, t) {
        var n, a, r = 0, i = lt.prefilters.length, s = S.Deferred().always(function() {
            delete u.elem;
        }), u = function() {
            if (a) return !1;
            for (var e = Ze || at(), e = Math.max(0, l.startTime + l.duration - e), n = 1 - (e / l.duration || 0), r = 0, i = l.tweens.length; r < i; r++) l.tweens[r].run(n);
            return s.notifyWith(o, [ l, n, e ]), n < 1 && i ? e : (i || s.notifyWith(o, [ l, 1, 0 ]), 
            s.resolveWith(o, [ l ]), !1);
        }, l = s.promise({
            elem: o,
            props: S.extend({}, e),
            opts: S.extend(!0, {
                specialEasing: {},
                easing: S.easing._default
            }, t),
            originalProperties: e,
            originalOptions: t,
            startTime: Ze || at(),
            duration: t.duration,
            tweens: [],
            createTween: function(e, t) {
                t = S.Tween(o, l.opts, e, t, l.opts.specialEasing[e] || l.opts.easing);
                return l.tweens.push(t), t;
            },
            stop: function(e) {
                var t = 0, n = e ? l.tweens.length : 0;
                if (a) return this;
                for (a = !0; t < n; t++) l.tweens[t].run(1);
                return e ? (s.notifyWith(o, [ l, 1, 0 ]), s.resolveWith(o, [ l, e ])) : s.rejectWith(o, [ l, e ]), 
                this;
            }
        }), c = l.props;
        for (function(e, t) {
            var n, r, i, o, a;
            for (n in e) if (i = t[r = X(n)], o = e[n], Array.isArray(o) && (i = o[1], 
            o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = S.cssHooks[r]) && "expand" in a) for (n in o = a.expand(o), 
            delete e[r], o) n in e || (e[n] = o[n], t[n] = i); else t[r] = i;
        }(c, l.opts.specialEasing); r < i; r++) if (n = lt.prefilters[r].call(l, o, c, l.opts)) return m(n.stop) && (S._queueHooks(l.elem, l.opts.queue).stop = n.stop.bind(n)), 
        n;
        return S.map(c, ut, l), m(l.opts.start) && l.opts.start.call(o, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), 
        S.fx.timer(S.extend(u, {
            elem: o,
            anim: l,
            queue: l.opts.queue
        })), l;
    }
    S.Animation = S.extend(lt, {
        tweeners: {
            "*": [ function(e, t) {
                var n = this.createTween(e, t);
                return se(n.elem, e, te.exec(t), n), n;
            } ]
        },
        tweener: function(e, t) {
            for (var n, r = 0, i = (e = m(e) ? (t = e, [ "*" ]) : e.match(P)).length; r < i; r++) n = e[r], 
            lt.tweeners[n] = lt.tweeners[n] || [], lt.tweeners[n].unshift(t);
        },
        prefilters: [ function(e, t, n) {
            var r, i, o, a, s, u, l, f = "width" in t || "height" in t, p = this, d = {}, h = e.style, g = e.nodeType && ae(e), v = Y.get(e, "fxshow");
            for (r in n.queue || (null == (a = S._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, 
            s = a.empty.fire, a.empty.fire = function() {
                a.unqueued || s();
            }), a.unqueued++, p.always(function() {
                p.always(function() {
                    a.unqueued--, S.queue(e, "fx").length || a.empty.fire();
                });
            })), t) if (i = t[r], rt.test(i)) {
                if (delete t[r], o = o || "toggle" === i, i === (g ? "hide" : "show")) {
                    if ("show" !== i || !v || void 0 === v[r]) continue;
                    g = !0;
                }
                d[r] = v && v[r] || S.style(e, r);
            }
            if ((u = !S.isEmptyObject(t)) || !S.isEmptyObject(d)) for (r in f && 1 === e.nodeType && (n.overflow = [ h.overflow, h.overflowX, h.overflowY ], 
            null == (l = v && v.display) && (l = Y.get(e, "display")), "none" === (f = S.css(e, "display")) && (l ? f = l : (le([ e ], !0), 
            l = e.style.display || l, f = S.css(e, "display"), le([ e ]))), ("inline" === f || "inline-block" === f && null != l) && "none" === S.css(e, "float") && (u || (p.done(function() {
                h.display = l;
            }), null == l && (f = h.display, l = "none" === f ? "" : f)), h.display = "inline-block")), 
            n.overflow && (h.overflow = "hidden", p.always(function() {
                h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];
            })), u = !1, d) u || (v ? "hidden" in v && (g = v.hidden) : v = Y.access(e, "fxshow", {
                display: l
            }), o && (v.hidden = !g), g && le([ e ], !0), p.done(function() {
                for (r in g || le([ e ]), Y.remove(e, "fxshow"), d) S.style(e, r, d[r]);
            })), u = ut(g ? v[r] : 0, r, p), r in v || (v[r] = u.start, g && (u.end = u.start, 
            u.start = 0));
        } ],
        prefilter: function(e, t) {
            t ? lt.prefilters.unshift(e) : lt.prefilters.push(e);
        }
    }), S.speed = function(e, t, n) {
        var r = e && "object" == typeof e ? S.extend({}, e) : {
            complete: n || !n && t || m(e) && e,
            duration: e,
            easing: n && t || t && !m(t) && t
        };
        return S.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in S.fx.speeds ? r.duration = S.fx.speeds[r.duration] : r.duration = S.fx.speeds._default), 
        null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, 
        r.complete = function() {
            m(r.old) && r.old.call(this), r.queue && S.dequeue(this, r.queue);
        }, r;
    }, S.fn.extend({
        fadeTo: function(e, t, n, r) {
            return this.filter(ae).css("opacity", 0).show().end().animate({
                opacity: t
            }, e, n, r);
        },
        animate: function(t, e, n, r) {
            function a() {
                var e = lt(this, S.extend({}, t), o);
                (i || Y.get(this, "finish")) && e.stop(!0);
            }
            var i = S.isEmptyObject(t), o = S.speed(e, n, r);
            return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
        },
        stop: function(i, e, o) {
            function a(e) {
                var t = e.stop;
                delete e.stop, t(o);
            }
            return "string" != typeof i && (o = e, e = i, i = void 0), e && this.queue(i || "fx", []), 
            this.each(function() {
                var e = !0, t = null != i && i + "queueHooks", n = S.timers, r = Y.get(this);
                if (t) r[t] && r[t].stop && a(r[t]); else for (t in r) r[t] && r[t].stop && it.test(t) && a(r[t]);
                for (t = n.length; t--; ) n[t].elem !== this || null != i && n[t].queue !== i || (n[t].anim.stop(o), 
                e = !1, n.splice(t, 1));
                !e && o || S.dequeue(this, i);
            });
        },
        finish: function(a) {
            return !1 !== a && (a = a || "fx"), this.each(function() {
                var e, t = Y.get(this), n = t[a + "queue"], r = t[a + "queueHooks"], i = S.timers, o = n ? n.length : 0;
                for (t.finish = !0, S.queue(this, a, []), r && r.stop && r.stop.call(this, !0), 
                e = i.length; e--; ) i[e].elem === this && i[e].queue === a && (i[e].anim.stop(!0), 
                i.splice(e, 1));
                for (e = 0; e < o; e++) n[e] && n[e].finish && n[e].finish.call(this);
                delete t.finish;
            });
        }
    }), S.each([ "toggle", "show", "hide" ], function(e, r) {
        var i = S.fn[r];
        S.fn[r] = function(e, t, n) {
            return null == e || "boolean" == typeof e ? i.apply(this, arguments) : this.animate(st(r, !0), e, t, n);
        };
    }), S.each({
        slideDown: st("show"),
        slideUp: st("hide"),
        slideToggle: st("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(e, r) {
        S.fn[e] = function(e, t, n) {
            return this.animate(r, e, t, n);
        };
    }), S.timers = [], S.fx.tick = function() {
        var e, t = 0, n = S.timers;
        for (Ze = Date.now(); t < n.length; t++) (e = n[t])() || n[t] !== e || n.splice(t--, 1);
        n.length || S.fx.stop(), Ze = void 0;
    }, S.fx.timer = function(e) {
        S.timers.push(e), S.fx.start();
    }, S.fx.interval = 13, S.fx.start = function() {
        et || (et = !0, ot());
    }, S.fx.stop = function() {
        et = null;
    }, S.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, S.fn.delay = function(r, e) {
        return r = S.fx && S.fx.speeds[r] || r, this.queue(e = e || "fx", function(e, t) {
            var n = C.setTimeout(e, r);
            t.stop = function() {
                C.clearTimeout(n);
            };
        });
    }, fe = E.createElement("input"), ce = E.createElement("select").appendChild(E.createElement("option")), 
    fe.type = "checkbox", y.checkOn = "" !== fe.value, y.optSelected = ce.selected, 
    (fe = E.createElement("input")).value = "t", fe.type = "radio", y.radioValue = "t" === fe.value;
    var ct, ft = S.expr.attrHandle, pt = (S.fn.extend({
        attr: function(e, t) {
            return $(this, S.attr, e, t, 1 < arguments.length);
        },
        removeAttr: function(e) {
            return this.each(function() {
                S.removeAttr(this, e);
            });
        }
    }), S.extend({
        attr: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return void 0 === e.getAttribute ? S.prop(e, t, n) : (1 === o && S.isXMLDoc(e) || (i = S.attrHooks[t.toLowerCase()] || (S.expr.match.bool.test(t) ? ct : void 0)), 
            void 0 !== n ? null === n ? void S.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), 
            n) : !(i && "get" in i && null !== (r = i.get(e, t))) && null == (r = S.find.attr(e, t)) ? void 0 : r);
        },
        attrHooks: {
            type: {
                set: function(e, t) {
                    var n;
                    if (!y.radioValue && "radio" === t && A(e, "input")) return n = e.value, 
                    e.setAttribute("type", t), n && (e.value = n), t;
                }
            }
        },
        removeAttr: function(e, t) {
            var n, r = 0, i = t && t.match(P);
            if (i && 1 === e.nodeType) for (;n = i[r++]; ) e.removeAttribute(n);
        }
    }), ct = {
        set: function(e, t, n) {
            return !1 === t ? S.removeAttr(e, n) : e.setAttribute(n, n), n;
        }
    }, S.each(S.expr.match.bool.source.match(/\w+/g), function(e, t) {
        var a = ft[t] || S.find.attr;
        ft[t] = function(e, t, n) {
            var r, i, o = t.toLowerCase();
            return n || (i = ft[o], ft[o] = r, r = null != a(e, t, n) ? o : null, 
            ft[o] = i), r;
        };
    }), /^(?:input|select|textarea|button)$/i), dt = /^(?:a|area)$/i;
    function ht(e) {
        return (e.match(P) || []).join(" ");
    }
    function gt(e) {
        return e.getAttribute && e.getAttribute("class") || "";
    }
    function vt(e) {
        return Array.isArray(e) ? e : "string" == typeof e && e.match(P) || [];
    }
    S.fn.extend({
        prop: function(e, t) {
            return $(this, S.prop, e, t, 1 < arguments.length);
        },
        removeProp: function(e) {
            return this.each(function() {
                delete this[S.propFix[e] || e];
            });
        }
    }), S.extend({
        prop: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return 1 === o && S.isXMLDoc(e) || (t = S.propFix[t] || t, 
            i = S.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
        },
        propHooks: {
            tabIndex: {
                get: function(e) {
                    var t = S.find.attr(e, "tabindex");
                    return t ? parseInt(t, 10) : pt.test(e.nodeName) || dt.test(e.nodeName) && e.href ? 0 : -1;
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    }), y.optSelected || (S.propHooks.selected = {
        get: function(e) {
            e = e.parentNode;
            return e && e.parentNode && e.parentNode.selectedIndex, null;
        },
        set: function(e) {
            e = e.parentNode;
            e && (e.selectedIndex, e.parentNode && e.parentNode.selectedIndex);
        }
    }), S.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        S.propFix[this.toLowerCase()] = this;
    }), S.fn.extend({
        addClass: function(t) {
            var e, n, r, o, a, i, u = 0;
            if (m(t)) return this.each(function(e) {
                S(this).addClass(t.call(this, e, gt(this)));
            });
            if ((e = vt(t)).length) for (;n = this[u++]; ) if (i = gt(n), r = 1 === n.nodeType && " " + ht(i) + " ") {
                for (a = 0; o = e[a++]; ) r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                i !== (i = ht(r)) && n.setAttribute("class", i);
            }
            return this;
        },
        removeClass: function(t) {
            var e, n, r, o, a, i, u = 0;
            if (m(t)) return this.each(function(e) {
                S(this).removeClass(t.call(this, e, gt(this)));
            });
            if (!arguments.length) return this.attr("class", "");
            if ((e = vt(t)).length) for (;n = this[u++]; ) if (i = gt(n), r = 1 === n.nodeType && " " + ht(i) + " ") {
                for (a = 0; o = e[a++]; ) for (;-1 < r.indexOf(" " + o + " "); ) r = r.replace(" " + o + " ", " ");
                i !== (i = ht(r)) && n.setAttribute("class", i);
            }
            return this;
        },
        toggleClass: function(i, t) {
            var o = typeof i, a = "string" == o || Array.isArray(i);
            return "boolean" == typeof t && a ? t ? this.addClass(i) : this.removeClass(i) : m(i) ? this.each(function(e) {
                S(this).toggleClass(i.call(this, e, gt(this), t), t);
            }) : this.each(function() {
                var e, t, n, r;
                if (a) for (t = 0, n = S(this), r = vt(i); e = r[t++]; ) n.hasClass(e) ? n.removeClass(e) : n.addClass(e); else void 0 !== i && "boolean" != o || ((e = gt(this)) && Y.set(this, "__className__", e), 
                this.setAttribute && this.setAttribute("class", !e && !1 !== i && Y.get(this, "__className__") || ""));
            });
        },
        hasClass: function(e) {
            for (var n, r = 0, t = " " + e + " "; n = this[r++]; ) if (1 === n.nodeType && -1 < (" " + ht(gt(n)) + " ").indexOf(t)) return !0;
            return !1;
        }
    });
    function xt(e) {
        e.stopPropagation();
    }
    var yt = /\r/g, mt = (S.fn.extend({
        val: function(n) {
            var r, e, i, t = this[0];
            return arguments.length ? (i = m(n), this.each(function(e) {
                1 === this.nodeType && (null == (e = i ? n.call(this, e, S(this).val()) : n) ? e = "" : "number" == typeof e ? e += "" : Array.isArray(e) && (e = S.map(e, function(e) {
                    return null == e ? "" : e + "";
                })), (r = S.valHooks[this.type] || S.valHooks[this.nodeName.toLowerCase()]) && "set" in r && void 0 !== r.set(this, e, "value") || (this.value = e));
            })) : t ? (r = S.valHooks[t.type] || S.valHooks[t.nodeName.toLowerCase()]) && "get" in r && void 0 !== (e = r.get(t, "value")) ? e : "string" == typeof (e = t.value) ? e.replace(yt, "") : null == e ? "" : e : void 0;
        }
    }), S.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var t = S.find.attr(e, "value");
                    return null != t ? t : ht(S.text(e));
                }
            },
            select: {
                get: function(e) {
                    for (var n, i = e.options, o = e.selectedIndex, a = "select-one" === e.type, s = a ? null : [], u = a ? o + 1 : i.length, r = o < 0 ? u : a ? o : 0; r < u; r++) if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !A(n.parentNode, "optgroup"))) {
                        if (n = S(n).val(), a) return n;
                        s.push(n);
                    }
                    return s;
                },
                set: function(e, t) {
                    for (var n, r, i = e.options, o = S.makeArray(t), a = i.length; a--; ) ((r = i[a]).selected = -1 < S.inArray(S.valHooks.option.get(r), o)) && (n = !0);
                    return n || (e.selectedIndex = -1), o;
                }
            }
        }
    }), S.each([ "radio", "checkbox" ], function() {
        S.valHooks[this] = {
            set: function(e, t) {
                if (Array.isArray(t)) return e.checked = -1 < S.inArray(S(e).val(), t);
            }
        }, y.checkOn || (S.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value;
        });
    }), y.focusin = "onfocusin" in C, /^(?:focusinfocus|focusoutblur)$/), bt = (S.extend(S.event, {
        trigger: function(e, t, n, r) {
            var i, a, s, u, l, c, f, p = [ n || E ], d = v.call(e, "type") ? e.type : e, h = v.call(e, "namespace") ? e.namespace.split(".") : [], o = f = a = n = n || E;
            if (3 !== n.nodeType && 8 !== n.nodeType && !mt.test(d + S.event.triggered) && (-1 < d.indexOf(".") && (d = (h = d.split(".")).shift(), 
            h.sort()), u = d.indexOf(":") < 0 && "on" + d, (e = e[S.expando] ? e : new S.Event(d, "object" == typeof e && e)).isTrigger = r ? 2 : 3, 
            e.namespace = h.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
            e.result = void 0, e.target || (e.target = n), t = null == t ? [ e ] : S.makeArray(t, [ e ]), 
            c = S.event.special[d] || {}, r || !c.trigger || !1 !== c.trigger.apply(n, t))) {
                if (!r && !c.noBubble && !x(n)) {
                    for (s = c.delegateType || d, mt.test(s + d) || (o = o.parentNode); o; o = o.parentNode) p.push(o), 
                    a = o;
                    a === (n.ownerDocument || E) && p.push(a.defaultView || a.parentWindow || C);
                }
                for (i = 0; (o = p[i++]) && !e.isPropagationStopped(); ) f = o, 
                e.type = 1 < i ? s : c.bindType || d, (l = (Y.get(o, "events") || Object.create(null))[e.type] && Y.get(o, "handle")) && l.apply(o, t), 
                (l = u && o[u]) && l.apply && V(o) && (e.result = l.apply(o, t), 
                !1 === e.result && e.preventDefault());
                return e.type = d, r || e.isDefaultPrevented() || c._default && !1 !== c._default.apply(p.pop(), t) || !V(n) || u && m(n[d]) && !x(n) && ((a = n[u]) && (n[u] = null), 
                S.event.triggered = d, e.isPropagationStopped() && f.addEventListener(d, xt), 
                n[d](), e.isPropagationStopped() && f.removeEventListener(d, xt), 
                S.event.triggered = void 0, a && (n[u] = a)), e.result;
            }
        },
        simulate: function(e, t, n) {
            n = S.extend(new S.Event(), n, {
                type: e,
                isSimulated: !0
            });
            S.event.trigger(n, null, t);
        }
    }), S.fn.extend({
        trigger: function(e, t) {
            return this.each(function() {
                S.event.trigger(e, t, this);
            });
        },
        triggerHandler: function(e, t) {
            var n = this[0];
            if (n) return S.event.trigger(e, t, n, !0);
        }
    }), y.focusin || S.each({
        focus: "focusin",
        blur: "focusout"
    }, function(n, r) {
        function i(e) {
            S.event.simulate(r, e.target, S.event.fix(e));
        }
        S.event.special[r] = {
            setup: function() {
                var e = this.ownerDocument || this.document || this, t = Y.access(e, r);
                t || e.addEventListener(n, i, !0), Y.access(e, r, (t || 0) + 1);
            },
            teardown: function() {
                var e = this.ownerDocument || this.document || this, t = Y.access(e, r) - 1;
                t ? Y.access(e, r, t) : (e.removeEventListener(n, i, !0), Y.remove(e, r));
            }
        };
    }), C.location), wt = {
        guid: Date.now()
    }, Tt = /\?/, Ct = (S.parseXML = function(e) {
        var t, n;
        if (!e || "string" != typeof e) return null;
        try {
            t = new C.DOMParser().parseFromString(e, "text/xml");
        } catch (e) {}
        return n = t && t.getElementsByTagName("parsererror")[0], t && !n || S.error("Invalid XML: " + (n ? S.map(n.childNodes, function(e) {
            return e.textContent;
        }).join("\n") : e)), t;
    }, /\[\]$/), Et = /\r?\n/g, St = /^(?:submit|button|image|reset|file)$/i, kt = /^(?:input|select|textarea|keygen)/i;
    S.param = function(e, t) {
        function i(e, t) {
            t = m(t) ? t() : t, r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == t ? "" : t);
        }
        var n, r = [];
        if (null == e) return "";
        if (Array.isArray(e) || e.jquery && !S.isPlainObject(e)) S.each(e, function() {
            i(this.name, this.value);
        }); else for (n in e) !function At(n, e, r, i) {
            if (Array.isArray(e)) S.each(e, function(e, t) {
                r || Ct.test(n) ? i(n, t) : At(n + "[" + ("object" == typeof t && null != t ? e : "") + "]", t, r, i);
            }); else if (r || "object" !== w(e)) i(n, e); else for (var t in e) At(n + "[" + t + "]", e[t], r, i);
        }(n, e[n], t, i);
        return r.join("&");
    }, S.fn.extend({
        serialize: function() {
            return S.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var e = S.prop(this, "elements");
                return e ? S.makeArray(e) : this;
            }).filter(function() {
                var e = this.type;
                return this.name && !S(this).is(":disabled") && kt.test(this.nodeName) && !St.test(e) && (this.checked || !pe.test(e));
            }).map(function(e, t) {
                var n = S(this).val();
                return null == n ? null : Array.isArray(n) ? S.map(n, function(e) {
                    return {
                        name: t.name,
                        value: e.replace(Et, "\r\n")
                    };
                }) : {
                    name: t.name,
                    value: n.replace(Et, "\r\n")
                };
            }).get();
        }
    });
    var Nt = /%20/g, jt = /#.*$/, Dt = /([?&])_=[^&]*/, qt = /^(.*?):[ \t]*([^\r\n]*)$/gm, Lt = /^(?:GET|HEAD)$/, Ht = /^\/\//, Ot = {}, Pt = {}, Rt = "*/".concat("*"), Mt = E.createElement("a");
    function It(o) {
        return function(e, t) {
            "string" != typeof e && (t = e, e = "*");
            var n, r = 0, i = e.toLowerCase().match(P) || [];
            if (m(t)) for (;n = i[r++]; ) "+" === n[0] ? (n = n.slice(1) || "*", 
            (o[n] = o[n] || []).unshift(t)) : (o[n] = o[n] || []).push(t);
        };
    }
    function Wt(t, i, o, a) {
        var s = {}, u = t === Pt;
        function l(e) {
            var r;
            return s[e] = !0, S.each(t[e] || [], function(e, t) {
                t = t(i, o, a);
                return "string" != typeof t || u || s[t] ? u ? !(r = t) : void 0 : (i.dataTypes.unshift(t), 
                l(t), !1);
            }), r;
        }
        return l(i.dataTypes[0]) || !s["*"] && l("*");
    }
    function Ft(e, t) {
        var n, r, i = S.ajaxSettings.flatOptions || {};
        for (n in t) void 0 !== t[n] && ((i[n] ? e : r = r || {})[n] = t[n]);
        return r && S.extend(!0, e, r), e;
    }
    Mt.href = bt.href, S.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: bt.href,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(bt.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Rt,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": JSON.parse,
                "text xml": S.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(e, t) {
            return t ? Ft(Ft(e, S.ajaxSettings), t) : Ft(S.ajaxSettings, e);
        },
        ajaxPrefilter: It(Ot),
        ajaxTransport: It(Pt),
        ajax: function(e, t) {
            "object" == typeof e && (t = e, e = void 0);
            var c, f, p, n, d, h, g, i, r, v = S.ajaxSetup({}, t = t || {}), y = v.context || v, m = v.context && (y.nodeType || y.jquery) ? S(y) : S.event, x = S.Deferred(), b = S.Callbacks("once memory"), w = v.statusCode || {}, a = {}, s = {}, u = "canceled", T = {
                readyState: 0,
                getResponseHeader: function(e) {
                    var t;
                    if (h) {
                        if (!n) for (n = {}; t = qt.exec(p); ) n[t[1].toLowerCase() + " "] = (n[t[1].toLowerCase() + " "] || []).concat(t[2]);
                        t = n[e.toLowerCase() + " "];
                    }
                    return null == t ? null : t.join(", ");
                },
                getAllResponseHeaders: function() {
                    return h ? p : null;
                },
                setRequestHeader: function(e, t) {
                    return null == h && (e = s[e.toLowerCase()] = s[e.toLowerCase()] || e, 
                    a[e] = t), this;
                },
                overrideMimeType: function(e) {
                    return null == h && (v.mimeType = e), this;
                },
                statusCode: function(e) {
                    if (e) if (h) T.always(e[T.status]); else for (var t in e) w[t] = [ w[t], e[t] ];
                    return this;
                },
                abort: function(e) {
                    e = e || u;
                    return c && c.abort(e), l(0, e), this;
                }
            };
            if (x.promise(T), v.url = ((e || v.url || bt.href) + "").replace(Ht, bt.protocol + "//"), 
            v.type = t.method || t.type || v.method || v.type, v.dataTypes = (v.dataType || "*").toLowerCase().match(P) || [ "" ], 
            null == v.crossDomain) {
                r = E.createElement("a");
                try {
                    r.href = v.url, r.href = r.href, v.crossDomain = Mt.protocol + "//" + Mt.host != r.protocol + "//" + r.host;
                } catch (e) {
                    v.crossDomain = !0;
                }
            }
            if (v.data && v.processData && "string" != typeof v.data && (v.data = S.param(v.data, v.traditional)), 
            Wt(Ot, v, t, T), h) return T;
            for (i in (g = S.event && v.global) && 0 == S.active++ && S.event.trigger("ajaxStart"), 
            v.type = v.type.toUpperCase(), v.hasContent = !Lt.test(v.type), f = v.url.replace(jt, ""), 
            v.hasContent ? v.data && v.processData && 0 === (v.contentType || "").indexOf("application/x-www-form-urlencoded") && (v.data = v.data.replace(Nt, "+")) : (r = v.url.slice(f.length), 
            v.data && (v.processData || "string" == typeof v.data) && (f += (Tt.test(f) ? "&" : "?") + v.data, 
            delete v.data), !1 === v.cache && (f = f.replace(Dt, "$1"), r = (Tt.test(f) ? "&" : "?") + "_=" + wt.guid++ + r), 
            v.url = f + r), v.ifModified && (S.lastModified[f] && T.setRequestHeader("If-Modified-Since", S.lastModified[f]), 
            S.etag[f] && T.setRequestHeader("If-None-Match", S.etag[f])), (v.data && v.hasContent && !1 !== v.contentType || t.contentType) && T.setRequestHeader("Content-Type", v.contentType), 
            T.setRequestHeader("Accept", v.dataTypes[0] && v.accepts[v.dataTypes[0]] ? v.accepts[v.dataTypes[0]] + ("*" !== v.dataTypes[0] ? ", " + Rt + "; q=0.01" : "") : v.accepts["*"]), 
            v.headers) T.setRequestHeader(i, v.headers[i]);
            if (v.beforeSend && (!1 === v.beforeSend.call(y, T, v) || h)) return T.abort();
            if (u = "abort", b.add(v.complete), T.done(v.success), T.fail(v.error), 
            c = Wt(Pt, v, t, T)) {
                if (T.readyState = 1, g && m.trigger("ajaxSend", [ T, v ]), h) return T;
                v.async && 0 < v.timeout && (d = C.setTimeout(function() {
                    T.abort("timeout");
                }, v.timeout));
                try {
                    h = !1, c.send(a, l);
                } catch (e) {
                    if (h) throw e;
                    l(-1, e);
                }
            } else l(-1, "No Transport");
            function l(e, t, n, r) {
                var o, a, s, l = t;
                h || (h = !0, d && C.clearTimeout(d), c = void 0, p = r || "", T.readyState = 0 < e ? 4 : 0, 
                r = 200 <= e && e < 300 || 304 === e, n && (s = function(e, t, n) {
                    for (var r, i, o, a, s = e.contents, u = e.dataTypes; "*" === u[0]; ) u.shift(), 
                    void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
                    if (r) for (i in s) if (s[i] && s[i].test(r)) {
                        u.unshift(i);
                        break;
                    }
                    if (u[0] in n) o = u[0]; else {
                        for (i in n) {
                            if (!u[0] || e.converters[i + " " + u[0]]) {
                                o = i;
                                break;
                            }
                            a = a || i;
                        }
                        o = o || a;
                    }
                    if (o) return o !== u[0] && u.unshift(o), n[o];
                }(v, T, n)), !r && -1 < S.inArray("script", v.dataTypes) && S.inArray("json", v.dataTypes) < 0 && (v.converters["text script"] = function() {}), 
                s = function(e, t, n, r) {
                    var i, o, a, s, u, l = {}, c = e.dataTypes.slice();
                    if (c[1]) for (a in e.converters) l[a.toLowerCase()] = e.converters[a];
                    for (o = c.shift(); o; ) if (e.responseFields[o] && (n[e.responseFields[o]] = t), 
                    !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), 
                    u = o, o = c.shift()) if ("*" === o) o = u; else if ("*" !== u && u !== o) {
                        if (!(a = l[u + " " + o] || l["* " + o])) for (i in l) if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
                            !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));
                            break;
                        }
                        if (!0 !== a) if (a && e.throws) t = a(t); else try {
                            t = a(t);
                        } catch (e) {
                            return {
                                state: "parsererror",
                                error: a ? e : "No conversion from " + u + " to " + o
                            };
                        }
                    }
                    return {
                        state: "success",
                        data: t
                    };
                }(v, s, T, r), r ? (v.ifModified && ((n = T.getResponseHeader("Last-Modified")) && (S.lastModified[f] = n), 
                (n = T.getResponseHeader("etag")) && (S.etag[f] = n)), 204 === e || "HEAD" === v.type ? l = "nocontent" : 304 === e ? l = "notmodified" : (l = s.state, 
                o = s.data, r = !(a = s.error))) : (a = l, !e && l || (l = "error", 
                e < 0 && (e = 0))), T.status = e, T.statusText = (t || l) + "", 
                r ? x.resolveWith(y, [ o, l, T ]) : x.rejectWith(y, [ T, l, a ]), 
                T.statusCode(w), w = void 0, g && m.trigger(r ? "ajaxSuccess" : "ajaxError", [ T, v, r ? o : a ]), 
                b.fireWith(y, [ T, l ]), g && (m.trigger("ajaxComplete", [ T, v ]), 
                --S.active || S.event.trigger("ajaxStop")));
            }
            return T;
        },
        getJSON: function(e, t, n) {
            return S.get(e, t, n, "json");
        },
        getScript: function(e, t) {
            return S.get(e, void 0, t, "script");
        }
    }), S.each([ "get", "post" ], function(e, i) {
        S[i] = function(e, t, n, r) {
            return m(t) && (r = r || n, n = t, t = void 0), S.ajax(S.extend({
                url: e,
                type: i,
                dataType: r,
                data: t,
                success: n
            }, S.isPlainObject(e) && e));
        };
    }), S.ajaxPrefilter(function(e) {
        for (var t in e.headers) "content-type" === t.toLowerCase() && (e.contentType = e.headers[t] || "");
    }), S._evalUrl = function(e, t, n) {
        return S.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            converters: {
                "text script": function() {}
            },
            dataFilter: function(e) {
                S.globalEval(e, t, n);
            }
        });
    }, S.fn.extend({
        wrapAll: function(e) {
            return this[0] && (m(e) && (e = e.call(this[0])), e = S(e, this[0].ownerDocument).eq(0).clone(!0), 
            this[0].parentNode && e.insertBefore(this[0]), e.map(function() {
                for (var e = this; e.firstElementChild; ) e = e.firstElementChild;
                return e;
            }).append(this)), this;
        },
        wrapInner: function(n) {
            return m(n) ? this.each(function(e) {
                S(this).wrapInner(n.call(this, e));
            }) : this.each(function() {
                var e = S(this), t = e.contents();
                t.length ? t.wrapAll(n) : e.append(n);
            });
        },
        wrap: function(t) {
            var n = m(t);
            return this.each(function(e) {
                S(this).wrapAll(n ? t.call(this, e) : t);
            });
        },
        unwrap: function(e) {
            return this.parent(e).not("body").each(function() {
                S(this).replaceWith(this.childNodes);
            }), this;
        }
    }), S.expr.pseudos.hidden = function(e) {
        return !S.expr.pseudos.visible(e);
    }, S.expr.pseudos.visible = function(e) {
        return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
    }, S.ajaxSettings.xhr = function() {
        try {
            return new C.XMLHttpRequest();
        } catch (e) {}
    };
    var Bt = {
        0: 200,
        1223: 204
    }, $t = S.ajaxSettings.xhr();
    y.cors = !!$t && "withCredentials" in $t, y.ajax = $t = !!$t, S.ajaxTransport(function(i) {
        var o, a;
        if (y.cors || $t && !i.crossDomain) return {
            send: function(e, t) {
                var n, r = i.xhr();
                if (r.open(i.type, i.url, i.async, i.username, i.password), i.xhrFields) for (n in i.xhrFields) r[n] = i.xhrFields[n];
                for (n in i.mimeType && r.overrideMimeType && r.overrideMimeType(i.mimeType), 
                i.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest"), 
                e) r.setRequestHeader(n, e[n]);
                o = function(e) {
                    return function() {
                        o && (o = a = r.onload = r.onerror = r.onabort = r.ontimeout = r.onreadystatechange = null, 
                        "abort" === e ? r.abort() : "error" === e ? "number" != typeof r.status ? t(0, "error") : t(r.status, r.statusText) : t(Bt[r.status] || r.status, r.statusText, "text" !== (r.responseType || "text") || "string" != typeof r.responseText ? {
                            binary: r.response
                        } : {
                            text: r.responseText
                        }, r.getAllResponseHeaders()));
                    };
                }, r.onload = o(), a = r.onerror = r.ontimeout = o("error"), void 0 !== r.onabort ? r.onabort = a : r.onreadystatechange = function() {
                    4 === r.readyState && C.setTimeout(function() {
                        o && a();
                    });
                }, o = o("abort");
                try {
                    r.send(i.hasContent && i.data || null);
                } catch (e) {
                    if (o) throw e;
                }
            },
            abort: function() {
                o && o();
            }
        };
    }), S.ajaxPrefilter(function(e) {
        e.crossDomain && (e.contents.script = !1);
    }), S.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(e) {
                return S.globalEval(e), e;
            }
        }
    }), S.ajaxPrefilter("script", function(e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
    }), S.ajaxTransport("script", function(n) {
        var r, i;
        if (n.crossDomain || n.scriptAttrs) return {
            send: function(e, t) {
                r = S("<script>").attr(n.scriptAttrs || {}).prop({
                    charset: n.scriptCharset,
                    src: n.url
                }).on("load error", i = function(e) {
                    r.remove(), i = null, e && t("error" === e.type ? 404 : 200, e.type);
                }), E.head.appendChild(r[0]);
            },
            abort: function() {
                i && i();
            }
        };
    });
    var zt = [], Ut = /(=)\?(?=&|$)|\?\?/, Xt = (S.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var e = zt.pop() || S.expando + "_" + wt.guid++;
            return this[e] = !0, e;
        }
    }), S.ajaxPrefilter("json jsonp", function(e, t, n) {
        var r, i, o, a = !1 !== e.jsonp && (Ut.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && Ut.test(e.data) && "data");
        if (a || "jsonp" === e.dataTypes[0]) return r = e.jsonpCallback = m(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, 
        a ? e[a] = e[a].replace(Ut, "$1" + r) : !1 !== e.jsonp && (e.url += (Tt.test(e.url) ? "&" : "?") + e.jsonp + "=" + r), 
        e.converters["script json"] = function() {
            return o || S.error(r + " was not called"), o[0];
        }, e.dataTypes[0] = "json", i = C[r], C[r] = function() {
            o = arguments;
        }, n.always(function() {
            void 0 === i ? S(C).removeProp(r) : C[r] = i, e[r] && (e.jsonpCallback = t.jsonpCallback, 
            zt.push(r)), o && m(i) && i(o[0]), o = i = void 0;
        }), "script";
    }), y.createHTMLDocument = ((f = E.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", 
    2 === f.childNodes.length), S.parseHTML = function(e, t, n) {
        return "string" != typeof e ? [] : ("boolean" == typeof t && (n = t, t = !1), 
        t || (y.createHTMLDocument ? ((r = (t = E.implementation.createHTMLDocument("")).createElement("base")).href = E.location.href, 
        t.head.appendChild(r)) : t = E), r = !n && [], (n = N.exec(e)) ? [ t.createElement(n[1]) ] : (n = xe([ e ], t, r), 
        r && r.length && S(r).remove(), S.merge([], n.childNodes)));
        var r;
    }, S.fn.load = function(e, t, n) {
        var r, i, o, a = this, s = e.indexOf(" ");
        return -1 < s && (r = ht(e.slice(s)), e = e.slice(0, s)), m(t) ? (n = t, 
        t = void 0) : t && "object" == typeof t && (i = "POST"), 0 < a.length && S.ajax({
            url: e,
            type: i || "GET",
            dataType: "html",
            data: t
        }).done(function(e) {
            o = arguments, a.html(r ? S("<div>").append(S.parseHTML(e)).find(r) : e);
        }).always(n && function(e, t) {
            a.each(function() {
                n.apply(this, o || [ e.responseText, t, e ]);
            });
        }), this;
    }, S.expr.pseudos.animated = function(t) {
        return S.grep(S.timers, function(e) {
            return t === e.elem;
        }).length;
    }, S.offset = {
        setOffset: function(e, t, n) {
            var o, a, s, u, l = S.css(e, "position"), c = S(e), f = {};
            "static" === l && (e.style.position = "relative"), s = c.offset(), o = S.css(e, "top"), 
            u = S.css(e, "left"), l = ("absolute" === l || "fixed" === l) && -1 < (o + u).indexOf("auto") ? (a = (l = c.position()).top, 
            l.left) : (a = parseFloat(o) || 0, parseFloat(u) || 0), null != (t = m(t) ? t.call(e, n, S.extend({}, s)) : t).top && (f.top = t.top - s.top + a), 
            null != t.left && (f.left = t.left - s.left + l), "using" in t ? t.using.call(e, f) : c.css(f);
        }
    }, S.fn.extend({
        offset: function(t) {
            if (arguments.length) return void 0 === t ? this : this.each(function(e) {
                S.offset.setOffset(this, t, e);
            });
            var e, r = this[0];
            return r ? r.getClientRects().length ? (e = r.getBoundingClientRect(), 
            r = r.ownerDocument.defaultView, {
                top: e.top + r.pageYOffset,
                left: e.left + r.pageXOffset
            }) : {
                top: 0,
                left: 0
            } : void 0;
        },
        position: function() {
            if (this[0]) {
                var e, t, n, r = this[0], i = {
                    top: 0,
                    left: 0
                };
                if ("fixed" === S.css(r, "position")) t = r.getBoundingClientRect(); else {
                    for (t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement; e && (e === n.body || e === n.documentElement) && "static" === S.css(e, "position"); ) e = e.parentNode;
                    e && e !== r && 1 === e.nodeType && ((i = S(e).offset()).top += S.css(e, "borderTopWidth", !0), 
                    i.left += S.css(e, "borderLeftWidth", !0));
                }
                return {
                    top: t.top - i.top - S.css(r, "marginTop", !0),
                    left: t.left - i.left - S.css(r, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var e = this.offsetParent; e && "static" === S.css(e, "position"); ) e = e.offsetParent;
                return e || re;
            });
        }
    }), S.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(t, i) {
        var o = "pageYOffset" === i;
        S.fn[t] = function(e) {
            return $(this, function(e, t, n) {
                var r;
                if (x(e) ? r = e : 9 === e.nodeType && (r = e.defaultView), void 0 === n) return r ? r[i] : e[t];
                r ? r.scrollTo(o ? r.pageXOffset : n, o ? n : r.pageYOffset) : e[t] = n;
            }, t, e, arguments.length);
        };
    }), S.each([ "top", "left" ], function(e, n) {
        S.cssHooks[n] = Fe(y.pixelPosition, function(e, t) {
            if (t) return t = We(e, n), Pe.test(t) ? S(e).position()[n] + "px" : t;
        });
    }), S.each({
        Height: "height",
        Width: "width"
    }, function(a, s) {
        S.each({
            padding: "inner" + a,
            content: s,
            "": "outer" + a
        }, function(r, o) {
            S.fn[o] = function(e, t) {
                var n = arguments.length && (r || "boolean" != typeof e), i = r || (!0 === e || !0 === t ? "margin" : "border");
                return $(this, function(e, t, n) {
                    var r;
                    return x(e) ? 0 === o.indexOf("outer") ? e["inner" + a] : e.document.documentElement["client" + a] : 9 === e.nodeType ? (r = e.documentElement, 
                    Math.max(e.body["scroll" + a], r["scroll" + a], e.body["offset" + a], r["offset" + a], r["client" + a])) : void 0 === n ? S.css(e, t, i) : S.style(e, t, n, i);
                }, s, n ? e : void 0, n);
            };
        });
    }), S.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(e, t) {
        S.fn[t] = function(e) {
            return this.on(t, e);
        };
    }), S.fn.extend({
        bind: function(e, t, n) {
            return this.on(e, null, t, n);
        },
        unbind: function(e, t) {
            return this.off(e, null, t);
        },
        delegate: function(e, t, n, r) {
            return this.on(t, e, n, r);
        },
        undelegate: function(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
        },
        hover: function(e, t) {
            return this.mouseenter(e).mouseleave(t || e);
        }
    }), S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(e, n) {
        S.fn[n] = function(e, t) {
            return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n);
        };
    }), /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g), Vt = (S.proxy = function(e, t) {
        var r, n;
        if ("string" == typeof t && (n = e[t], t = e, e = n), m(e)) return r = s.call(arguments, 2), 
        (n = function() {
            return e.apply(t || this, r.concat(s.call(arguments)));
        }).guid = e.guid = e.guid || S.guid++, n;
    }, S.holdReady = function(e) {
        e ? S.readyWait++ : S.ready(!0);
    }, S.isArray = Array.isArray, S.parseJSON = JSON.parse, S.nodeName = A, S.isFunction = m, 
    S.isWindow = x, S.camelCase = X, S.type = w, S.now = Date.now, S.isNumeric = function(e) {
        var t = S.type(e);
        return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
    }, S.trim = function(e) {
        return null == e ? "" : (e + "").replace(Xt, "");
    }, "function" == typeof define && define.amd && define("jquery", [], function() {
        return S;
    }), C.jQuery), Gt = C.$;
    return S.noConflict = function(e) {
        return C.$ === S && (C.$ = Gt), e && C.jQuery === S && (C.jQuery = Vt), 
        S;
    }, void 0 === e && (C.jQuery = C.$ = S), S;
}), $.extend({
    isEmpty: function(data) {
        if ("number" == typeof data || "boolean" == typeof data) return !1;
        if (null == data) return !0;
        if (void 0 !== data.length) return 0 === data.length;
        var i, count = 0;
        for (i in data) data.hasOwnProperty(i) && count++;
        return 0 === count;
    },
    uniqueid: function() {
        function s4() {
            return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
        }
        return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
    }
}), $.event.special.destroyed = {
    remove: function(o) {
        o.handler && o.handler();
    }
}, function() {
    function noop() {}
    for (var method, methods = [ "assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn" ], length = methods.length, console = window.console = window.console || {}; length--; ) console[method = methods[length]] || (console[method] = noop);
}(), function(pL) {
    function getEl(e) {
        return document.getElementById ? document.getElementById(e) : document.all ? document.all[e] : null;
    }
    function createEl(t) {
        var o = document.createElement(t);
        return 1 === arguments.length || (arguments[1] && setAttr(o, arguments[1]), 
        arguments[2] && css(o, arguments[2]), arguments[3] && addClass(o, arguments[3]), 
        arguments[4] && o.appendChild(arguments[4])), o;
    }
    function getAttr(e, n) {
        return e ? !(a = !(a = e.getAttribute ? e.getAttribute(n) : a) && e.getAttributeNode ? e.getAttributeNode(n) : a) && e[n] ? e[n] : a : null;
        var a;
    }
    function remAttr(e, n) {
        if (!e) return !1;
        for (var a = isArray(n) ? n : [ n ], i = 0; i < a.length; i++) e.removeAttribute && e.removeAttribute(a[i]);
        return e;
    }
    function getText(n) {
        return n && (n.innerText || n.textContent || pL.find.getText([ n ])) || "";
    }
    function setAttr(obj, name, value) {
        if (!obj) return null;
        if ("string" == typeof name) obj.setAttribute(name, value); else if ("object" == typeof name) for (n in name) obj.setAttribute(n, name[n]);
        return obj;
    }
    function inArray(search, stack) {
        if (stack.indexOf) return stack.indexOf(search);
        for (var i = 0; i < stack.length; i++) if (stack[i] === search) return i;
        return -1;
    }
    function addClass(obj, cn) {
        return obj ? (pL(obj).addClass(cn), obj) : null;
    }
    function firstChild(e, t) {
        for (e = e ? e.firstChild : null; e && (1 !== e.nodeType || t && t.toLowerCase() !== e.nodeName.toLowerCase()); ) e = e.nextSibling;
        return e;
    }
    function lastChild(e, t) {
        for (e = e ? e.lastChild : null; e && (1 !== e.nodeType || t && t.toLowerCase() !== e.nodeName.toLowerCase()); ) e = e.previousSibling;
        return e;
    }
    function insertBefore(f, s) {
        f && f.parentNode.insertBefore(s, f);
    }
    function now(v) {
        return new Date().getTime() + nowI++;
    }
    function sraCSSClear(o) {
        return css(o, {
            position: "",
            clip: "auto",
            clipPath: "none",
            padding: "",
            height: "",
            width: "",
            overflow: "",
            whiteSpace: "normal"
        }), o;
    }
    function transition(ele, targ, config) {
        var uTotalTime, iTargetY, iTargetX, startY, startX, dispX, dispY, freq, startTime, tmr;
        ele && (uTotalTime = config.duration, iTargetY = targ.top, iTargetX = targ.left, 
        startY = xTop(ele), startX = xLeft(ele), dispX = iTargetX - startX, dispY = iTargetY - startY, 
        freq = Math.PI / (2 * uTotalTime), startTime = new Date().getTime(), tmr = setInterval(function() {
            var elapsedTime = new Date().getTime() - startTime;
            elapsedTime < uTotalTime ? (elapsedTime = Math.abs(Math.sin(elapsedTime * freq)), 
            xTop(ele, Math.round(elapsedTime * dispY + startY)), xLeft(ele, Math.round(elapsedTime * dispX + startX)), 
            config.step.apply(ele)) : (clearInterval(tmr), xLeft(ele, iTargetX), 
            xTop(ele, iTargetY), config.complete.apply(ele));
        }, 10));
    }
    function getAbsolutePos(obj) {
        for (var curleft = curtop = 0; curleft += obj.offsetLeft, curtop += obj.offsetTop, 
        obj = obj.offsetParent; );
        return {
            left: curleft,
            top: curtop
        };
    }
    function xTop(e, iY) {
        if (!e) return 0;
        var css = xDef(e.style);
        return css && xStr(e.style.top) ? xNum(iY) ? e.style.top = iY + "px" : (iY = parseInt(e.style.top), 
        isNaN(iY) && (iY = xGetComputedStyle(e, "top", 1)), isNaN(iY) && (iY = 0)) : css && xDef(e.style.pixelTop) && (xNum(iY) ? e.style.pixelTop = iY : iY = e.style.pixelTop), 
        iY;
    }
    function xLeft(e, iX) {
        if (!e) return 0;
        var css = xDef(e.style);
        return css && xStr(e.style.left) ? xNum(iX) ? e.style.left = iX + "px" : (iX = parseInt(e.style.left), 
        isNaN(iX) && (iX = xGetComputedStyle(e, "left", 1)), isNaN(iX) && (iX = 0)) : css && xDef(e.style.pixelLeft) && (xNum(iX) ? e.style.pixelLeft = iX : iX = e.style.pixelLeft), 
        iX;
    }
    function $ACC(dc, dcA, dcI, onReady, disableAsync) {
        function fn() {
            disableAsync && pL.ajaxSetup({
                async: !1
            }), pL.accDC(dcA, dcI, dc), disableAsync && pL.ajaxSetup({
                async: !0
            });
        }
        "object" == typeof dc && !isArray(dc) && "id" in dc || (disableAsync = onReady, 
        onReady = dcI, dcI = dcA, dcA = dc, dc = null), onReady ? pL(fn) : fn();
    }
    function calcPosition(dc, objArg, posVal) {
        var pos, aPos_height, aPos_width, oPos;
        (objArg = (objArg = objArg || dc.posAnchor) && "string" == typeof objArg ? pL(objArg).get(0) : objArg || dc.triggerObj) && (posVal = posVal || dc.autoPosition, 
        pos = {}, aPos_height = xHeight(dc.accDCObj), aPos_width = xWidth(dc.accDCObj), 
        oPos = xOffset(objArg), "absolute" == css(dc.accDCObj, "position") && "fixed" != css(objArg, "position") && (oPos = xOffset(objArg, !0)), 
        1 == posVal ? (pos.left = oPos.left, pos.top = oPos.top - aPos_height) : 2 == posVal ? (pos.left = oPos.right, 
        pos.top = oPos.top - aPos_height) : 3 == posVal ? (pos.left = oPos.right, 
        pos.top = oPos.top) : 4 == posVal ? (pos.left = oPos.right, pos.top = oPos.bottom) : 5 == posVal ? (pos.left = oPos.left, 
        pos.top = oPos.bottom) : 6 == posVal ? (pos.left = oPos.left - aPos_width, 
        pos.top = oPos.bottom) : 7 == posVal ? (pos.left = oPos.left - aPos_width, 
        pos.top = oPos.top) : 8 == posVal ? (pos.left = oPos.left - aPos_width, 
        pos.top = oPos.top - aPos_height) : 9 == posVal ? (pos.left = oPos.left, 
        pos.top = oPos.top) : 10 == posVal ? (pos.left = oPos.right - aPos_width, 
        pos.top = oPos.top - aPos_height) : 11 == posVal ? (pos.left = oPos.right - aPos_width, 
        pos.top = oPos.top) : 12 == posVal && (pos.left = oPos.right - aPos_width, 
        pos.top = oPos.bottom), pos.left = Math.max(pos.left, 0), pos.top = Math.max(pos.top, 0), 
        "number" == typeof dc.offsetTop && (dc.offsetTop < 0 || 0 < dc.offsetTop) && (pos.top += dc.offsetTop), 
        "number" == typeof dc.offsetLeft && (dc.offsetLeft < 0 || 0 < dc.offsetLeft) && (pos.left += dc.offsetLeft), 
        css(dc.accDCObj, pos));
    }
    var css = function(obj, p, v) {
        if (!obj) return null;
        if (obj.nodeName && "string" == typeof p && !v) return obj.style && obj.style[p] ? obj.style[p] : xGetComputedStyle(obj, p);
        for (var o = isArray(obj) ? obj : [ obj ], check = "top left bottom right width height", i = 0; i < o.length; i++) if ("string" == typeof p) try {
            o[i].style[xCamelize(p)] = -1 !== check.indexOf(p) && "number" == typeof v ? v + "px" : v;
        } catch (ex) {} else if ("object" == typeof p) for (var a = 1; a < arguments.length; a++) for (var n in arguments[a]) try {
            o[i].style[xCamelize(n)] = -1 !== check.indexOf(n) && "number" == typeof arguments[a][n] ? arguments[a][n] + "px" : arguments[a][n];
        } catch (ex) {}
        return obj;
    }, isArray = function(v) {
        return v && "object" == typeof v && "number" == typeof v.length && "function" == typeof v.splice && !v.propertyIsEnumerable("length");
    }, nowI = 0, sraCSS = {
        position: "absolute",
        clip: "rect(1px, 1px, 1px, 1px)",
        clipPath: "inset(50%)",
        padding: 0,
        border: 0,
        height: "1px",
        width: "1px",
        overflow: "hidden",
        whiteSpace: "nowrap"
    }, xOffset = function(c, forceAbsolute, forceRelative, returnTopLeftOnly) {
        var r, position;
        return c && 1 === c.nodeType ? (r = {}, position = css(c, "position"), forceAbsolute || "absolute" == position ? r = getAbsolutePos(c) : forceRelative || "relative" == position ? (r.top = c.offsetTop, 
        r.left = c.offsetLeft) : r = c.getBoundingClientRect(), returnTopLeftOnly ? r.height = r.width = r.right = r.bottom = "" : (r.height = xHeight(c), 
        r.width = xWidth(c), r.right = r.left + r.width, r.bottom = r.top + r.height), 
        r) : null;
    }, xCamelize = function(cssPropStr) {
        for (var c, a = cssPropStr.split("-"), s = a[0], i = 1; i < a.length; i++) c = a[i].charAt(0), 
        s += a[i].replace(c, c.toUpperCase());
        return s;
    }, xGetComputedStyle = function(e, p, i) {
        if (!e) return null;
        var v = "undefined", dv = document.defaultView;
        if (dv && dv.getComputedStyle) e == document && (e = document.body), (dv = dv.getComputedStyle(e, "")) && (v = dv.getPropertyValue(p)); else {
            if (!e.currentStyle) return null;
            v = e.currentStyle[xCamelize(p)];
        }
        return i ? parseInt(v) || 0 : v;
    }, xNum = function() {
        for (var i = 0; i < arguments.length; i++) if (isNaN(arguments[i]) || "number" != typeof arguments[i]) return !1;
        return !0;
    }, xDef = function() {
        for (var i = 0; i < arguments.length; i++) if (void 0 === arguments[i]) return !1;
        return !0;
    }, xStr = function() {
        for (var i = 0; i < arguments.length; i++) if ("string" != typeof arguments[i]) return !1;
        return !0;
    }, xHeight = function(e, h) {
        var css, pt = 0, pb = 0, bt = 0, bb = 0;
        if (!e) return 0;
        if (h = xNum(h) ? h < 0 ? 0 : Math.round(h) : -1, (css = xDef(e.style)) && xDef(e.offsetHeight) && xStr(e.style.height)) {
            if (0 <= h) {
                if ("CSS1Compat" == document.compatMode && (null !== (pt = xGetComputedStyle(e, "padding-top", 1)) ? (pb = xGetComputedStyle(e, "padding-bottom", 1), 
                bt = xGetComputedStyle(e, "border-top-width", 1), bb = xGetComputedStyle(e, "border-bottom-width", 1)) : xDef(e.offsetHeight, e.style.height) && (e.style.height = h + "px", 
                pt = e.offsetHeight - h)), h -= pt + pb + bt + bb, isNaN(h) || h < 0) return;
                e.style.height = h + "px";
            }
            h = e.offsetHeight;
        } else css && xDef(e.style.pixelHeight) && (0 <= h && (e.style.pixelHeight = h), 
        h = e.style.pixelHeight);
        return h;
    }, xWidth = function(e, w) {
        var css, pl = 0, pr = 0, bl = 0, br = 0;
        if (!e) return 0;
        if (w = xNum(w) ? w < 0 ? 0 : Math.round(w) : -1, (css = xDef(e.style)) && xDef(e.offsetWidth) && xStr(e.style.width)) {
            if (0 <= w) {
                if ("CSS1Compat" == document.compatMode && (null !== (pl = xGetComputedStyle(e, "padding-left", 1)) ? (pr = xGetComputedStyle(e, "padding-right", 1), 
                bl = xGetComputedStyle(e, "border-left-width", 1), br = xGetComputedStyle(e, "border-right-width", 1)) : xDef(e.offsetWidth, e.style.width) && (e.style.width = w + "px", 
                pl = e.offsetWidth - w)), w -= pl + pr + bl + br, isNaN(w) || w < 0) return;
                e.style.width = w + "px";
            }
            w = e.offsetWidth;
        } else css && xDef(e.style.pixelWidth) && (0 <= w && (e.style.pixelWidth = w), 
        w = e.style.pixelWidth);
        return w;
    };
    $ACC.reg = {}, $ACC.fn = {
        globalDC: {},
        wheel: {},
        debug: !1
    }, pL.extend($ACC, {
        xOffset: xOffset,
        xHeight: xHeight,
        xWidth: xWidth,
        xTop: xTop,
        xLeft: xLeft,
        pointerPos: function(e) {
            var posx = 0, posy = 0;
            return e.pageX || e.pageY ? (posx = e.pageX, posy = e.pageY) : (e.clientX || e.clientY) && (posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft, 
            posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop), 
            {
                x: posx,
                y: posy
            };
        },
        getAbsolutePos: getAbsolutePos,
        xDef: xDef,
        xNum: xNum,
        transition: transition,
        isArray: isArray,
        internal: pL,
        version: "3.4 (12/11/2017)",
        sraCSS: sraCSS,
        sraCSSClear: sraCSSClear,
        getEl: getEl,
        createEl: createEl,
        getAttr: getAttr,
        remAttr: remAttr,
        createText: function(s) {
            return document.createTextNode(s);
        },
        getText: getText,
        css: css,
        setAttr: setAttr,
        inArray: inArray,
        hasClass: function(obj, cn) {
            if (!obj || !obj.className) return !1;
            for (var names = cn.split(" "), i = 0, n = 0; n < names.length; n++) -1 !== obj.className.indexOf(names[n]) && (i += 1);
            return i === names.length;
        },
        addClass: addClass,
        remClass: function(obj, cn) {
            return obj ? (pL(obj).removeClass(cn), obj) : null;
        },
        globalDCMerge: function() {
            $ACC.find("*", function(dc) {
                pL.extend(!0, dc, $ACC.fn.globalDC);
            });
        },
        genId: function(id) {
            return now();
        },
        announce: function(str, noRepeat, aggr) {
            return "string" != typeof str && (str = getText(str)), String.prototype.announce.apply(str, [ str, null, noRepeat, aggr ]);
        },
        query: function(sel, con, call) {
            con && "function" == typeof con && (call = con, con = null);
            var r = [];
            return isArray(sel) ? r = sel : "string" != typeof sel ? r.push(sel) : pL.find(sel, con, r), 
            call && "function" == typeof call && pL.each(r, call), r;
        },
        find: function(ids, fn) {
            var id, ids = ids.split(",");
            for (id in $ACC.reg) "*" !== ids[0] && -1 === inArray(id, ids) || fn.apply($ACC.reg[id], [ $ACC.reg[id] ]);
        },
        destroy: function(id, p) {
            if (!$ACC.reg[id]) return !1;
            var r = $ACC.reg[id], a = r.accDCObj, c = r.containerDiv;
            if (p && r.loaded) for (var lc = lastChild(c); lc; ) pL(a).after(lc), 
            lc = lastChild(c);
            r.loaded && pL(a).remove(), r.accDCObj = r.containerDiv = a = c = null;
            var p = r.indexVal, wh = r.siblings;
            wh.splice(p, 1);
            for (var i = 0; i < wh.length; i++) wh[i].indexVal = i, wh[i].siblings = wh;
            if ($ACC.reg[id].parent && $ACC.reg[id].parent.children && $ACC.reg[id].parent.children.length) {
                for (var pc = -1, cn = $ACC.reg[id].parent.children, i = 0; i < cn.length; i++) cn[i].id == id && (pc = i);
                0 <= pc && $ACC.reg[id].parent.children.splice(pc, 1);
            }
            delete $ACC.reg[id];
        },
        morph: function(dc, obj, dcI) {
            1 === dc.nodeType && dc.nodeName && (dcI = obj, obj = dc, dc = null);
            obj = {
                fn: {
                    morph: !0,
                    morphObj: obj
                },
                autoStart: !0
            };
            pL.extend(obj, dcI), pL.accDC([ obj ], null, dc);
        },
        setFocus: function(o) {
            var oTI = null;
            return getAttr(o, "tabindex") && (oTI = getAttr(o, "tabindex")), setAttr(o, "tabindex", -1), 
            o.focus(), oTI ? setAttr(o, "tabindex", oTI) : remAttr(o, "tabindex"), 
            o;
        }
    }), $ACC.load = function(target, source, hLoadData, callback) {
        return pL(target).load(source, hLoadData, callback);
    }, $ACC.get = function(source, hGetData, callback, hGetType) {
        return pL.get(source, hGetData, callback, hGetType);
    }, $ACC.getJSON = function(source, hJSONData, callback) {
        return pL.getJSON(source, hJSONData, callback);
    }, $ACC.getScript = function(source, callback, disableAsync) {
        "boolean" == typeof callback && (disableAsync = callback, callback = null), 
        disableAsync && pL.ajaxSetup({
            async: !1
        }), pL.getScript(source, callback), disableAsync && pL.ajaxSetup({
            async: !0
        });
    }, $ACC.post = function(source, hPostData, callback, hPostType) {
        return pL.post(source, hPostData, callback, hPostType);
    }, $ACC.ajax = function(ajaxOptions) {
        return pL.ajax(ajaxOptions);
    }, $ACC.bind = function(ta, e, fn) {
        return "load" != e || "body" != ta && ta != window && ta != document && ta != document.body ? pL(ta).on(e, fn) : pL(function(ev) {
            fn(ev);
        }), ta;
    }, $ACC.unbind = function(ta, e) {
        return pL(ta).off(e), ta;
    }, $ACC.trigger = function(ta, e) {
        return pL(ta).trigger(e), ta;
    }, window[window.AccDCNamespace || "$ACC"] = $ACC;
    if (String.prototype.announce = function(strm, loop, noRep, aggr) {
        String.announce.loaded && (String.announce.liveRendered || aggr || !String.announce.placeHolder || (String.announce.liveRendered = !0, 
        document.body.appendChild(String.announce.placeHolder)), !String.announce.alertRendered && aggr && String.announce.placeHolder2 && (String.announce.alertRendered = !0, 
        document.body.appendChild(String.announce.placeHolder2)));
        var obj = (strm = strm && strm.nodeName && 1 === strm.nodeType ? getText(strm) : strm) || this, strm = strm || this.toString();
        return "string" != typeof strm || (loop || -1 !== inArray(strm, String.announce.alertMsgs) || String.announce.alertMsgs.push(strm), 
        1 != String.announce.alertMsgs.length && !loop || (strm = String.announce.baseDelay + String.announce.iterate(String.announce.alertMsgs[0], /\s|\,|\.|\:|\;|\!|\(|\)|\/|\?|\@|\#|\$|\%|\^|\&|\*|\\|\-|\_|\+|\=/g) * String.announce.charMultiplier, 
        noRep && String.announce.lastMsg == String.announce.alertMsgs[0] || (String.announce.lastMsg = String.announce.alertMsgs[0], 
        aggr ? String.announce.placeHolder2.innerHTML = String.announce.alertMsgs[0] : String.announce.placeHolder.innerHTML = String.announce.alertMsgs[0]), 
        String.announce.alertTO = setTimeout(function() {
            String.announce.placeHolder.innerHTML = String.announce.placeHolder2.innerHTML = "", 
            String.announce.alertMsgs.shift(), 1 <= String.announce.alertMsgs.length && String.prototype.announce(String.announce.alertMsgs[0], !0, noRep, aggr);
        }, strm))), obj;
    }, String.announce = {
        alertMsgs: [],
        clear: function() {
            this.alertTO && clearTimeout(this.alertTO), this.alertMsgs = [];
        },
        baseDelay: 1e3,
        charMultiplier: 10,
        lastMsg: "",
        iterate: function(str, regExp) {
            var iCount = 0;
            return str.replace(regExp, function() {
                iCount++;
            }), iCount;
        },
        loaded: !1,
        liveRendered: !1,
        alertRendered: !1
    }, $ACC.bind(window, "load", function() {
        String.announce.placeHolder || (String.announce.placeHolder = createEl("div", {
            "aria-live": "polite"
        }, sraCSS), String.announce.placeHolder2 = createEl("div", {
            role: "alert"
        }, sraCSS)), String.announce.loaded = !0;
    }), pL.accDC = function(accDCObjects, gImport, parentDC) {
        function getScript(dc, u, f) {
            pL.ajax({
                async: !1,
                type: "GET",
                url: u,
                data: null,
                success: function() {
                    if (f) return f.apply(dc, arguments);
                },
                dataType: "script"
            });
        }
        function parseRemaining(dc) {
            if ((dc = wheel[dc.indexVal]).runDuring.apply(dc, [ dc ]), dc.allowCascade && (dc.fn.proto.runDuring && dc.fn.proto.runDuring.apply(dc, [ dc ]), 
            $ACC.fn.globalDC.runDuring && $ACC.fn.globalDC.runDuring.apply(dc, [ dc ])), 
            dc.cancel) return dc.cancel = dc.loading = !1;
            for (var w = 0; w < wheel.length; w++) {
                var wl = wheel[w];
                wl.loaded && !wl.allowMultiple && (wl.fn.bypass = !0, dc.close(wl), 
                wl.fn.bypass = !1);
            }
            css(dc.accDCObj, dc.cssObj), dc.autoFix && setAutoFix(dc), dc.fn.morph && dc.fn.morphObj ? (pL(dc.fn.morphObj).after(dc.accDCObj), 
            pL(dc.containerDiv).append(dc.fn.morphObj), dc.fn.morph = !1) : dc.isStatic ? dc.append ? pL(dc.isStatic).append(dc.accDCObj) : dc.prepend ? firstChild(pL(dc.isStatic).get(0)) ? insertBefore(firstChild(pL(dc.isStatic).get(0)), dc.accDCObj) : pL(dc.isStatic).append(dc.accDCObj) : pL(dc.isStatic).html(dc.accDCObj) : !dc.targetObj || dc.returnFocus && !dc.triggerObj ? dc.triggerObj ? pL(dc.triggerObj).after(dc.accDCObj) : $ACC.fn.debug && alert("Error: The dc.triggerObj property must be programatically set if no trigger or targetObj is specified during setup. View the Traversal and Manipulation section in the WhatSock.com Core API documentation for additional details.") : pL(dc.targetObj).after(dc.accDCObj), 
            dc.importCSS && (dc.fn.cssLink = createEl("link", {
                id: dc.fn.importCSSId,
                rel: "stylesheet",
                type: "text/css",
                href: dc.importCSS
            }), dc.accDCObj.appendChild(dc.fn.cssLink)), dc.isDraggable && dc.drag.persist && dc.drag.x && dc.drag.y ? css(dc.accDCObj, {
                left: dc.drag.x,
                top: dc.drag.y
            }) : 0 < dc.autoPosition && !dc.isStatic && !dc.autoFix && calcPosition(dc);
            var forceFocus = dc.forceFocus;
            if (dc.loading = !1, dc.loaded = !0, (dc.isTab || dc.isToggle) && changeTabs(dc), 
            $ACC.query("." + dc.closeClassName, dc.accDCObj, function() {
                $ACC.bind(this, "click", function(ev) {
                    dc.close(), ev.preventDefault();
                });
            }), $ACC.bind(dc.fn.closeLink, "focus", function(ev) {
                dc.tabOut(ev, dc);
            }), dc.timeoutVal && (dc.timer = setTimeout(function() {
                dc.timeout(dc);
            }, dc.timeoutVal)), dc.dropTarget && dc.accDD.on && (dc.accDD.dropTargets = [], 
            dc.accDD.dropAnchors = [], $ACC.query(dc.dropTarget, function() {
                dc.accDD.dropAnchors.push(this), dc.accDD.dropTargets.push(this);
            })), !dc.ranJSOnceAfter) {
                if (dc.ranJSOnceAfter = !0, dc.reverseJSOrder && (dc.runOnceAfter.apply(dc, [ dc ]), 
                dc.allowCascade && (dc.fn.proto.runOnceAfter && dc.fn.proto.runOnceAfter.apply(dc, [ dc ]), 
                $ACC.fn.globalDC.runOnceAfter && $ACC.fn.globalDC.runOnceAfter.apply(dc, [ dc ])), 
                dc.reverseJSOrderPass = !0), dc.runJSOnceAfter.length) for (var j = 0; j < dc.runJSOnceAfter.length; j++) getScript(dc, dc.runJSOnceAfter[j]);
                if (dc.allowCascade) {
                    if (dc.fn.proto.runJSOnceAfter && dc.fn.proto.runJSOnceAfter.length) for (j = 0; j < dc.fn.proto.runJSOnceAfter.length; j++) getScript(dc, dc.fn.proto.runJSOnceAfter[j]);
                    if ($ACC.fn.globalDC.runJSOnceAfter && $ACC.fn.globalDC.runJSOnceAfter.length) for (j = 0; j < $ACC.fn.globalDC.runJSOnceAfter.length; j++) getScript(dc, $ACC.fn.globalDC.runJSOnceAfter[j]);
                }
                dc.reverseJSOrder || dc.reverseJSOrderPass ? dc.reverseJSOrderPass = !1 : (dc.runOnceAfter.apply(dc, [ dc ]), 
                dc.allowCascade && (dc.fn.proto.runOnceAfter && dc.fn.proto.runOnceAfter.apply(dc, [ dc ]), 
                $ACC.fn.globalDC.runOnceAfter && $ACC.fn.globalDC.runOnceAfter.apply(dc, [ dc ])));
            }
            if (dc.reverseJSOrder && (dc.runAfter.apply(dc, [ dc ]), dc.allowCascade && (dc.fn.proto.runAfter && dc.fn.proto.runAfter.apply(dc, [ dc ]), 
            $ACC.fn.globalDC.runAfter && $ACC.fn.globalDC.runAfter.apply(dc, [ dc ])), 
            dc.reverseJSOrderPass = !0), dc.runJSAfter.length) for (j = 0; j < dc.runJSAfter.length; j++) getScript(dc, dc.runJSAfter[j]);
            if (dc.allowCascade) {
                if (dc.fn.proto.runJSAfter && dc.fn.proto.runJSAfter.length) for (j = 0; j < dc.fn.proto.runJSAfter.length; j++) getScript(dc, dc.fn.proto.runJSAfter[j]);
                if ($ACC.fn.globalDC.runJSAfter && $ACC.fn.globalDC.runJSAfter.length) for (j = 0; j < $ACC.fn.globalDC.runJSAfter.length; j++) getScript(dc, $ACC.fn.globalDC.runJSAfter[j]);
            }
            dc.reverseJSOrder || dc.reverseJSOrderPass ? dc.reverseJSOrderPass = !1 : (dc.runAfter.apply(dc, [ dc ]), 
            dc.allowCascade && (dc.fn.proto.runAfter && dc.fn.proto.runAfter.apply(dc, [ dc ]), 
            $ACC.fn.globalDC.runAfter && $ACC.fn.globalDC.runAfter.apply(dc, [ dc ]))), 
            (parseInt(dc.shadow.horizontal) || parseInt(dc.shadow.vertical)) && dc.shadow.color && setShadow(dc), 
            !dc.autoFix || dc.isDraggable && dc.drag.persist && dc.drag.x && dc.drag.y || sizeAutoFix(dc), 
            dc.isDraggable && setDrag(dc), forceFocus && $ACC.setFocus(dc.fn.sraStart), 
            $ACC.fn.debug && !getEl(dc.containerId) && alert("Error: The Automatic Accessibility Framework has been overwritten within the AccDC Dynamic Content Object with id=" + dc.id + '. New content should be added in a proper manner using the "source", "containerDiv", or "content" properties to ensure accessibility. View the Setup, Traversal and Manipulation, and Mode Handlers sections in the WhatSock.com Core API documentation for additional details.'), 
            dc.announce && $ACC.announce(dc.containerDiv), $ACC.bootstrap && $ACC.bootstrap(dc.containerDiv), 
            wheel[dc.indexVal] = dc;
        }
        function closeAccDCObj(dc) {
            var s;
            return (dc = wheel[dc.indexVal]).runBeforeClose.apply(dc, [ dc ]), dc.allowCascade && (dc.fn.proto.runBeforeClose && dc.fn.proto.runBeforeClose.apply(dc, [ dc ]), 
            $ACC.fn.globalDC.runBeforeClose && $ACC.fn.globalDC.runBeforeClose.apply(dc, [ dc ])), 
            !dc.loaded || dc.lock ? dc : (dc.closing = !0, dc.isDraggable && unsetDrag(dc), 
            pL(dc.accDCObj).remove(), dc.fn.containsFocus && !dc.fn.bypass && (dc.fn.toggleFocus = !0), 
            dc.fn.override = !0, dc.returnFocus && dc.triggerObj && !dc.fn.bypass && ("form" == dc.triggerObj.nodeName.toLowerCase() ? (s = pL(dc.triggerObj).find('*[type="submit"]').get(0)) && s.focus && s.focus() : dc.triggerObj.focus ? dc.triggerObj.focus() : $ACC.setFocus(dc.triggerObj)), 
            dc.loaded = dc.fn.override = !1, (dc.isTab || dc.isToggle) && changeTabs(dc, !0), 
            dc.fn.triggerObj = dc.triggerObj, dc.closing = !1, dc.runAfterClose.apply(dc, [ dc ]), 
            dc.allowCascade && (dc.fn.proto.runAfterClose && dc.fn.proto.runAfterClose.apply(dc, [ dc ]), 
            $ACC.fn.globalDC.runAfterClose && $ACC.fn.globalDC.runAfterClose.apply(dc, [ dc ])), 
            wheel[dc.indexVal] = dc);
        }
        function unsetTrigger(dc) {
            return dc = wheel[dc.indexVal], $ACC.query(dc.fn.triggerB, function() {
                $ACC.unbind(this, dc.fn.bindB), (dc.isTab || dc.isToggle) && pL(this).data("sra").remove();
            }), dc.fn.triggerB = dc.fn.bindB = "", wheel[dc.indexVal] = dc;
        }
        function setAutoFix(dc) {
            if ((dc = wheel[dc.indexVal]).loading || dc.loaded) {
                var cs = {
                    position: "fixed",
                    right: "",
                    bottom: "",
                    top: "",
                    left: ""
                };
                switch (dc.autoFix) {
                  case 1:
                    cs.top = 0, cs.left = "40%";
                    break;

                  case 2:
                    cs.top = 0, cs.right = 0;
                    break;

                  case 3:
                    cs.top = "40%", cs.right = 0;
                    break;

                  case 4:
                    cs.bottom = 0, cs.right = 0;
                    break;

                  case 5:
                    cs.bottom = 0, cs.left = "40%";
                    break;

                  case 6:
                    cs.bottom = 0, cs.left = 0;
                    break;

                  case 7:
                    cs.top = "40%", cs.left = 0;
                    break;

                  case 8:
                    cs.top = 0, cs.left = 0;
                    break;

                  case 9:
                    cs.top = "40%", cs.left = "40%";

                  default:
                    cs = dc.cssObj;
                }
                css(dc.accDCObj, cs), wheel[dc.indexVal] = dc;
            }
        }
        function sizeAutoFix(dc) {
            if ((dc = wheel[dc.indexVal]).loading || dc.loaded) {
                var npw, nph, bodyW = (win = {
                    width: window.document.documentElement.clientWidth || window.document.body.clientWidth,
                    height: window.document.documentElement.clientHeight || window.document.body.clientHeight
                }).width, win = win.height, aW = xWidth(dc.accDCObj), aH = xHeight(dc.accDCObj);
                switch (npw = aW < bodyW ? parseInt(aW / bodyW * 100 / 2) : 50, 
                nph = aH < win ? parseInt(aH / win * 100 / 2) : 50, dc.autoFix) {
                  case 1:
                  case 5:
                    css(dc.accDCObj, "left", 50 - npw + "%");
                    break;

                  case 3:
                  case 7:
                    css(dc.accDCObj, "top", 50 - nph + "%");
                    break;

                  case 9:
                    css(dc.accDCObj, {
                        left: 50 - npw + "%",
                        top: 50 - nph + "%"
                    });
                }
                (dc.offsetTop < 0 || 0 < dc.offsetTop || dc.offsetLeft < 0 || 0 < dc.offsetLeft) && ((aW = xOffset(dc.accDCObj)).top += dc.offsetTop, 
                aW.left += dc.offsetLeft, css(dc.accDCObj, aW)), wheel[dc.indexVal] = dc;
            }
        }
        function setShadow(dc) {
            return dc = wheel[dc.indexVal], css(dc.accDCObj, {
                "box-shadow": dc.shadow.horizontal + " " + dc.shadow.vertical + " " + dc.shadow.blur + " " + dc.shadow.color,
                "-webkit-box-shadow": dc.shadow.horizontal + " " + dc.shadow.vertical + " " + dc.shadow.blur + " " + dc.shadow.color,
                "-moz-box-shadow": dc.shadow.horizontal + " " + dc.shadow.vertical + " " + dc.shadow.blur + " " + dc.shadow.color
            }), wheel[dc.indexVal] = dc;
        }
        function setDrag(dc) {
            $ACC.setDragAndDrop && "function" == typeof $ACC.setDragAndDrop && $ACC.setDragAndDrop.setDrag && "function" == typeof $ACC.setDragAndDrop.setDrag && $ACC.setDragAndDrop.setDrag.apply(this, [ dc, wheel, pL ]);
        }
        function setBindings(dc) {
            return dc.fn.toggleFocus = dc.fn.containsFocus = !1, dc.bind = dc.binders || dc.bind, 
            0 <= inArray("focus", dc.bind.split(" ")) && (dc.fn.containsFocus = !0), 
            dc.fn.triggerB = dc.trigger, dc.fn.bindB = dc.bind, $ACC.query(dc.trigger, function() {
                var ss;
                "a" != this.nodeName.toLowerCase() || this.href || setAttr(this, "href", "#"), 
                $ACC.bind(this, dc.bind, function(ev) {
                    dc.triggerObj = this, dc.open(), ev.preventDefault();
                }), (dc.isTab && (dc.tabRole || dc.tabState) || dc.isToggle && (dc.toggleRole || dc.toggleState)) && (ss = createEl("span", null, sraCSS), 
                pL(this).append(ss), pL(this).data("sra", ss), dc.fn.sraCSSObj = ss), 
                dc.isTab ? pL(ss).html(dc.loaded ? "<span>&nbsp;" + dc.tabRole + "&nbsp;" + dc.tabState + "</span>" : "<span>&nbsp;" + dc.tabRole + "</span>") : dc.isToggle && pL(ss).html(dc.loaded ? "<span>&nbsp;" + dc.toggleRole + "&nbsp;" + dc.toggleState + "</span>" : "<span>&nbsp;" + dc.toggleRole + "</span>");
            }), dc;
        }
        for (var wheel = [], ids = [], changeTabs = function(dc, isClose) {
            if ((dc = wheel[dc.indexVal]).isTab) {
                if (dc.tabState) {
                    for (var w = 0; w < wheel.length; w++) {
                        var ss, wl = wheel[w];
                        !wl.isTab || (ss = pL(wl.triggerObj).data("sra")) && (wl.loaded ? pL(ss).html("<span>&nbsp;" + wl.tabRole + "&nbsp;" + wl.tabState + "</span>") : pL(ss).html("<span>&nbsp;" + wl.tabRole + "</span>"));
                    }
                    $ACC.query(dc.trigger, function() {
                        this != dc.triggerObj && pL(pL(this).data("sra")).html("<span>&nbsp;" + dc.tabRole + "</span>");
                    });
                }
            } else dc.isToggle && dc.toggleState && $ACC.query(dc.trigger, function() {
                var ss = pL(this).data("sra");
                ss && (isClose ? pL(ss).html("<span>&nbsp;" + dc.toggleRole + "</span>") : pL(ss).html("<span>&nbsp;" + dc.toggleRole + "&nbsp;" + dc.toggleState + "</span>"));
            });
            return wheel[dc.indexVal] = dc;
        }, unsetDrag = function(dc, uDrop) {
            $ACC.setDragAndDrop && "function" == typeof $ACC.setDragAndDrop && $ACC.setDragAndDrop.unsetDrag && "function" == typeof $ACC.setDragAndDrop.unsetDrag && $ACC.setDragAndDrop.unsetDrag.apply(this, [ dc, uDrop, wheel, pL ]);
        }, autoStart = [], svs = [ "runJSOnceBefore", "runOnceBefore", "runJSBefore", "runBefore", "runDuring", "runJSOnceAfter", "runOnceAfter", "runJSAfter", "runAfter", "runBeforeClose", "runAfterClose" ], a = 0; a < accDCObjects.length; a++) {
            var ajaxOptions, dc = {
                id: "",
                fn: {},
                trigger: "",
                setTrigger: function(dc) {
                    return (dc = dc || this).trigger && dc.bind ? function(dc) {
                        dc = wheel[dc.indexVal];
                        return unsetTrigger(dc), wheel[dc.indexVal] = setBindings(dc);
                    }(dc) : ($ACC.fn.debug && alert("Error: Both of the dc.trigger and dc.bind properties must be set before this function can be used. View the Setup section in the WhatSock.com Core API documentation for additional details."), 
                    dc);
                },
                unsetTrigger: function(dc) {
                    return (dc = dc || this).fn.triggerB && dc.fn.bindB ? unsetTrigger(dc) : dc;
                },
                targetObj: null,
                role: "",
                accStart: "Start",
                accEnd: "End",
                accClose: "Close",
                ariaLevel: 2,
                showHiddenClose: !0,
                displayHiddenClose: !0,
                showHiddenBounds: !0,
                source: "",
                bind: "",
                displayInline: !1,
                allowCascade: !1,
                reverseJSOrder: !1,
                runJSOnceBefore: [],
                runOnceBefore: function(dc) {},
                runJSBefore: [],
                runBefore: function(dc) {},
                runDuring: function(dc) {},
                runJSOnceAfter: [],
                runOnceAfter: function(dc) {},
                runJSAfter: [],
                runAfter: function(dc) {},
                runBeforeClose: function(dc) {},
                runAfterClose: function(dc) {},
                allowMultiple: !1,
                allowReopen: !1,
                isToggle: !1,
                toggleRole: "",
                toggleState: "",
                forceFocus: !1,
                returnFocus: !0,
                isStatic: "",
                prepend: !1,
                append: !1,
                isTab: !1,
                tabRole: "Tab",
                tabState: "Selected",
                autoStart: !1,
                announce: !1,
                lock: !1,
                mode: 0,
                hSource: function(source, dc) {
                    return pL((dc = dc || this).containerDiv).html(source), dc;
                },
                hLoadData: "",
                hLoad: function(responseText, textStatus, XMLHttpRequest, dc) {},
                hGetData: {},
                hGetType: "",
                hGet: function(data, textStatus, dc) {},
                hJSONData: {},
                hJSON: function(data, textStatus, dc) {},
                hScript: function(data, textStatus, dc) {},
                hPostData: {},
                hPostType: "",
                hPost: function(data, textStatus, dc) {},
                ajaxOptions: {
                    beforeSend: function(XMLHttpRequest) {
                        dc.hBeforeSend(this, XMLHttpRequest, dc);
                    },
                    success: function(source, textStatus, XMLHttpRequest) {
                        dc.hSuccess(this, source, textStatus, XMLHttpRequest, dc), 
                        dc.hSource(dc.content), parseRemaining(dc);
                    },
                    complete: function(XMLHttpRequest, textStatus) {
                        dc.hComplete(this, XMLHttpRequest, textStatus, dc);
                    },
                    error: function(XMLHttpRequest, textStatus, errorThrown) {
                        dc.hError(this, XMLHttpRequest, textStatus, errorThrown, dc);
                    }
                },
                hBeforeSend: function(options, XMLHttpRequest, dc) {},
                hSuccess: function(options, data, textStatus, XMLHttpRequest, dc) {
                    dc.content = data;
                },
                hComplete: function(options, XMLHttpRequest, textStatus, dc) {},
                hError: function(options, XMLHttpRequest, textStatus, errorThrown, dc) {},
                open: function(dc) {
                    return (dc = dc || this).fn.toggleFocus ? dc.fn.toggleFocus = !1 : function(dc) {
                        if ((dc = wheel[dc.indexVal]).loaded && !dc.allowReopen && !dc.isToggle || dc.fn.override || dc.lock || dc.loading || dc.closing) return;
                        if (dc.loaded && (dc.allowReopen || dc.isToggle) && (dc.fn.bypass = !0, 
                        closeAccDCObj(dc), dc.fn.bypass = !1, dc.isToggle)) return;
                        dc.cancel = !1, dc.content = "";
                        var ev, nid = now(), events = (dc.accDCObjId = dc.fn.accDCObjId = "AccDC" + nid, 
                        dc.closeId = "AccDC" + (nid + (nowI += 1)), dc.containerId = dc.containerDivId = "AccDC" + (nid + (nowI += 1)), 
                        dc.importCSS && (dc.fn.importCSSId = "AccDC" + (nid + (nowI += 1))), 
                        dc.fn.sraStart = createEl("div", null, sraCSS), dc.fn.sraEnd = createEl("div", null, sraCSS), 
                        dc.containerDiv = createEl("div", {
                            id: dc.containerId
                        }), dc.accDCObj = createEl("div", {
                            id: dc.fn.accDCObjId
                        }), dc.className && addClass(dc.accDCObj, dc.className), 
                        dc.showHiddenBounds && pL(dc.accDCObj).append(dc.fn.sraStart), 
                        pL(dc.accDCObj).append(dc.containerDiv), dc.showHiddenBounds && pL(dc.accDCObj).append(dc.fn.sraEnd), 
                        {
                            mouseOver: function(ev) {
                                dc.mouseOver.apply(this, [ ev, dc ]);
                            },
                            mouseOut: function(ev) {
                                dc.mouseOut.apply(this, [ ev, dc ]);
                            },
                            resize: function(ev) {
                                dc.resize.apply(this, [ ev, dc ]);
                            },
                            scroll: function(ev) {
                                dc.scroll.apply(this, [ ev, dc ]);
                            },
                            click: function(ev) {
                                dc.click.apply(this, [ ev, dc ]);
                            },
                            dblClick: function(ev) {
                                dc.dblClick.apply(this, [ ev, dc ]);
                            },
                            mouseDown: function(ev) {
                                dc.mouseDown.apply(this, [ ev, dc ]);
                            },
                            mouseUp: function(ev) {
                                dc.mouseUp.apply(this, [ ev, dc ]);
                            },
                            mouseMove: function(ev) {
                                dc.mouseMove.apply(this, [ ev, dc ]);
                            },
                            mouseEnter: function(ev) {
                                dc.mouseEnter.apply(this, [ ev, dc ]);
                            },
                            mouseLeave: function(ev) {
                                dc.mouseLeave.apply(this, [ ev, dc ]);
                            },
                            keyDown: function(ev) {
                                dc.keyDown.apply(this, [ ev, dc ]);
                            },
                            keyPress: function(ev) {
                                dc.keyPress.apply(this, [ ev, dc ]);
                            },
                            keyUp: function(ev) {
                                dc.keyUp.apply(this, [ ev, dc ]);
                            },
                            error: function(ev) {
                                dc.error.apply(this, [ ev, dc ]);
                            },
                            focusIn: function(ev) {
                                dc.focusIn.apply(this, [ ev, dc ]);
                            },
                            focusOut: function(ev) {
                                dc.focusOut.apply(this, [ ev, dc ]);
                            }
                        }), toBind = {};
                        for (ev in events) dc[ev] && "function" == typeof dc[ev] && (toBind[ev.toLowerCase()] = events[ev]);
                        if ($ACC.bind(dc.accDCObj, toBind), !dc.ranJSOnceBefore) {
                            if (dc.ranJSOnceBefore = !0, dc.reverseJSOrder && (dc.runOnceBefore.apply(dc, [ dc ]), 
                            dc.allowCascade && (dc.fn.proto.runOnceBefore && dc.fn.proto.runOnceBefore.apply(dc, [ dc ]), 
                            $ACC.fn.globalDC.runOnceBefore && $ACC.fn.globalDC.runOnceBefore.apply(dc, [ dc ])), 
                            dc.reverseJSOrderPass = !0), dc.runJSOnceBefore.length) for (var j = 0; j < dc.runJSOnceBefore.length; j++) getScript(dc, dc.runJSOnceBefore[j]);
                            if (dc.allowCascade) {
                                if (dc.fn.proto.runJSOnceBefore && dc.fn.proto.runJSOnceBefore.length) for (j = 0; j < dc.fn.proto.runJSOnceBefore.length; j++) getScript(dc, dc.fn.proto.runJSOnceBefore[j]);
                                if ($ACC.fn.globalDC.runJSOnceBefore && $ACC.fn.globalDC.runJSOnceBefore.length) for (j = 0; j < $ACC.fn.globalDC.runJSOnceBefore.length; j++) getScript(dc, $ACC.fn.globalDC.runJSOnceBefore[j]);
                            }
                            dc.reverseJSOrder || dc.reverseJSOrderPass ? dc.reverseJSOrderPass = !1 : (dc.runOnceBefore.apply(dc, [ dc ]), 
                            dc.allowCascade && (dc.fn.proto.runOnceBefore && dc.fn.proto.runOnceBefore.apply(dc, [ dc ]), 
                            $ACC.fn.globalDC.runOnceBefore && $ACC.fn.globalDC.runOnceBefore.apply(dc, [ dc ])));
                        }
                        if (dc.reverseJSOrder && (dc.runBefore.apply(dc, [ dc ]), 
                        dc.allowCascade && (dc.fn.proto.runBefore && dc.fn.proto.runBefore.apply(dc, [ dc ]), 
                        $ACC.fn.globalDC.runBefore && $ACC.fn.globalDC.runBefore.apply(dc, [ dc ])), 
                        dc.reverseJSOrderPass = !0), dc.runJSBefore.length) for (j = 0; j < dc.runJSBefore.length; j++) getScript(dc, dc.runJSBefore[j]);
                        if (dc.allowCascade) {
                            if (dc.fn.proto.runJSBefore && dc.fn.proto.runJSBefore.length) for (j = 0; j < dc.fn.proto.runJSBefore.length; j++) getScript(dc, dc.fn.proto.runJSBefore[j]);
                            if ($ACC.fn.globalDC.runJSBefore && $ACC.fn.globalDC.runJSBefore.length) for (j = 0; j < $ACC.fn.globalDC.runJSBefore.length; j++) getScript(dc, $ACC.fn.globalDC.runJSBefore[j]);
                        }
                        if (dc.reverseJSOrder || dc.reverseJSOrderPass ? dc.reverseJSOrderPass = !1 : (dc.runBefore.apply(dc, [ dc ]), 
                        dc.allowCascade && (dc.fn.proto.runBefore && dc.fn.proto.runBefore.apply(dc, [ dc ]), 
                        $ACC.fn.globalDC.runBefore && $ACC.fn.globalDC.runBefore.apply(dc, [ dc ]))), 
                        dc.cancel) return dc.cancel = dc.loading = !1;
                        switch (dc.loading = !0, dc.showHiddenBounds && (setAttr(dc.fn.sraStart, {
                            id: "h" + now(),
                            role: "heading",
                            "aria-level": dc.ariaLevel
                        }), pL(dc.fn.sraStart).append("<span>" + dc.role + "&nbsp;" + dc.accStart + "</span>"), 
                        dc.showHiddenClose && (dc.fn.closeLink = createEl("a", {
                            id: dc.closeId,
                            href: "#"
                        }, dc.sraCSS, dc.closeClassName), dc.fn.closeLink.innerHTML = dc.accClose, 
                        insertBefore(dc.fn.sraEnd, dc.fn.closeLink), dc.displayHiddenClose ? $ACC.bind(dc.fn.closeLink, {
                            focus: function() {
                                sraCSSClear(this);
                            },
                            blur: function() {
                                css(this, dc.sraCSS);
                            }
                        }) : setAttr(dc.fn.closeLink, "tabindex", "-1")), pL(dc.fn.sraEnd).append("<span>" + dc.role + "&nbsp;" + dc.accEnd + "</span>")), 
                        dc.forceFocus && (setAttr(dc.fn.sraStart, "tabindex", -1), 
                        css(dc.fn.sraStart, "outline", "none")), dc.displayInline && css([ dc.accDCObj, dc.containerDiv ], "display", "inline"), 
                        dc.mode) {
                          case 1:
                            pL(dc.containerDiv).load(dc.source, dc.hLoadData, function(responseText, textStatus, XMLHttpRequest) {
                                dc.hLoad(responseText, textStatus, XMLHttpRequest, dc), 
                                parseRemaining(dc);
                            });
                            break;

                          case 2:
                            dc.request = pL.get(dc.source, dc.hGetData, function(source, textStatus) {
                                dc.hGet(source, textStatus, dc), dc.hSource(dc.content), 
                                parseRemaining(dc);
                            }, dc.hGetType);
                            break;

                          case 3:
                            dc.request = pL.getJSON(dc.source, dc.hJSONData, function(source, textStatus) {
                                dc.hJSON(source, textStatus, dc), dc.hSource(dc.content), 
                                parseRemaining(dc);
                            });
                            break;

                          case 4:
                            dc.request = pL.getScript(dc.source, function(source, textStatus) {
                                dc.hScript(source, textStatus, dc), dc.hSource(dc.content), 
                                parseRemaining(dc);
                            });
                            break;

                          case 5:
                            dc.request = pL.post(dc.source, dc.hPostData, function(source, textStatus) {
                                dc.hPost(source, textStatus, dc), dc.hSource(dc.content), 
                                parseRemaining(dc);
                            }, dc.hPostType);
                            break;

                          case 6:
                            dc.request = pL.ajax(dc.ajaxOptions);
                            break;

                          default:
                            dc.hSource(dc.source), parseRemaining(dc);
                        }
                        wheel[dc.indexVal] = dc;
                    }(dc), dc;
                },
                close: function(dc) {
                    return closeAccDCObj(dc = dc || this);
                },
                isDraggable: !1,
                drag: {
                    handle: null,
                    maxX: null,
                    maxY: null,
                    persist: !1,
                    x: null,
                    y: null,
                    confineTo: null,
                    init: null,
                    override: null
                },
                onDragStart: function(ev, dd, dc) {},
                onDragEnd: function(ev, dd, dc) {},
                onDrag: function(ev, dd, dc) {},
                dropTarget: null,
                dropInit: null,
                drop: {},
                onDropStart: function(ev, dd, dc) {},
                onDrop: function(ev, dd, dc) {},
                onDropEnd: function(ev, dd, dc) {},
                setDrag: function(dc) {
                    return setDrag(dc = dc || this);
                },
                unsetDrag: function(dc, uDrop) {
                    return dc = dc && "boolean" == typeof dc ? (uDrop = dc, this) : dc || this, 
                    unsetDrag(dc, uDrop), dc;
                },
                accDD: {
                    on: !1,
                    dragText: "Move",
                    toText: "to",
                    dropTargets: [],
                    dropEffect: "move",
                    actionText: "Dragging",
                    returnFocusTo: "",
                    isDragging: !1,
                    dragClassName: "",
                    dragLinkStyle: {},
                    duration: 500,
                    fireDrag: function(ev, dc) {
                        var os = xOffset(this);
                        dc.accDD.dragDD = {
                            drag: this,
                            proxy: this,
                            drop: dc.accDD.dropTargets,
                            available: dc.accDD.dropTargets,
                            startX: os.left + os.width / 2,
                            startY: os.top + os.height / 2,
                            deltaX: 0,
                            deltaY: 0,
                            originalX: os.left,
                            originalY: os.top,
                            offsetX: 0,
                            offsetY: 0
                        }, dc.accDD.dragDD.target = pL(dc.drag.handle).get(0) || this, 
                        dc.onDragStart.apply(this, [ ev, dc.accDD.dragDD, dc ]);
                    },
                    fireDrop: function(ev, dc) {
                        var that = this, os = xOffset(this);
                        function update() {
                            var os = xOffset(dc.accDD.dragDD.drag);
                            dc.accDD.dragDD.offsetY = os.top, dc.accDD.dragDD.offsetX = os.left;
                        }
                        dc.accDD.dropDD = {
                            target: this,
                            drag: dc.accDD.dragDD.drag,
                            proxy: dc.accDD.dragDD.proxy,
                            drop: dc.accDD.dragDD.drop,
                            available: dc.accDD.dragDD.available,
                            startX: dc.accDD.dragDD.startX,
                            startY: dc.accDD.dragDD.startY,
                            originalX: dc.accDD.dragDD.originalX,
                            originalY: dc.accDD.dragDD.originalY,
                            deltaX: 0,
                            deltaY: 0,
                            offsetX: os.left,
                            offsetY: os.top
                        }, transition(dc.accDD.dragDD.drag, {
                            top: dc.accDD.dropDD.offsetY,
                            left: dc.accDD.dropDD.offsetX
                        }, {
                            duration: dc.accDD.duration,
                            step: function() {
                                update(), dc.onDrag.apply(dc.accDD.dragDD.drag, [ ev, dc.accDD.dragDD, dc ]);
                            },
                            complete: function() {
                                update(), dc.accDD.dragDD.originalY <= dc.accDD.dragDD.offsetY ? dc.accDD.dragDD.deltaY = dc.accDD.dropDD.deltaY = dc.accDD.dragDD.originalY - dc.accDD.dragDD.offsetY : dc.accDD.dragDD.originalY >= dc.accDD.dragDD.offsetY && (dc.accDD.dragDD.deltaY = dc.accDD.dropDD.deltaY = 0 - (dc.accDD.dragDD.offsetY - dc.accDD.dragDD.originalY)), 
                                dc.accDD.dragDD.originalX <= dc.accDD.dragDD.offsetX ? dc.accDD.dragDD.deltaX = dc.accDD.dropDD.deltaX = dc.accDD.dragDD.originalX - dc.accDD.dragDD.offsetX : dc.accDD.dragDD.originalX >= dc.accDD.dragDD.offsetX && (dc.accDD.dragDD.deltaX = dc.accDD.dropDD.deltaX = 0 - (dc.accDD.dragDD.offsetX - dc.accDD.dragDD.originalX));
                                var rft = dc.accDD.returnFocusTo;
                                dc.onDropStart.apply(that, [ ev, dc.accDD.dropDD, dc ]), 
                                dc.onDrop.apply(that, [ ev, dc.accDD.dropDD, dc ]), 
                                dc.onDropEnd.apply(that, [ ev, dc.accDD.dropDD, dc ]), 
                                dc.onDragEnd.apply(dc.accDD.dragDD.drag, [ ev, dc.accDD.dragDD, dc ]), 
                                $ACC.setFocus((1 === rft.nodeType ? rft : pL(rft).get(0)) || dc.accDCObj), 
                                dc.accDD.isDragging = !1, setAttr(dc.accDCObj, "aria-grabbed", "false");
                            }
                        });
                    }
                },
                tabOut: function(ev, dc) {},
                timeoutVal: 0,
                timeout: function(dc) {},
                className: "",
                closeClassName: "accDCCloseCls",
                cssObj: {},
                importCSS: "",
                css: function(prop, val, mergeCSS, dc) {
                    dc = dc || this;
                    return "string" == typeof prop && val ? (mergeCSS && (dc.cssObj[prop] = val), 
                    css(dc.accDCObj, prop, val), dc) : prop && "object" == typeof prop ? (val && "boolean" == typeof val && pL.extend(dc.cssObj, prop), 
                    css(dc.accDCObj, prop), dc) : prop && "string" == typeof prop ? css(dc.accDCObj, prop) : void 0;
                },
                children: [],
                parent: null,
                autoPosition: 0,
                offsetTop: 0,
                offsetLeft: 0,
                offsetParent: null,
                posAnchor: null,
                setPosition: function(obj, posVal, save, dc) {
                    "number" == typeof obj && (dc = save, save = posVal, posVal = obj);
                    dc = dc || this;
                    return save && (dc.posAnchor = obj || dc.posAnchor, dc.autoPosition = posVal || dc.autoPosition), 
                    calcPosition(dc, obj, posVal), dc;
                },
                applyFix: function(val, dc) {
                    dc = dc || this;
                    return val && (dc.autoFix = val), setAutoFix(dc), 0 < dc.autoFix && sizeAutoFix(dc), 
                    dc;
                },
                shadow: {
                    horizontal: "0px",
                    vertical: "0px",
                    blur: "0px",
                    color: ""
                },
                setShadow: function(dc, shadow) {
                    return 1 !== arguments.length || "id" in dc || (shadow = dc, 
                    dc = this), shadow && pL.extend(dc.shadow, shadow), setShadow(dc);
                },
                AccDCInit: function() {
                    return this;
                }
            }, aO = accDCObjects[a], gImport = gImport || {}, gO = {}, iO = {};
            if (6 == aO.mode && (ajaxOptions = dc.ajaxOptions), "boolean" != typeof aO.allowCascade && (aO.allowCascade = gImport.allowCascade), 
            "boolean" != typeof aO.allowCascade && (aO.allowCascade = $ACC.fn.globalDC.allowCascade || dc.allowCascade), 
            aO.allowCascade) for (var s = 0; s < svs.length; s++) gO[svs[s]] = $ACC.fn.globalDC[svs[s]], 
            iO[svs[s]] = gImport[svs[s]];
            if (pL.isEmptyObject($ACC.fn.globalDC) || pL.extend(!0, dc, $ACC.fn.globalDC), 
            pL.isEmptyObject(gImport) || pL.extend(!0, dc, gImport), pL.extend(!0, dc, aO), 
            6 == aO.mode && ajaxOptions && pL.extend(dc.ajaxOptions, ajaxOptions), 
            dc.allowCascade) {
                for (s = 0; s < svs.length; s++) $ACC.fn.globalDC[svs[s]] = gO[svs[s]];
                dc.fn.proto = iO;
            }
            if (dc.id && dc.role) if (ids.push(dc.id), dc.autoStart && autoStart.push(dc.id), 
            dc.indexVal = wheel.length, wheel[dc.indexVal] = function(dc) {
                (dc = setBindings(dc)).sraCSS = sraCSS, dc.sraCSSClear = sraCSSClear;
                function f() {}
                return f.prototype = dc, window[window.AccDCNamespace || "$ACC"].reg[dc.id] = $ACC.reg[dc.id] = new f();
            }(dc), parentDC) {
                for (var chk = -1, p = $ACC.reg[parentDC.id], c = $ACC.reg[wheel[dc.indexVal].id], i = 0; i < p.children.length; i++) c.id === p.children[i].id && (chk = i);
                0 <= chk ? p.children.slice(chk, 1, c) : p.children.push(c), c.parent = p;
                for (var t = c; t.parent; ) t = t.parent;
                c.top = t;
            } else wheel[dc.indexVal].top = wheel[dc.indexVal]; else $ACC.fn.debug && alert("Error: To ensure both proper functionality and accessibility, every AccDC Dynamic Content Object must have a unique ID and an informative ROLE. View the Setup and Automatic Accessibility Framework sections in the WhatSock.com Core API documentation for additional details.");
        }
        for (a = 0; a < wheel.length; a++) wheel[a].siblings = wheel;
        for (s = 0; s < autoStart.length; s++) {
            dc = $ACC.reg[autoStart[s]], t = pL(dc.trigger).get(0);
            dc.triggerObj = t || null, dc.open();
        }
    }, window.InitAccDC && window.InitAccDC.length) {
        pL.ajaxSetup({
            async: !1
        });
        for (var i = 0; i < window.InitAccDC.length; i++) $ACC.getScript(window.InitAccDC[i]);
        pL.ajaxSetup({
            async: !0
        });
    }
}($), function() {
    var track = {}, trapCM = null, trapC = null, createMenu = ($ACC.setMenu = function(trigger, path, topLvlId, callback, isInternal, context, config) {
        var rcId, bfr = isInternal ? $ACC.getEl(path) : $ACC.createEl("div"), handler = callback || function() {};
        config = config || {}, runAfter = function(dc) {
            trapC.menuOpen = !0, trapC.currentMenu = dc.top, "ontouchstart" in window && $ACC.bind(dc.accDCObj, "touchstart", function(ev) {
                trapC.pass = !0;
            }), dc.mNode = $ACC.query((config.menuTag || "ul") + "." + (config.menuClass || "menu"), dc.containerDiv)[0], 
            ids = [], $ACC.remClass(dc.mNode, "hidden");
            var offsetLeft = parseInt($ACC.getAttr(dc.mNode, "data-offsetleft")), offsetTop = parseInt($ACC.getAttr(dc.mNode, "data-offsettop")), redraw = !1, hor = $ACC.getAttr(dc.mNode, "data-horizontal"), autoPosition = parseInt($ACC.getAttr(dc.mNode, "data-autoposition")), hor = hor || (config.horizontal ? "true" : "false"), subMenuObjects = (dc.hor = "true" === hor, 
            isNaN(offsetLeft) || (dc.offsetLeft += offsetLeft, redraw = !0), isNaN(offsetTop) || (dc.offsetTop += offsetTop, 
            redraw = !0), isNaN(autoPosition) || (dc.autoPosition = autoPosition, 
            redraw = !0), redraw && dc.setPosition(this.triggerObj), createMenu((config.menuTag || "ul") + "." + (config.menuClass || "menu"), (config.menuTag || "ul") + "." + (config.menuClass || "menu") + " " + (config.itemTag || "li"), dc, config), 
            []);
            $ACC.query((config.menuTag || "ul") + "." + (config.menuClass || "menu") + " " + (config.itemTag || "li") + "." + (config.folderClass || "submenu"), dc.containerDiv, function(i, o) {
                var tdc;
                subMenuObjects.push({
                    id: dc.id + o.id,
                    role: dc.role,
                    accStart: dc.accStart,
                    accEnd: dc.accEnd,
                    bind: "popupsubmenu",
                    isTab: !0,
                    tabRole: "",
                    tabState: config.openState || "",
                    trigger: o,
                    handler: handler,
                    topLvlId: dc.topLvlId + o.id,
                    source: track[dc.topLvlId + o.id],
                    autoPosition: isNaN(config.autoPosition) ? 3 : config.autoPosition,
                    runBefore: function(dc) {
                        dc.offsetLeft = "number" == typeof config.offsetLeft ? config.offsetLeft : "function" == typeof config.offsetLeft ? config.offsetLeft(dc) : !config.horizontal && dc.parent ? -dc.parent.accDCObj.offsetWidth / 2 : 0, 
                        dc.offsetTop = "number" == typeof config.offsetTop ? config.offsetTop : "function" == typeof config.offsetTop ? config.offsetTop(dc) : config.horizontal ? 0 : -dc.triggerObj.offsetHeight;
                    },
                    runDuring: function(dc) {
                        $ACC.setAttr(dc.accDCObj, "role", "application"), dc.showHiddenBounds && (dc.fn.sraStart.innerHTML = dc.fn.sraEnd.innerHTML = "", 
                        $ACC.setAttr(dc.fn.sraStart, "aria-hidden", "true"), $ACC.setAttr(dc.fn.sraEnd, "aria-hidden", "true"));
                    },
                    runAfter: runAfter,
                    runBeforeClose: runBeforeClose,
                    cssObj: {
                        position: config.overrides && config.overrides.cssObj && config.overrides.cssObj.position || "relative",
                        zIndex: dc.cssObj.zIndex + 1
                    },
                    className: config.containerClass || "menu",
                    ariaLevel: dc.ariaLevel + 1,
                    tabOut: dc.tabOut,
                    allowCascade: !0
                }), $ACC.setAttr(o, "aria-haspopup", "true"), $ACC.reg[dc.id + o.id] && ((tdc = $ACC.reg[dc.id + o.id]).fn.sraCSSObj && tdc.fn.sraCSSObj.parentNode.removeChild(tdc.fn.sraCSSObj), 
                tdc.returnFocus = !1, tdc.close(), tdc.returnFocus = !0), ids.push(o.id);
            }), $ACC(dc, subMenuObjects, config.overrides), $ACC.query((config.menuTag || "ul") + "." + (config.menuClass || "menu") + " " + (config.itemTag || "li") + "." + (config.linkClass || "link"), dc.containerDiv, function(i, o) {
                $ACC.internal.data(o, "isset") || ($ACC.internal.data(o, "isset", !0), 
                $ACC.bind(o, "menulink", function(ev) {
                    if (dc.top.close(), dc.handler && "function" == typeof dc.handler) return dc.handler.apply(this, [ ev, dc ]);
                }), ids.push(o.id));
            }), ids.length && $ACC.setAttr(dc.mNode, "aria-owns", ids.join(" ")), 
            dc != dc.top && dc.parent && dc.parent.iNodes && dc.triggerObj && $ACC.setAttr(dc.triggerObj, "tabindex", "-1"), 
            dc == dc.top && ($ACC.bind("body", "focusin.accmenu", function(ev) {
                dc.tempFocus ? dc.tempFocus = null : "ontouchstart" in window || dc.top.close();
            }), $ACC.bind(dc.accDCObj, "focusin", function(ev) {
                dc.tempFocus = this;
            }));
        }, runBeforeClose = function(dc) {
            if (dc.children.length) for (var i = 0; i < dc.children.length; i++) dc.children[i].close();
            dc.iNodes && dc.iNodes.length && $ACC.unbind(dc.iNodes, "click keydown popupsubmenu menulink"), 
            dc != dc.top && dc.parent && dc.parent.iNodes && dc.triggerObj && $ACC.setAttr(dc.triggerObj, "tabindex", "0"), 
            dc == dc.top && $ACC.unbind("body", "focusin.accmenu");
        }, postLoad = function() {
            var tdc;
            $ACC.query((config.menuTag || "ul") + "." + (config.menuClass || "menu"), bfr, function(i, o) {
                track[o.id] = o.parentNode.removeChild(o) || track[o.id];
            }), $ACC.reg[topLvlId] && ((tdc = $ACC.reg[topLvlId]).fn.sraCSSObj && tdc.fn.sraCSSObj.parentNode.removeChild(tdc.fn.sraCSSObj), 
            tdc.returnFocus = !1, tdc.close(), tdc.returnFocus = !0), $ACC([ {
                id: topLvlId,
                role: config.role || "Menu",
                accStart: config.accStart || "",
                accEnd: config.accEnd || "",
                controlType: "MenuControl",
                bind: "popupmenu",
                trigger: trigger,
                handler: handler,
                topLvlId: topLvlId,
                source: track[topLvlId],
                autoPosition: isNaN(config.autoPosition) ? 3 : config.autoPosition,
                isStatic: "body",
                append: !0,
                click: function(ev, dc) {
                    trapC.pass = !0;
                },
                runBefore: function(dc) {
                    $ACC.find("*", function(dc) {
                        dc.controlType && "MenuControl" == dc.controlType && dc.loaded && dc.close();
                    }), dc.offsetLeft = "number" == typeof config.offsetLeft ? config.offsetLeft : "function" == typeof config.offsetLeft ? config.offsetLeft(dc) : config.horizontal ? 0 : -dc.triggerObj.offsetWidth / 2, 
                    dc.offsetTop = "number" == typeof config.offsetTop ? config.offsetTop : "function" == typeof config.offsetTop ? config.offsetTop(dc) : config.horizontal ? 0 : -dc.triggerObj.offsetHeight;
                },
                runDuring: function(dc) {
                    $ACC.setAttr(dc.accDCObj, "role", "application"), dc.showHiddenBounds && (dc.fn.sraStart.innerHTML = dc.fn.sraEnd.innerHTML = "", 
                    $ACC.setAttr(dc.fn.sraStart, "aria-hidden", "true"), $ACC.setAttr(dc.fn.sraEnd, "aria-hidden", "true"));
                },
                runAfter: runAfter,
                runBeforeClose: runBeforeClose,
                runAfterClose: function(dc) {
                    trapC.menuOpen = !1;
                },
                cssObj: {
                    position: config.overrides && config.overrides.cssObj && config.overrides.cssObj.position || "absolute",
                    zIndex: config.overrides && config.overrides.cssObj && config.overrides.cssObj.zIndex || 1
                },
                className: config.containerClass || "menu",
                ariaLevel: config.ariaLevel || 3,
                tabOut: function(ev, dc) {
                    "ontouchstart" in window || 0 < navigator.maxTouchPoints || 0 < navigator.msMaxTouchPoints || dc.top.close();
                },
                allowCascade: !0
            } ], config.overrides, !0);
        }, isInternal ? postLoad() : $ACC.load(bfr, path, postLoad), config.rightClick && config.rightClickText && !("ontouchstart" in window || 0 < navigator.maxTouchPoints || 0 < navigator.msMaxTouchPoints) && (rcId = "rc" + $ACC.genId(), 
        (callback = $ACC.createEl("div", {
            id: rcId,
            role: "tooltip"
        }, {
            display: "none"
        })).innerHTML = config.rightClickText, document.body.appendChild(callback)), 
        "function" != typeof trapC && ((trapC = function(ev) {
            trapC.pass || trapCM && trapCM.pass || !trapC.menuOpen || trapC.currentMenu && trapC.currentMenu.id && trapC.currentMenu.loaded && trapC.currentMenu.close(), 
            trapC && (trapC.pass = !1), trapCM && (trapCM.pass = !1);
        }).menuOpen = trapC.pass = !1, $ACC.bind(document, "click touchstart", trapC)), 
        config.rightClick && "function" != typeof trapCM && ((trapCM = function(ev) {
            trapCM.pass && ev.preventDefault(), trapCM.pass = !1;
        }).pass = !1, $ACC.bind(document, "contextmenu", trapCM)), $ACC.query(trigger, context, function(i, tgr) {
            var touched, released, longTouched;
            "body" != tgr.nodeName.toLowerCase() && $ACC.setAttr(tgr, "aria-haspopup", "true"), 
            rcId && addDescribedby(tgr, rcId), config.rightClick ? ($ACC.bind(tgr, {
                contextmenu: function(ev) {
                    ev.preventDefault(), trapCM && (trapCM.pass = !0);
                },
                mouseup: function(ev) {
                    2 == (null == ev.which ? ev.button < 2 ? 1 : 4 == ev.button ? 3 : 2 : ev.which < 2 ? 1 : 2 == ev.which ? 3 : 2) && (trapCM && (trapCM.pass = !0), 
                    $ACC.reg[topLvlId].loaded ? $ACC.reg[topLvlId].close() : $ACC.trigger(tgr, "popupmenu"), 
                    ev.preventDefault());
                },
                keydown: function(ev) {
                    var k = ev.which || ev.keyCode;
                    (93 == k || ev.shiftKey && 121 == k) && (trapCM && (trapCM.pass = !0), 
                    $ACC.trigger(tgr, "popupmenu"), ev.preventDefault());
                }
            }), "ontouchstart" in window && (released = touched = 0, longTouched = !1, 
            $ACC.bind(tgr, {
                touchstart: function(ev) {
                    touched = new Date().getTime() + 2e3;
                },
                touchend: function(ev) {
                    released = new Date().getTime(), touched < released ? (longTouched = !0, 
                    ev.stopPropagation(), ev.preventDefault(), $ACC.trigger(tgr, "popupmenu")) : longTouched = !1;
                },
                click: function(ev) {
                    longTouched && (longTouched = !1, ev.stopPropagation(), ev.preventDefault());
                }
            }))) : $ACC.bind(tgr, {
                keydown: function(ev) {
                    var k = ev.which || ev.keyCode;
                    40 != k && 13 != k && 32 != k || ($ACC.trigger(tgr, "popupmenu"), 
                    ev.preventDefault());
                },
                click: function(ev) {
                    trapC.pass = !0, $ACC.reg[topLvlId].loaded ? $ACC.reg[topLvlId].close() : $ACC.trigger(tgr, "popupmenu"), 
                    ev.preventDefault();
                }
            }), $ACC.bind(tgr, {
                closepopupmenu: function(ev) {
                    $ACC.reg[topLvlId].loaded && $ACC.reg[topLvlId].close();
                }
            });
        });
    }, function(parent, children, dc, config) {
        function setFocus() {
            for (var j = items.length - 1; 0 <= j; j--) items[j].id == this.id && (index = j), 
            $ACC.setAttr(items[j], {
                tabindex: -1
            });
            $ACC.setAttr(this, {
                tabindex: "0"
            }).focus();
        }
        var index = 0, xItems = [], items = ($ACC.query(parent, dc.containerDiv, function(i, o) {
            $ACC.setAttr(o, "role", dc.hor ? "menubar" : "menu");
        }), dc.iNodes = $ACC.query(children, dc.containerDiv, function(i, o) {
            xItems.push($ACC.getText(o)), $ACC.setAttr(o, {
                role: "menuitem",
                "aria-posinset": i + 1,
                tabindex: -1
            }), $ACC.bind(o, {
                keydown: function(ev) {
                    var k = ev.which || ev.keyCode;
                    ev.metaKey || (27 == k ? (dc.close(), ev.preventDefault()) : 13 == k ? ($ACC.hasClass(this, config.folderClass || "submenu") ? "true" != $ACC.getAttr(this, "aria-disabled") ? $ACC.trigger(this, "popupsubmenu") : dc.top.close() : $ACC.trigger(this, "click"), 
                    ev.preventDefault()) : 37 <= k && k <= 40 ? (ev.preventDefault(), 
                    dc != dc.top && (37 == k && !dc.hor || 38 == k && dc.hor) ? dc.close() : 39 == k && !dc.hor || 40 == k && dc.hor ? $ACC.hasClass(this, config.folderClass || "submenu") && "true" != $ACC.getAttr(this, "aria-disabled") && $ACC.trigger(this, "popupsubmenu") : 38 == k && !dc.hor || 37 == k && dc.hor ? index = index <= 0 ? items.length - 1 : index - 1 : (40 == k && !dc.hor || 39 == k && dc.hor) && (index = index >= items.length - 1 ? 0 : index + 1), 
                    (38 != k && 40 != k || dc.hor) && (37 != k && 39 != k || !dc.hor) || (items[index] && 1 === items[index].nodeType || (index = 0), 
                    items.length && setFocus.apply(items[index]))) : (48 <= k && k <= 57 || 65 <= k && k <= 90) && (function(l) {
                        for (var i = index + 1; i <= items.length - 1; i++) if (l.toLowerCase() == xItems[i].replace(/^\s+|\s+$/g, "").substring(0, 1).toLowerCase()) return index = i, 
                        setFocus.apply(items[index]);
                        for (i = 0; i < index; i++) if (l.toLowerCase() == xItems[i].replace(/^\s+|\s+$/g, "").substring(0, 1).toLowerCase()) return index = i, 
                        setFocus.apply(items[index]);
                    }(String.fromCharCode(k)), ev.preventDefault()));
                },
                click: function(ev) {
                    $ACC.hasClass(this, config.folderClass || "submenu") ? "true" != $ACC.getAttr(this, "aria-disabled") ? $ACC.trigger(this, "popupsubmenu") : dc.top.close() : $ACC.trigger(this, "menulink"), 
                    ev.preventDefault();
                }
            });
        }));
        $ACC.query(items, function(i, o) {
            $ACC.setAttr(o, "aria-setsize", items.length);
        }), setFocus.apply(items[index]);
    }), addDescribedby = function(obj, cn) {
        if (!obj) return null;
        for (var o = $ACC.isArray(obj) ? obj : [ obj ], names = cn.split(" "), i = 0; i < o.length; i++) for (var l, n = 0; n < names.length; n++) hasDescribedby(o[i], names[n]) || (l = (l = $ACC.getAttr(o[i], "aria-describedby")) || "", 
        $ACC.setAttr(o[i], "aria-describedby", (l + " " + names[n]).replace(/^\s+|\s+$/g, "")));
        return obj;
    }, hasDescribedby = function(obj, cn) {
        var l = $ACC.getAttr(obj, "aria-describedby");
        if (!obj || !l) return !1;
        for (var names = cn.split(" "), i = 0, n = 0; n < names.length; n++) -1 !== l.indexOf(names[n]) && (i += 1);
        return i === names.length;
    };
    $ACC.bind(window, "resize", function() {
        $ACC.find("*", function(dc) {
            dc.controlType && "MenuControl" == dc.controlType && dc.loaded && dc.close();
        });
    });
}(), function() {
    $ACC.setTabs = function(selector, overrides, useARIA, context, callback) {
        var tabIds = [], wheel = [], autoStartId = "", overrides = overrides || {}, context = context || document, tabs = $ACC.query(selector, context, function(i, o) {
            $ACC.reg[o.id] && ((tdc = $ACC.reg[o.id]).fn.sraCSSObj && tdc.fn.sraCSSObj.parentNode.removeChild(tdc.fn.sraCSSObj), 
            tdc.returnFocus = !1, tdc.close(), tdc.returnFocus = !0);
            var d, tdc = o.id || $ACC.genId(), ovrs = {}, isInternal = $ACC.getAttr(o, "data-internal");
            ovrs.id = tdc, ovrs.role = $ACC.getAttr(o, "data-role") || "Tab", ovrs.autoStart = !!$ACC.getAttr(o, "data-defaultopen"), 
            ovrs.autoStart && (autoStartId = i), ovrs.trigger = o, ovrs.mode = "number" == typeof overrides.mode ? overrides.mode : overrides.preload ? 0 : 1, 
            ovrs.source = isInternal ? (i = $ACC.getEl(isInternal)) ? i.parentNode.removeChild(i) : $ACC.reg[o.id] && $ACC.reg[o.id].source : (d = $ACC.createEl("div"), 
            isInternal = (isInternal = $ACC.getAttr(o, "data-src")).replace("#", " #"), 
            overrides.preload ? ($ACC.load(d, isInternal, function() {
                overrides.preloadImages && ($ACC.getEl(imgLoaderId) || document.body.appendChild($ACC.createEl("div", {
                    id: imgLoaderId
                }, $ACC.sraCSS)), overrides.imgLoader = $ACC.getEl(imgLoaderId), 
                $ACC.query("img", d, function(i, o) {
                    o.src && $ACC.query('img[src="' + o.src + '"]', overrides.imgLoader).length < 1 && overrides.imgLoader.appendChild($ACC.createEl("img", {
                        src: o.src,
                        alt: ""
                    }));
                }));
            }), d) : isInternal), ovrs.isStatic = "#" + $ACC.getAttr(o, "data-insert"), 
            ovrs.showHiddenBounds = overrides.showHiddenBounds || !1, ovrs.showHiddenClose = overrides.showHiddenClose || !1, 
            ovrs.bind = "click", ovrs.ariaLevel = $ACC.getAttr(o, "data-headinglvl") || overrides.ariaLevel || 3, 
            ovrs.isTab = !useARIA, ovrs.tabRole = useARIA ? "" : overrides.tabRole || "Tab", 
            ovrs.tabState = useARIA ? "" : overrides.tabState || "Selected", ovrs.toggleClass = overrides.toggleClass || "active", 
            ovrs.allowCascade = !0, ovrs.runDuring = function(dc) {
                useARIA && ($ACC.setAttr(dc.triggerObj, "aria-controls", dc.accDCObjId), 
                $ACC.setAttr(dc.accDCObj, {
                    role: "tabpanel",
                    tabindex: "0",
                    "aria-labelledby": $ACC.getAttr(dc.triggerObj, "id")
                }));
            }, ovrs.runAfter = function(dc) {
                $ACC.query(selector, context, function(j, p) {
                    $ACC.remClass(p, dc.toggleClass), useARIA && $ACC.setAttr(p, {
                        "aria-expanded": p == dc.triggerObj ? "true" : "false",
                        "aria-selected": p == dc.triggerObj ? "true" : "false"
                    });
                }), $ACC.addClass(dc.triggerObj, dc.toggleClass), callback && "function" == typeof callback && callback.apply(dc.triggerObj, [ dc ]);
            }, ovrs.runAfterClose = function(dc) {
                $ACC.query(selector, context, function(j, p) {
                    $ACC.remClass(p, dc.toggleClass), useARIA && $ACC.setAttr(p, {
                        "aria-expanded": "false"
                    });
                });
            }, wheel.push(ovrs), tabIds.push(tdc);
        });
        return useARIA ? (setClosest(tabs[0], tabIds.join(" ")), createARIATabs(selector, context, autoStartId)) : checkTabs(selector, context), 
        $ACC(wheel, overrides), tabIds;
    };
    var createARIATabs = function(selector, context, start) {
        function setFocus(s) {
            var i = $ACC.inArray(this, tabs);
            -1 !== i && (index = i), cur && $ACC.setAttr(cur, {
                tabindex: "-1",
                "aria-selected": "false"
            }), cur = this, $ACC.setAttr(cur, {
                tabindex: "0",
                "aria-selected": "true"
            }), s || cur.focus(), AST.controller.fireEvent("tab-active-" + $(cur).attr("id").replace("-link", ""));
        }
        var cur = null, index = start || 0, xItems = [], tabs = $ACC.query(selector, context, function(z) {
            xItems.push($ACC.getText(this)), $ACC.setAttr(this, {
                tabindex: "-1",
                "aria-posinset": z + 1,
                "aria-expanded": "false",
                "aria-selected": "false",
                "aria-label": $ACC.getText(this)
            }), $ACC.bind(this, {
                click: function(ev) {
                    setFocus.apply(this, [ !0 ]), ev.preventDefault();
                },
                keydown: function(ev) {
                    var k = ev.which || ev.keyCode;
                    35 <= k && k <= 40 ? (37 == k || 38 == k ? index = 0 === index ? tabs.length - 1 : index - 1 : 39 == k || 40 == k ? index = index === tabs.length - 1 ? 0 : index + 1 : 35 == k ? index = tabs.length - 1 : 36 == k && (index = 0), 
                    setFocus.apply(tabs[index]), ev.preventDefault()) : 13 == k || 32 == k ? ($ACC.trigger(tabs[index], "click"), 
                    ev.preventDefault()) : (48 <= k && k <= 57 || 65 <= k && k <= 90) && (function(l) {
                        for (var i = index + 1; i <= tabs.length - 1; i++) if (l.toLowerCase() == xItems[i].replace(/^\s+|\s+$/g, "").substring(0, 1).toLowerCase()) return index = i, 
                        setFocus.apply(tabs[index]);
                        for (i = 0; i < index; i++) if (l.toLowerCase() == xItems[i].replace(/^\s+|\s+$/g, "").substring(0, 1).toLowerCase()) return index = i, 
                        setFocus.apply(tabs[index]);
                    }(String.fromCharCode(k)), ev.preventDefault());
                }
            });
        });
        $ACC.query(tabs, function(i, o) {
            $ACC.setAttr(o, "aria-setsize", tabs.length);
        }), tabs.length && (cur = tabs[0], $ACC.setAttr(cur, "tabindex", 0));
    }, checkTabs = function(selector, context) {
        $ACC.query(selector, context, function(i, o) {
            var tn = o.nodeName.toLowerCase();
            "a" != tn && "button" != tn && ($ACC.setAttr(o, {
                role: "link",
                tabindex: "0"
            }), $ACC.bind(o, "keydown", function(ev) {
                13 == (ev.which || ev.keyCode) && ($ACC.trigger(o, "click"), ev.preventDefault());
            }));
        });
    }, imgLoaderId = "i" + $ACC.genId(), setClosest = function(start, owns) {
        for (var i = 0; start; ) {
            if ((start = start.parentNode) && 0 < i && "tablist" == $ACC.getAttr(start, "role")) return void $ACC.setAttr(start, "aria-owns", owns);
            i++;
        }
    };
}(), $ACC.bootstrap = function(context) {
    if (context = context && 1 === context.nodeType ? context : document, $ACC.setCalendar && $ACC.query("a.accCalendar, button.accCalendar", context, function(i, o) {
        $ACC.reg[o.id] && $ACC.reg[o.id].loaded && ((tdc = $ACC.reg[o.id]).returnFocus = !1, 
        tdc.close(), tdc.returnFocus = !0);
        var tdc, targ = $ACC.query('input[name="' + $ACC.getAttr(o, "data-name") + '"]', context)[0];
        $ACC.setCalendar(o.id, o, targ, !1, function(ev, dc) {
            targ.value = ("0" + (dc.range.current.month + 1)).slice(-2) + "/" + ("0" + dc.range.current.mDay).slice(-2) + "/" + dc.range.current.year, 
            dc.close();
        }, {
            autoPosition: 8,
            cssObj: {
                position: "absolute",
                zIndex: 1
            },
            disabledTxt: "Disabled",
            ajax: function(dc, save) {
                var targ = $ACC.query('input[name="' + $ACC.getAttr(dc.triggerObj, "data-name") + '"]', context)[0], targ = isNaN(Date.parse(targ.value)) ? new Date() : new Date(targ.value), targ = {
                    day: targ.getDate(),
                    month: targ.getMonth(),
                    year: targ.getFullYear(),
                    weekDay: targ.getDay()
                };
                dc.firstResetDate || (dc.firstResetDate = !0, dc.range.current.month = targ.month, 
                dc.range.current.mDay = targ.day, dc.range.current.wDay = targ.weekDay, 
                dc.range.current.year = targ.year), dc.open();
            }
        });
    }), $ACC.setModal && $ACC.query("a.accModal, button.accModal", context, function(i, o) {
        $ACC.reg[o.id] && $ACC.reg[o.id].loaded && ((tdc = $ACC.reg[o.id]).returnFocus = !1, 
        tdc.close(), tdc.returnFocus = !0);
        var tdc = $ACC.getAttr(o, "data-src"), cid = $ACC.getEl($ACC.getAttr(o, "data-internal")) || (tdc ? null : $ACC.reg[o.id] && $ACC.reg[o.id].source);
        (cid || tdc) && $ACC.setModal({
            id: o.id,
            role: $ACC.getAttr(o, "data-role") || "Modal",
            source: cid && 1 === cid.nodeType ? cid : tdc.replace("#", " #"),
            mode: cid && 1 === cid.nodeType ? 0 : null,
            trigger: o,
            click: function(ev, dc) {
                ev.stopPropagation();
            },
            runAfter: function(dc) {
                $ACC.getScript("js/config/modals.js"), dc.backdrop = $ACC.createEl("div", null, null, "modalBackdrop", document.createTextNode(" ")), 
                dc.accDCObj.parentNode.insertBefore(dc.backdrop, dc.accDCObj), $ACC.bind(dc.backdrop, "click", function(ev) {
                    dc.close(), ev.stopPropagation();
                });
            },
            runAfterClose: function(dc) {
                dc.backdrop && dc.backdrop.parentNode.removeChild(dc.backdrop);
            },
            className: "modal",
            closeClassName: "lbClose",
            announce: !0
        });
    }), $ACC.setPopup && $ACC.query("a.accPopup, button.accPopup", context, function(i, o) {
        $ACC.reg[o.id] && $ACC.reg[o.id].loaded && ((tdc = $ACC.reg[o.id]).returnFocus = !1, 
        tdc.close(), tdc.returnFocus = !0);
        var tdc = $ACC.getAttr(o, "data-src"), cid = $ACC.getEl($ACC.getAttr(o, "data-internal")) || (tdc ? null : $ACC.reg[o.id] && $ACC.reg[o.id].source), autoPosition = parseInt($ACC.getAttr(o, "data-autoposition")), offsetLeft = parseInt($ACC.getAttr(o, "data-offsetleft")), offsetTop = parseInt($ACC.getAttr(o, "data-offsettop"));
        (cid || tdc) && $ACC.setPopup({
            id: o.id,
            role: $ACC.getAttr(o, "data-role") || "Popup",
            accStart: "Start",
            accEnd: "End",
            source: cid && 1 === cid.nodeType ? cid : tdc.replace("#", " #"),
            mode: cid && 1 === cid.nodeType ? 0 : null,
            trigger: o,
            autoPosition: isNaN(autoPosition) ? 3 : autoPosition,
            offsetLeft: isNaN(offsetLeft) ? 10 : offsetLeft,
            offsetTop: isNaN(offsetTop) ? -20 : offsetTop,
            className: "popup",
            closeClassName: "popupClose",
            ariaLevel: 2
        });
    }), $ACC.setTooltip && $ACC.query("a.accTooltip, button.accTooltip, input.accTooltip, select.accTooltip", context, function(i, o) {
        $ACC.reg[o.id] && $ACC.reg[o.id].loaded && ((tdc = $ACC.reg[o.id]).returnFocus = !1, 
        tdc.close(), tdc.returnFocus = !0);
        var tdc = $ACC.getAttr(o, "data-src"), cid = $ACC.getEl($ACC.getAttr(o, "data-internal")) || (tdc ? null : $ACC.reg[o.id] && $ACC.reg[o.id].source), autoPosition = parseInt($ACC.getAttr(o, "data-autoposition")), offsetLeft = parseInt($ACC.getAttr(o, "data-offsetleft")), offsetTop = parseInt($ACC.getAttr(o, "data-offsettop"));
        (cid || tdc) && $ACC.setTooltip({
            id: o.id,
            role: $ACC.getAttr(o, "data-role") || "tooltip",
            source: cid && 1 === cid.nodeType ? cid : tdc.replace("#", " #"),
            mode: cid && 1 === cid.nodeType ? 0 : null,
            trigger: o,
            autoPosition: isNaN(autoPosition) ? 3 : autoPosition,
            offsetLeft: isNaN(offsetLeft) ? 10 : offsetLeft,
            offsetTop: isNaN(offsetTop) ? 0 : offsetTop
        });
    }), $ACC.setBanner && $ACC.query("div.accBanner", context, function(i, o) {
        var tdc, p = $ACC.getAttr(o, "data-src");
        p && ($ACC.reg[o.id] && $ACC.reg[o.id].loaded && ((tdc = $ACC.reg[o.id]).returnFocus = !1, 
        tdc.close(), tdc.returnFocus = !0), $ACC.setBanner({
            id: o.id,
            role: $ACC.getAttr(o, "data-role") || "Banner",
            accStart: "Start",
            accEnd: "End",
            source: p.replace("#", " #"),
            isStatic: o,
            showHiddenClose: !0,
            displayHiddenClose: !1,
            closeClassName: "closeLnk",
            cssObj: {},
            autoFix: 0,
            ariaLevel: 2,
            mouseOut: function(ev, dc) {}
        }));
    }), $ACC.generateAccordion) {
        var track = {};
        for (n in $ACC.query(".accAccordion", context, function(i, o) {
            var g = $ACC.getAttr(o, "data-group");
            g && (track[g] || (track[g] = []), track[g].push(o));
        }), track) $ACC.generateAccordion(track[n], {
            accordionRole: $ACC.getAttr(track[n][0], "data-role") || "Accordion",
            accordionState: $ACC.getAttr(track[n][0], "data-openstate") || "Expanded",
            toggleClass: "open",
            preload: !0,
            preloadImages: !0
        }, context, function(dc) {});
    }
    if ($ACC.setCarousel && $ACC.query("div.accCarousel", context, function(i, o) {
        var p = $ACC.getAttr(o, "data-src"), d = $ACC.getAttr(o, "data-defaultopen");
        p && $ACC.setCarousel(o, p, d, {
            complete: function(dc) {},
            btnPrev: function(ev, dc) {},
            btnNext: function(ev, dc) {},
            btnPrevG: function(ev, dc) {},
            btnNextG: function(ev, dc) {}
        });
    }), $ACC.setTree && $ACC.query("div.accTree", context, function(i, o) {
        var p = $ACC.getAttr(o, "data-src"), t = $ACC.getAttr(o, "data-type");
        p && ("google-map" == t && $ACC.getScript("js/config/google.js"), $ACC.setTree({
            id: o.id,
            path: p,
            title: $ACC.getAttr(o, "data-label") || "TreeView",
            container: o,
            bind: "focus",
            callback: function(ev, dc) {
                var i, lat, lng, zoom;
                "google-map" == t && (dc.tmp && clearTimeout(dc.tmp), i = $ACC.inArray(this, dc.tree.childNodes), 
                lat = dc.xmlNodes[i].attributes.getNamedItem("lat").value, lng = dc.xmlNodes[i].attributes.getNamedItem("lng").value, 
                zoom = dc.xmlNodes[i].attributes.getNamedItem("zoom").value, dc.tmp = setTimeout(function() {
                    $ACC.reg.map.google.set(lat, lng, zoom);
                }, 1e3));
            }
        }));
    }), $ACC.setMenu && AST.Util.bootstrapMenus(), $ACC.setTabs) {
        track = {};
        for (n in $ACC.query(".accTab.unbound", context, function(i, o) {
            var g = $ACC.getAttr(o, "data-group");
            g && (track[g] || (track[g] = []), track[g].push(o)), jQuery(o).removeClass("unbound");
        }), track) $ACC.setTabs(track[n], {
            preload: !0,
            preloadImages: !0,
            toggleClass: "active",
            ariaLevel: 2
        }, !0, context, function(dc) {});
    }
    var o;
    $ACC.makeScrollable && $ACC.query("div.accScrollable", context, function(i, o) {
        $ACC.makeScrollable(o);
    }), $ACC.setPopup && $ACC.query(".accToggle", context, function(i, o) {
        $ACC.reg[o.id] && $ACC.reg[o.id].loaded && $ACC.reg[o.id].close();
        var p = $ACC.getAttr(o, "data-src"), cid = $ACC.getEl($ACC.getAttr(o, "data-internal")) || (p ? null : $ACC.reg[o.id] && $ACC.reg[o.id].source), isStatic = $ACC.getEl($ACC.getAttr(o, "data-insert")), state = !!$ACC.getAttr(o, "data-defaultopen"), toggleClass = $ACC.getAttr(o, "data-toggleclass") || "togglePressed";
        (cid || p) && isStatic && ($ACC.setAttr(o, {
            tabindex: "0",
            "aria-pressed": "false"
        }), $ACC.bind(o, "keydown", function(ev) {
            var k = ev.which || ev.keyCode;
            13 != k && 32 != k || ($ACC.trigger(o, "click"), ev.preventDefault());
        }), $ACC.setPopup({
            id: o.id,
            role: "Region",
            bind: "click",
            trigger: o,
            isToggle: !0,
            source: cid && 1 === cid.nodeType ? cid : p.replace("#", " #"),
            mode: cid && 1 === cid.nodeType ? 0 : null,
            isStatic: isStatic,
            autoStart: !1,
            autoPosition: 0,
            cssObj: {
                position: ""
            },
            runDuring: function(dc) {
                $ACC.setAttr(dc.accDCObj, {
                    "aria-labelledby": o.id
                });
            },
            runBeforeClose: function(dc) {},
            runAfter: function(dc) {
                $ACC.remAttr(dc.accDCObj, "aria-label"), $ACC.addClass(o, toggleClass), 
                $ACC.setAttr(dc.triggerObj, "aria-pressed", "true");
            },
            runAfterClose: function(dc) {
                $ACC.remClass(o, toggleClass), $ACC.setAttr(dc.triggerObj, "aria-pressed", "false");
            },
            keyDown: function(ev, dc) {},
            announce: !1,
            forceFocus: !1,
            returnFocus: !1,
            className: "toggle-section",
            showHiddenBounds: !1
        }), state && $ACC.trigger(o, "click"));
    }), $ACC.setFootnotes && (o = $ACC.query("span.accFootnote", context)[0], $ACC.setFootnotes("span.accFootnote", context, {
        fnText: $ACC.getAttr(o, "data-fntext") || "Footnote",
        fnChar: $ACC.getAttr(o, "data-fnchar") || "&#8224;",
        backText: $ACC.getAttr(o, "data-backtext") || "Back to Footnote"
    }));
}, function(t) {
    "use strict";
    "function" == typeof define && define.amd ? define([ "jquery" ], t) : t(jQuery);
}(function(V) {
    "use strict";
    V.ui = V.ui || {}, V.ui.version = "1.13.1";
    var n, s, x, k, o, l, h, c, u, C, i = 0, a = Array.prototype.hasOwnProperty, r = Array.prototype.slice;
    function D(t, e, i) {
        return [ parseFloat(t[0]) * (u.test(t[0]) ? e / 100 : 1), parseFloat(t[1]) * (u.test(t[1]) ? i / 100 : 1) ];
    }
    function I(t, e) {
        return parseInt(V.css(t, e), 10) || 0;
    }
    function T(t) {
        return null != t && t === t.window;
    }
    V.cleanData = (n = V.cleanData, function(t) {
        for (var e, i, s = 0; null != (i = t[s]); s++) (e = V._data(i, "events")) && e.remove && V(i).triggerHandler("remove");
        n(t);
    }), V.widget = function(t, i, e) {
        var s, n, o, a = {}, r = t.split(".")[0], l = r + "-" + (t = t.split(".")[1]);
        return e || (e = i, i = V.Widget), Array.isArray(e) && (e = V.extend.apply(null, [ {} ].concat(e))), 
        V.expr.pseudos[l.toLowerCase()] = function(t) {
            return !!V.data(t, l);
        }, V[r] = V[r] || {}, s = V[r][t], n = V[r][t] = function(t, e) {
            if (!this || !this._createWidget) return new n(t, e);
            arguments.length && this._createWidget(t, e);
        }, V.extend(n, s, {
            version: e.version,
            _proto: V.extend({}, e),
            _childConstructors: []
        }), (o = new i()).options = V.widget.extend({}, o.options), V.each(e, function(e, s) {
            function n() {
                return i.prototype[e].apply(this, arguments);
            }
            function o(t) {
                return i.prototype[e].apply(this, t);
            }
            a[e] = "function" == typeof s ? function() {
                var t, e = this._super, i = this._superApply;
                return this._super = n, this._superApply = o, t = s.apply(this, arguments), 
                this._super = e, this._superApply = i, t;
            } : s;
        }), n.prototype = V.widget.extend(o, {
            widgetEventPrefix: s && o.widgetEventPrefix || t
        }, a, {
            constructor: n,
            namespace: r,
            widgetName: t,
            widgetFullName: l
        }), s ? (V.each(s._childConstructors, function(t, e) {
            var i = e.prototype;
            V.widget(i.namespace + "." + i.widgetName, n, e._proto);
        }), delete s._childConstructors) : i._childConstructors.push(n), V.widget.bridge(t, n), 
        n;
    }, V.widget.extend = function(t) {
        for (var e, i, s = r.call(arguments, 1), n = 0, o = s.length; n < o; n++) for (e in s[n]) i = s[n][e], 
        a.call(s[n], e) && void 0 !== i && (V.isPlainObject(i) ? t[e] = V.isPlainObject(t[e]) ? V.widget.extend({}, t[e], i) : V.widget.extend({}, i) : t[e] = i);
        return t;
    }, V.widget.bridge = function(o, e) {
        var a = e.prototype.widgetFullName || o;
        V.fn[o] = function(i) {
            var t = "string" == typeof i, s = r.call(arguments, 1), n = this;
            return t ? this.length || "instance" !== i ? this.each(function() {
                var t, e = V.data(this, a);
                return "instance" === i ? (n = e, !1) : e ? "function" != typeof e[i] || "_" === i.charAt(0) ? V.error("no such method '" + i + "' for " + o + " widget instance") : (t = e[i].apply(e, s)) !== e && void 0 !== t ? (n = t && t.jquery ? n.pushStack(t.get()) : t, 
                !1) : void 0 : V.error("cannot call methods on " + o + " prior to initialization; attempted to call method '" + i + "'");
            }) : n = void 0 : (s.length && (i = V.widget.extend.apply(null, [ i ].concat(s))), 
            this.each(function() {
                var t = V.data(this, a);
                t ? (t.option(i || {}), t._init && t._init()) : V.data(this, a, new e(i, this));
            })), n;
        };
    }, V.Widget = function() {}, V.Widget._childConstructors = [], V.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            classes: {},
            disabled: !1,
            create: null
        },
        _createWidget: function(t, e) {
            e = V(e || this.defaultElement || this)[0], this.element = V(e), this.uuid = i++, 
            this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = V(), 
            this.hoverable = V(), this.focusable = V(), this.classesElementLookup = {}, 
            e !== this && (V.data(e, this.widgetFullName, this), this._on(!0, this.element, {
                remove: function(t) {
                    t.target === e && this.destroy();
                }
            }), this.document = V(e.style ? e.ownerDocument : e.document || e), 
            this.window = V(this.document[0].defaultView || this.document[0].parentWindow)), 
            this.options = V.widget.extend({}, this.options, this._getCreateOptions(), t), 
            this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), 
            this._trigger("create", null, this._getCreateEventData()), this._init();
        },
        _getCreateOptions: function() {
            return {};
        },
        _getCreateEventData: V.noop,
        _create: V.noop,
        _init: V.noop,
        destroy: function() {
            var i = this;
            this._destroy(), V.each(this.classesElementLookup, function(t, e) {
                i._removeClass(e, t);
            }), this.element.off(this.eventNamespace).removeData(this.widgetFullName), 
            this.widget().off(this.eventNamespace).removeAttr("aria-disabled"), 
            this.bindings.off(this.eventNamespace);
        },
        _destroy: V.noop,
        widget: function() {
            return this.element;
        },
        option: function(t, e) {
            var i, s, n, o = t;
            if (0 === arguments.length) return V.widget.extend({}, this.options);
            if ("string" == typeof t) if (o = {}, t = (i = t.split(".")).shift(), 
            i.length) {
                for (s = o[t] = V.widget.extend({}, this.options[t]), n = 0; n < i.length - 1; n++) s[i[n]] = s[i[n]] || {}, 
                s = s[i[n]];
                if (t = i.pop(), 1 === arguments.length) return void 0 === s[t] ? null : s[t];
                s[t] = e;
            } else {
                if (1 === arguments.length) return void 0 === this.options[t] ? null : this.options[t];
                o[t] = e;
            }
            return this._setOptions(o), this;
        },
        _setOptions: function(t) {
            for (var e in t) this._setOption(e, t[e]);
            return this;
        },
        _setOption: function(t, e) {
            return "classes" === t && this._setOptionClasses(e), this.options[t] = e, 
            "disabled" === t && this._setOptionDisabled(e), this;
        },
        _setOptionClasses: function(t) {
            var e, i, s;
            for (e in t) s = this.classesElementLookup[e], t[e] !== this.options.classes[e] && s && s.length && (i = V(s.get()), 
            this._removeClass(s, e), i.addClass(this._classes({
                element: i,
                keys: e,
                classes: t,
                add: !0
            })));
        },
        _setOptionDisabled: function(t) {
            this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!t), 
            t && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus"));
        },
        enable: function() {
            return this._setOptions({
                disabled: !1
            });
        },
        disable: function() {
            return this._setOptions({
                disabled: !0
            });
        },
        _classes: function(n) {
            var o = [], a = this;
            function t(t, e) {
                for (var i, s = 0; s < t.length; s++) i = a.classesElementLookup[t[s]] || V(), 
                i = n.add ? (function() {
                    var i = [];
                    n.element.each(function(t, e) {
                        V.map(a.classesElementLookup, function(t) {
                            return t;
                        }).some(function(t) {
                            return t.is(e);
                        }) || i.push(e);
                    }), a._on(V(i), {
                        remove: "_untrackClassesElement"
                    });
                }(), V(V.uniqueSort(i.get().concat(n.element.get())))) : V(i.not(n.element).get()), 
                a.classesElementLookup[t[s]] = i, o.push(t[s]), e && n.classes[t[s]] && o.push(n.classes[t[s]]);
            }
            return (n = V.extend({
                element: this.element,
                classes: this.options.classes || {}
            }, n)).keys && t(n.keys.match(/\S+/g) || [], !0), n.extra && t(n.extra.match(/\S+/g) || []), 
            o.join(" ");
        },
        _untrackClassesElement: function(i) {
            var s = this;
            V.each(s.classesElementLookup, function(t, e) {
                -1 !== V.inArray(i.target, e) && (s.classesElementLookup[t] = V(e.not(i.target).get()));
            }), this._off(V(i.target));
        },
        _removeClass: function(t, e, i) {
            return this._toggleClass(t, e, i, !1);
        },
        _addClass: function(t, e, i) {
            return this._toggleClass(t, e, i, !0);
        },
        _toggleClass: function(t, e, i, s) {
            var n = "string" == typeof t || null === t;
            return (i = {
                extra: n ? e : i,
                keys: n ? t : e,
                element: n ? this.element : t,
                add: s = "boolean" == typeof s ? s : i
            }).element.toggleClass(this._classes(i), s), this;
        },
        _on: function(n, o, t) {
            var a, r = this;
            "boolean" != typeof n && (t = o, o = n, n = !1), t ? (o = a = V(o), 
            this.bindings = this.bindings.add(o)) : (t = o, o = this.element, a = this.widget()), 
            V.each(t, function(t, e) {
                function i() {
                    if (n || !0 !== r.options.disabled && !V(this).hasClass("ui-state-disabled")) return ("string" == typeof e ? r[e] : e).apply(r, arguments);
                }
                "string" != typeof e && (i.guid = e.guid = e.guid || i.guid || V.guid++);
                var s = t.match(/^([\w:-]*)\s*(.*)$/), t = s[1] + r.eventNamespace;
                (s = s[2]) ? a.on(t, s, i) : o.on(t, i);
            });
        },
        _off: function(t, e) {
            e = (e || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, 
            t.off(e), this.bindings = V(this.bindings.not(t).get()), this.focusable = V(this.focusable.not(t).get()), 
            this.hoverable = V(this.hoverable.not(t).get());
        },
        _delay: function(t, e) {
            var i = this;
            return setTimeout(function() {
                return ("string" == typeof t ? i[t] : t).apply(i, arguments);
            }, e || 0);
        },
        _hoverable: function(t) {
            this.hoverable = this.hoverable.add(t), this._on(t, {
                mouseenter: function(t) {
                    this._addClass(V(t.currentTarget), null, "ui-state-hover");
                },
                mouseleave: function(t) {
                    this._removeClass(V(t.currentTarget), null, "ui-state-hover");
                }
            });
        },
        _focusable: function(t) {
            this.focusable = this.focusable.add(t), this._on(t, {
                focusin: function(t) {
                    this._addClass(V(t.currentTarget), null, "ui-state-focus");
                },
                focusout: function(t) {
                    this._removeClass(V(t.currentTarget), null, "ui-state-focus");
                }
            });
        },
        _trigger: function(t, e, i) {
            var s, n, o = this.options[t];
            if (i = i || {}, (e = V.Event(e)).type = (t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t).toLowerCase(), 
            e.target = this.element[0], n = e.originalEvent) for (s in n) s in e || (e[s] = n[s]);
            return this.element.trigger(e, i), !("function" == typeof o && !1 === o.apply(this.element[0], [ e ].concat(i)) || e.isDefaultPrevented());
        }
    }, V.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(o, a) {
        V.Widget.prototype["_" + o] = function(e, t, i) {
            var s, n = (t = "string" == typeof t ? {
                effect: t
            } : t) ? !0 !== t && "number" != typeof t && t.effect || a : o;
            "number" == typeof (t = t || {}) ? t = {
                duration: t
            } : !0 === t && (t = {}), s = !V.isEmptyObject(t), t.complete = i, t.delay && e.delay(t.delay), 
            s && V.effects && V.effects.effect[n] ? e[o](t) : n !== o && e[n] ? e[n](t.duration, t.easing, i) : e.queue(function(t) {
                V(this)[o](), i && i.call(e[0]), t();
            });
        };
    }), V.widget, x = Math.max, k = Math.abs, o = /left|center|right/, l = /top|center|bottom/, 
    h = /[\+\-]\d+(\.[\d]+)?%?/, c = /^\w+/, u = /%$/, C = V.fn.position, V.position = {
        scrollbarWidth: function() {
            if (void 0 !== s) return s;
            var t, e = V("<div style='display:block;position:absolute;width:200px;height:200px;overflow:hidden;'><div style='height:300px;width:auto;'></div></div>"), i = e.children()[0];
            return V("body").append(e), t = i.offsetWidth, e.css("overflow", "scroll"), 
            t === (i = i.offsetWidth) && (i = e[0].clientWidth), e.remove(), s = t - i;
        },
        getScrollInfo: function(t) {
            var e = t.isWindow || t.isDocument ? "" : t.element.css("overflow-x"), i = t.isWindow || t.isDocument ? "" : t.element.css("overflow-y"), e = "scroll" === e || "auto" === e && t.width < t.element[0].scrollWidth;
            return {
                width: "scroll" === i || "auto" === i && t.height < t.element[0].scrollHeight ? V.position.scrollbarWidth() : 0,
                height: e ? V.position.scrollbarWidth() : 0
            };
        },
        getWithinInfo: function(t) {
            var e = V(t || window), i = T(e[0]), s = !!e[0] && 9 === e[0].nodeType;
            return {
                element: e,
                isWindow: i,
                isDocument: s,
                offset: i || s ? {
                    left: 0,
                    top: 0
                } : V(t).offset(),
                scrollLeft: e.scrollLeft(),
                scrollTop: e.scrollTop(),
                width: e.outerWidth(),
                height: e.outerHeight()
            };
        }
    }, V.fn.position = function(u) {
        if (!u || !u.of) return C.apply(this, arguments);
        var d, p, f, g, m, t, _ = "string" == typeof (u = V.extend({}, u)).of ? V(document).find(u.of) : V(u.of), v = V.position.getWithinInfo(u.within), b = V.position.getScrollInfo(v), y = (u.collision || "flip").split(" "), w = {}, e = 9 === (t = (e = _)[0]).nodeType ? {
            width: e.width(),
            height: e.height(),
            offset: {
                top: 0,
                left: 0
            }
        } : T(t) ? {
            width: e.width(),
            height: e.height(),
            offset: {
                top: e.scrollTop(),
                left: e.scrollLeft()
            }
        } : t.preventDefault ? {
            width: 0,
            height: 0,
            offset: {
                top: t.pageY,
                left: t.pageX
            }
        } : {
            width: e.outerWidth(),
            height: e.outerHeight(),
            offset: e.offset()
        };
        return _[0].preventDefault && (u.at = "left top"), p = e.width, f = e.height, 
        m = V.extend({}, g = e.offset), V.each([ "my", "at" ], function() {
            var t, e, i = (u[this] || "").split(" ");
            (i = 1 === i.length ? o.test(i[0]) ? i.concat([ "center" ]) : l.test(i[0]) ? [ "center" ].concat(i) : [ "center", "center" ] : i)[0] = o.test(i[0]) ? i[0] : "center", 
            i[1] = l.test(i[1]) ? i[1] : "center", t = h.exec(i[0]), e = h.exec(i[1]), 
            w[this] = [ t ? t[0] : 0, e ? e[0] : 0 ], u[this] = [ c.exec(i[0])[0], c.exec(i[1])[0] ];
        }), 1 === y.length && (y[1] = y[0]), "right" === u.at[0] ? m.left += p : "center" === u.at[0] && (m.left += p / 2), 
        "bottom" === u.at[1] ? m.top += f : "center" === u.at[1] && (m.top += f / 2), 
        d = D(w.at, p, f), m.left += d[0], m.top += d[1], this.each(function() {
            var i, t, a = V(this), r = a.outerWidth(), l = a.outerHeight(), e = I(this, "marginLeft"), s = I(this, "marginTop"), n = r + e + I(this, "marginRight") + b.width, o = l + s + I(this, "marginBottom") + b.height, h = V.extend({}, m), c = D(w.my, a.outerWidth(), a.outerHeight());
            "right" === u.my[0] ? h.left -= r : "center" === u.my[0] && (h.left -= r / 2), 
            "bottom" === u.my[1] ? h.top -= l : "center" === u.my[1] && (h.top -= l / 2), 
            h.left += c[0], h.top += c[1], i = {
                marginLeft: e,
                marginTop: s
            }, V.each([ "left", "top" ], function(t, e) {
                V.ui.position[y[t]] && V.ui.position[y[t]][e](h, {
                    targetWidth: p,
                    targetHeight: f,
                    elemWidth: r,
                    elemHeight: l,
                    collisionPosition: i,
                    collisionWidth: n,
                    collisionHeight: o,
                    offset: [ d[0] + c[0], d[1] + c[1] ],
                    my: u.my,
                    at: u.at,
                    within: v,
                    elem: a
                });
            }), u.using && (t = function(t) {
                var e = g.left - h.left, i = e + p - r, s = g.top - h.top, n = s + f - l, o = {
                    target: {
                        element: _,
                        left: g.left,
                        top: g.top,
                        width: p,
                        height: f
                    },
                    element: {
                        element: a,
                        left: h.left,
                        top: h.top,
                        width: r,
                        height: l
                    },
                    horizontal: i < 0 ? "left" : 0 < e ? "right" : "center",
                    vertical: n < 0 ? "top" : 0 < s ? "bottom" : "middle"
                };
                p < r && k(e + i) < p && (o.horizontal = "center"), f < l && k(s + n) < f && (o.vertical = "middle"), 
                x(k(e), k(i)) > x(k(s), k(n)) ? o.important = "horizontal" : o.important = "vertical", 
                u.using.call(this, t, o);
            }), a.offset(V.extend(h, {
                using: t
            }));
        });
    }, V.ui.position = {
        fit: {
            left: function(t, e) {
                var i = e.within, s = i.isWindow ? i.scrollLeft : i.offset.left, n = i.width, o = t.left - e.collisionPosition.marginLeft, a = s - o, r = o + e.collisionWidth - n - s;
                e.collisionWidth > n ? 0 < a && r <= 0 ? (i = t.left + a + e.collisionWidth - n - s, 
                t.left += a - i) : t.left = !(0 < r && a <= 0) && r < a ? s + n - e.collisionWidth : s : 0 < a ? t.left += a : 0 < r ? t.left -= r : t.left = x(t.left - o, t.left);
            },
            top: function(t, e) {
                var i = e.within, s = i.isWindow ? i.scrollTop : i.offset.top, n = e.within.height, o = t.top - e.collisionPosition.marginTop, a = s - o, r = o + e.collisionHeight - n - s;
                e.collisionHeight > n ? 0 < a && r <= 0 ? (i = t.top + a + e.collisionHeight - n - s, 
                t.top += a - i) : t.top = !(0 < r && a <= 0) && r < a ? s + n - e.collisionHeight : s : 0 < a ? t.top += a : 0 < r ? t.top -= r : t.top = x(t.top - o, t.top);
            }
        },
        flip: {
            left: function(t, e) {
                var s = (i = e.within).offset.left + i.scrollLeft, n = i.width, o = i.isWindow ? i.scrollLeft : i.offset.left, r = (a = t.left - e.collisionPosition.marginLeft) - o, l = a + e.collisionWidth - n - o, h = "left" === e.my[0] ? -e.elemWidth : "right" === e.my[0] ? e.elemWidth : 0, i = "left" === e.at[0] ? e.targetWidth : "right" === e.at[0] ? -e.targetWidth : 0, a = -2 * e.offset[0];
                r < 0 ? ((s = t.left + h + i + a + e.collisionWidth - n - s) < 0 || s < k(r)) && (t.left += h + i + a) : 0 < l && (0 < (o = t.left - e.collisionPosition.marginLeft + h + i + a - o) || k(o) < l) && (t.left += h + i + a);
            },
            top: function(t, e) {
                var s = (i = e.within).offset.top + i.scrollTop, n = i.height, o = i.isWindow ? i.scrollTop : i.offset.top, r = (a = t.top - e.collisionPosition.marginTop) - o, l = a + e.collisionHeight - n - o, h = "top" === e.my[1] ? -e.elemHeight : "bottom" === e.my[1] ? e.elemHeight : 0, i = "top" === e.at[1] ? e.targetHeight : "bottom" === e.at[1] ? -e.targetHeight : 0, a = -2 * e.offset[1];
                r < 0 ? ((s = t.top + h + i + a + e.collisionHeight - n - s) < 0 || s < k(r)) && (t.top += h + i + a) : 0 < l && (0 < (o = t.top - e.collisionPosition.marginTop + h + i + a - o) || k(o) < l) && (t.top += h + i + a);
            }
        },
        flipfit: {
            left: function() {
                V.ui.position.flip.left.apply(this, arguments), V.ui.position.fit.left.apply(this, arguments);
            },
            top: function() {
                V.ui.position.flip.top.apply(this, arguments), V.ui.position.fit.top.apply(this, arguments);
            }
        }
    }, V.ui.position, V.extend(V.expr.pseudos, {
        data: V.expr.createPseudo ? V.expr.createPseudo(function(e) {
            return function(t) {
                return !!V.data(t, e);
            };
        }) : function(t, e, i) {
            return !!V.data(t, i[3]);
        }
    }), V.fn.extend({
        disableSelection: (t = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown", 
        function() {
            return this.on(t + ".ui-disableSelection", function(t) {
                t.preventDefault();
            });
        }),
        enableSelection: function() {
            return this.off(".ui-disableSelection");
        }
    });
    var t, d = V, p = {}, e = p.toString, f = /^([\-+])=\s*(\d+\.?\d*)/, g = [ {
        re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        parse: function(t) {
            return [ t[1], t[2], t[3], t[4] ];
        }
    }, {
        re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        parse: function(t) {
            return [ 2.55 * t[1], 2.55 * t[2], 2.55 * t[3], t[4] ];
        }
    }, {
        re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/,
        parse: function(t) {
            return [ parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16), t[4] ? (parseInt(t[4], 16) / 255).toFixed(2) : 1 ];
        }
    }, {
        re: /#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/,
        parse: function(t) {
            return [ parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16), t[4] ? (parseInt(t[4] + t[4], 16) / 255).toFixed(2) : 1 ];
        }
    }, {
        re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        space: "hsla",
        parse: function(t) {
            return [ t[1], t[2] / 100, t[3] / 100, t[4] ];
        }
    } ], m = d.Color = function(t, e, i, s) {
        return new d.Color.fn.parse(t, e, i, s);
    }, _ = {
        rgba: {
            props: {
                red: {
                    idx: 0,
                    type: "byte"
                },
                green: {
                    idx: 1,
                    type: "byte"
                },
                blue: {
                    idx: 2,
                    type: "byte"
                }
            }
        },
        hsla: {
            props: {
                hue: {
                    idx: 0,
                    type: "degrees"
                },
                saturation: {
                    idx: 1,
                    type: "percent"
                },
                lightness: {
                    idx: 2,
                    type: "percent"
                }
            }
        }
    }, v = {
        byte: {
            floor: !0,
            max: 255
        },
        percent: {
            max: 1
        },
        degrees: {
            mod: 360,
            floor: !0
        }
    }, b = m.support = {}, y = d("<p>")[0], w = d.each;
    function P(t) {
        return null == t ? t + "" : "object" == typeof t ? p[e.call(t)] || "object" : typeof t;
    }
    function M(t, e, i) {
        var s = v[e.type] || {};
        return null == t ? i || !e.def ? null : e.def : (t = s.floor ? ~~t : parseFloat(t), 
        isNaN(t) ? e.def : s.mod ? (t + s.mod) % s.mod : Math.min(s.max, Math.max(0, t)));
    }
    function S(s) {
        var n = m(), o = n._rgba = [];
        return s = s.toLowerCase(), w(g, function(t, e) {
            var i = (i = e.re.exec(s)) && e.parse(i), e = e.space || "rgba";
            if (i) return i = n[e](i), n[_[e].cache] = i[_[e].cache], o = n._rgba = i._rgba, 
            !1;
        }), o.length ? ("0,0,0,0" === o.join() && d.extend(o, B.transparent), n) : B[s];
    }
    function H(t, e, i) {
        return 6 * (i = (i + 1) % 1) < 1 ? t + (e - t) * i * 6 : 2 * i < 1 ? e : 3 * i < 2 ? t + (e - t) * (2 / 3 - i) * 6 : t;
    }
    y.style.cssText = "background-color:rgba(1,1,1,.5)", b.rgba = -1 < y.style.backgroundColor.indexOf("rgba"), 
    w(_, function(t, e) {
        e.cache = "_" + t, e.props.alpha = {
            idx: 3,
            type: "percent",
            def: 1
        };
    }), d.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(t, e) {
        p["[object " + e + "]"] = e.toLowerCase();
    }), (m.fn = d.extend(m.prototype, {
        parse: function(n, t, e, i) {
            if (void 0 === n) return this._rgba = [ null, null, null, null ], this;
            (n.jquery || n.nodeType) && (n = d(n).css(t), t = void 0);
            var o = this, s = P(n), a = this._rgba = [];
            return void 0 !== t && (n = [ n, t, e, i ], s = "array"), "string" === s ? this.parse(S(n) || B._default) : "array" === s ? (w(_.rgba.props, function(t, e) {
                a[e.idx] = M(n[e.idx], e);
            }), this) : "object" === s ? (w(_, n instanceof m ? function(t, e) {
                n[e.cache] && (o[e.cache] = n[e.cache].slice());
            } : function(t, i) {
                var s = i.cache;
                w(i.props, function(t, e) {
                    if (!o[s] && i.to) {
                        if ("alpha" === t || null == n[t]) return;
                        o[s] = i.to(o._rgba);
                    }
                    o[s][e.idx] = M(n[t], e, !0);
                }), o[s] && d.inArray(null, o[s].slice(0, 3)) < 0 && (null == o[s][3] && (o[s][3] = 1), 
                i.from && (o._rgba = i.from(o[s])));
            }), this) : void 0;
        },
        is: function(t) {
            var n = m(t), o = !0, a = this;
            return w(_, function(t, e) {
                var i, s = n[e.cache];
                return s && (i = a[e.cache] || e.to && e.to(a._rgba) || [], w(e.props, function(t, e) {
                    if (null != s[e.idx]) return o = s[e.idx] === i[e.idx];
                })), o;
            }), o;
        },
        _space: function() {
            var i = [], s = this;
            return w(_, function(t, e) {
                s[e.cache] && i.push(t);
            }), i.pop();
        },
        transition: function(t, a) {
            var e = (h = m(t))._space(), i = _[e], r = (t = 0 === this.alpha() ? m("transparent") : this)[i.cache] || i.to(t._rgba), l = r.slice(), h = h[i.cache];
            return w(i.props, function(t, e) {
                var i = e.idx, s = r[i], n = h[i], o = v[e.type] || {};
                null !== n && (null === s ? l[i] = n : (o.mod && (n - s > o.mod / 2 ? s += o.mod : s - n > o.mod / 2 && (s -= o.mod)), 
                l[i] = M((n - s) * a + s, e)));
            }), this[e](l);
        },
        blend: function(t) {
            if (1 === this._rgba[3]) return this;
            var e = this._rgba.slice(), i = e.pop(), s = m(t)._rgba;
            return m(d.map(e, function(t, e) {
                return (1 - i) * s[e] + i * t;
            }));
        },
        toRgbaString: function() {
            var t = "rgba(", e = d.map(this._rgba, function(t, e) {
                return null != t ? t : 2 < e ? 1 : 0;
            });
            return 1 === e[3] && (e.pop(), t = "rgb("), t + e.join() + ")";
        },
        toHslaString: function() {
            var t = "hsla(", e = d.map(this.hsla(), function(t, e) {
                return null == t && (t = 2 < e ? 1 : 0), e && e < 3 ? Math.round(100 * t) + "%" : t;
            });
            return 1 === e[3] && (e.pop(), t = "hsl("), t + e.join() + ")";
        },
        toHexString: function(t) {
            var e = this._rgba.slice(), i = e.pop();
            return t && e.push(~~(255 * i)), "#" + d.map(e, function(t) {
                return 1 === (t = (t || 0).toString(16)).length ? "0" + t : t;
            }).join("");
        },
        toString: function() {
            return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
        }
    })).parse.prototype = m.fn, _.hsla.to = function(t) {
        if (null == t[0] || null == t[1] || null == t[2]) return [ null, null, null, t[3] ];
        var e = t[0] / 255, i = t[1] / 255, s = t[2] / 255, n = t[3], o = Math.max(e, i, s), a = Math.min(e, i, s), r = o - a, t = .5 * (l = o + a), i = a === o ? 0 : e === o ? 60 * (i - s) / r + 360 : i === o ? 60 * (s - e) / r + 120 : 60 * (e - i) / r + 240, l = 0 == r ? 0 : t <= .5 ? r / l : r / (2 - l);
        return [ Math.round(i) % 360, l, t, null == n ? 1 : n ];
    }, _.hsla.from = function(t) {
        if (null == t[0] || null == t[1] || null == t[2]) return [ null, null, null, t[3] ];
        var e = t[0] / 360, i = t[1], s = t[2], t = t[3], s = 2 * s - (i = s <= .5 ? s * (1 + i) : s + i - s * i);
        return [ Math.round(255 * H(s, i, e + 1 / 3)), Math.round(255 * H(s, i, e)), Math.round(255 * H(s, i, e - 1 / 3)), t ];
    }, w(_, function(l, t) {
        var e = t.props, o = t.cache, a = t.to, r = t.from;
        m.fn[l] = function(t) {
            if (a && !this[o] && (this[o] = a(this._rgba)), void 0 === t) return this[o].slice();
            var i = P(t), s = "array" === i || "object" === i ? t : arguments, n = this[o].slice();
            return w(e, function(t, e) {
                null == (t = s["object" === i ? t : e.idx]) && (t = n[e.idx]), n[e.idx] = M(t, e);
            }), r ? ((t = m(r(n)))[o] = n, t) : m(n);
        }, w(e, function(a, r) {
            m.fn[a] || (m.fn[a] = function(t) {
                var i = P(t), s = "alpha" === a ? this._hsla ? "hsla" : "rgba" : l, n = this[s](), o = n[r.idx];
                return "undefined" === i ? o : ("function" === i && (i = P(t = t.call(this, o))), 
                null == t && r.empty ? this : ("string" === i && (i = f.exec(t)) && (t = o + parseFloat(i[2]) * ("+" === i[1] ? 1 : -1)), 
                n[r.idx] = t, this[s](n)));
            });
        });
    }), (m.hook = function(t) {
        t = t.split(" "), w(t, function(t, o) {
            d.cssHooks[o] = {
                set: function(t, e) {
                    var i, s, n = "";
                    if ("transparent" !== e && ("string" !== P(e) || (i = S(e)))) {
                        if (e = m(i || e), !b.rgba && 1 !== e._rgba[3]) {
                            for (s = "backgroundColor" === o ? t.parentNode : t; ("" === n || "transparent" === n) && s && s.style; ) try {
                                n = d.css(s, "backgroundColor"), s = s.parentNode;
                            } catch (t) {}
                            e = e.blend(n && "transparent" !== n ? n : "_default");
                        }
                        e = e.toRgbaString();
                    }
                    try {
                        t.style[o] = e;
                    } catch (t) {}
                }
            }, d.fx.step[o] = function(t) {
                t.colorInit || (t.start = m(t.elem, o), t.end = m(t.end), t.colorInit = !0), 
                d.cssHooks[o].set(t.elem, t.start.transition(t.end, t.pos));
            };
        });
    })("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor"), 
    d.cssHooks.borderColor = {
        expand: function(i) {
            var s = {};
            return w([ "Top", "Right", "Bottom", "Left" ], function(t, e) {
                s["border" + e + "Color"] = i;
            }), s;
        }
    };
    var z, A, O, N, E, W, F, L, R, Y, Q, J, Z, B = d.Color.names = {
        aqua: "#00ffff",
        black: "#000000",
        blue: "#0000ff",
        fuchsia: "#ff00ff",
        gray: "#808080",
        green: "#008000",
        lime: "#00ff00",
        maroon: "#800000",
        navy: "#000080",
        olive: "#808000",
        purple: "#800080",
        red: "#ff0000",
        silver: "#c0c0c0",
        teal: "#008080",
        white: "#ffffff",
        yellow: "#ffff00",
        transparent: [ null, null, null, 0 ],
        _default: "#ffffff"
    }, j = "ui-effects-", q = "ui-effects-style", K = "ui-effects-animated";
    function U(t) {
        var e, i, s = t.ownerDocument.defaultView ? t.ownerDocument.defaultView.getComputedStyle(t, null) : t.currentStyle, n = {};
        if (s && s.length && s[0] && s[s[0]]) for (i = s.length; i--; ) "string" == typeof s[e = s[i]] && (n[e.replace(/-([\da-z])/gi, function(t, e) {
            return e.toUpperCase();
        })] = s[e]); else for (e in s) "string" == typeof s[e] && (n[e] = s[e]);
        return n;
    }
    function X(t, e, i, s) {
        return t = {
            effect: t = V.isPlainObject(t) ? (e = t).effect : t
        }, "function" == typeof (e = null == e ? {} : e) && (s = e, i = null, e = {}), 
        "number" != typeof e && !V.fx.speeds[e] || (s = i, i = e, e = {}), "function" == typeof i && (s = i, 
        i = null), e && V.extend(t, e), i = i || e.duration, t.duration = V.fx.off ? 0 : "number" == typeof i ? i : i in V.fx.speeds ? V.fx.speeds[i] : V.fx.speeds._default, 
        t.complete = s || e.complete, t;
    }
    function $(t) {
        return !t || "number" == typeof t || V.fx.speeds[t] || "string" == typeof t && !V.effects.effect[t] || "function" == typeof t || "object" == typeof t && !t.effect;
    }
    function G(t, e) {
        var i = e.outerWidth(), e = e.outerHeight(), t = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/.exec(t) || [ "", 0, i, e, 0 ];
        return {
            top: parseFloat(t[1]) || 0,
            right: "auto" === t[2] ? i : parseFloat(t[2]),
            bottom: "auto" === t[3] ? e : parseFloat(t[3]),
            left: parseFloat(t[4]) || 0
        };
    }
    V.effects = {
        effect: {}
    }, N = [ "add", "remove", "toggle" ], E = {
        border: 1,
        borderBottom: 1,
        borderColor: 1,
        borderLeft: 1,
        borderRight: 1,
        borderTop: 1,
        borderWidth: 1,
        margin: 1,
        padding: 1
    }, V.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(t, e) {
        V.fx.step[e] = function(t) {
            ("none" !== t.end && !t.setAttr || 1 === t.pos && !t.setAttr) && (d.style(t.elem, e, t.end), 
            t.setAttr = !0);
        };
    }), V.fn.addBack || (V.fn.addBack = function(t) {
        return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
    }), V.effects.animateClass = function(n, t, e, i) {
        var o = V.speed(t, e, i);
        return this.queue(function() {
            function s() {
                V.each(N, function(t, e) {
                    n[e] && i[e + "Class"](n[e]);
                });
            }
            var i = V(this), t = i.attr("class") || "", e = (e = o.children ? i.find("*").addBack() : i).map(function() {
                return {
                    el: V(this),
                    start: U(this)
                };
            });
            s(), e = e.map(function() {
                return this.end = U(this.el[0]), this.diff = function(t, e) {
                    var i, s, n = {};
                    for (i in e) s = e[i], t[i] === s || E[i] || !V.fx.step[i] && isNaN(parseFloat(s)) || (n[i] = s);
                    return n;
                }(this.start, this.end), this;
            }), i.attr("class", t), e = e.map(function() {
                var t = this, e = V.Deferred(), i = V.extend({}, o, {
                    queue: !1,
                    complete: function() {
                        e.resolve(t);
                    }
                });
                return this.el.animate(this.diff, i), e.promise();
            }), V.when.apply(V, e.get()).done(function() {
                s(), V.each(arguments, function() {
                    var e = this.el;
                    V.each(this.diff, function(t) {
                        e.css(t, "");
                    });
                }), o.complete.call(i[0]);
            });
        });
    }, V.fn.extend({
        addClass: (O = V.fn.addClass, function(t, e, i, s) {
            return e ? V.effects.animateClass.call(this, {
                add: t
            }, e, i, s) : O.apply(this, arguments);
        }),
        removeClass: (A = V.fn.removeClass, function(t, e, i, s) {
            return 1 < arguments.length ? V.effects.animateClass.call(this, {
                remove: t
            }, e, i, s) : A.apply(this, arguments);
        }),
        toggleClass: (z = V.fn.toggleClass, function(t, e, i, s, n) {
            return "boolean" == typeof e || void 0 === e ? i ? V.effects.animateClass.call(this, e ? {
                add: t
            } : {
                remove: t
            }, i, s, n) : z.apply(this, arguments) : V.effects.animateClass.call(this, {
                toggle: t
            }, e, i, s);
        }),
        switchClass: function(t, e, i, s, n) {
            return V.effects.animateClass.call(this, {
                add: e,
                remove: t
            }, i, s, n);
        }
    }), V.expr && V.expr.pseudos && V.expr.pseudos.animated && (V.expr.pseudos.animated = (W = V.expr.pseudos.animated, 
    function(t) {
        return !!V(t).data(K) || W(t);
    })), !1 !== V.uiBackCompat && V.extend(V.effects, {
        save: function(t, e) {
            for (var i = 0, s = e.length; i < s; i++) null !== e[i] && t.data(j + e[i], t[0].style[e[i]]);
        },
        restore: function(t, e) {
            for (var i, s = 0, n = e.length; s < n; s++) null !== e[s] && (i = t.data(j + e[s]), 
            t.css(e[s], i));
        },
        setMode: function(t, e) {
            return "toggle" === e ? t.is(":hidden") ? "show" : "hide" : e;
        },
        createWrapper: function(i) {
            if (i.parent().is(".ui-effects-wrapper")) return i.parent();
            var s = {
                width: i.outerWidth(!0),
                height: i.outerHeight(!0),
                float: i.css("float")
            }, t = V("<div></div>").addClass("ui-effects-wrapper").css({
                fontSize: "100%",
                background: "transparent",
                border: "none",
                margin: 0,
                padding: 0
            }), e = {
                width: i.width(),
                height: i.height()
            }, n = document.activeElement;
            try {
                n.id;
            } catch (t) {
                n = document.body;
            }
            return i.wrap(t), i[0] !== n && !V.contains(i[0], n) || V(n).trigger("focus"), 
            t = i.parent(), "static" === i.css("position") ? (t.css({
                position: "relative"
            }), i.css({
                position: "relative"
            })) : (V.extend(s, {
                position: i.css("position"),
                zIndex: i.css("z-index")
            }), V.each([ "top", "left", "bottom", "right" ], function(t, e) {
                s[e] = i.css(e), isNaN(parseInt(s[e], 10)) && (s[e] = "auto");
            }), i.css({
                position: "relative",
                top: 0,
                left: 0,
                right: "auto",
                bottom: "auto"
            })), i.css(e), t.css(s).show();
        },
        removeWrapper: function(t) {
            var e = document.activeElement;
            return t.parent().is(".ui-effects-wrapper") && (t.parent().replaceWith(t), 
            t[0] !== e && !V.contains(t[0], e) || V(e).trigger("focus")), t;
        }
    }), V.extend(V.effects, {
        version: "1.13.1",
        define: function(t, e, i) {
            return i || (i = e, e = "effect"), V.effects.effect[t] = i, V.effects.effect[t].mode = e, 
            i;
        },
        scaledDimensions: function(t, e, i) {
            if (0 === e) return {
                height: 0,
                width: 0,
                outerHeight: 0,
                outerWidth: 0
            };
            var s = "horizontal" !== i ? (e || 100) / 100 : 1, e = "vertical" !== i ? (e || 100) / 100 : 1;
            return {
                height: t.height() * e,
                width: t.width() * s,
                outerHeight: t.outerHeight() * e,
                outerWidth: t.outerWidth() * s
            };
        },
        clipToBox: function(t) {
            return {
                width: t.clip.right - t.clip.left,
                height: t.clip.bottom - t.clip.top,
                left: t.clip.left,
                top: t.clip.top
            };
        },
        unshift: function(t, e, i) {
            var s = t.queue();
            1 < e && s.splice.apply(s, [ 1, 0 ].concat(s.splice(e, i))), t.dequeue();
        },
        saveStyle: function(t) {
            t.data(q, t[0].style.cssText);
        },
        restoreStyle: function(t) {
            t[0].style.cssText = t.data(q) || "", t.removeData(q);
        },
        mode: function(t, e) {
            return t = t.is(":hidden"), "toggle" === e && (e = t ? "show" : "hide"), 
            (t ? "hide" === e : "show" === e) ? "none" : e;
        },
        getBaseline: function(t, e) {
            var i, s;
            switch (t[0]) {
              case "top":
                i = 0;
                break;

              case "middle":
                i = .5;
                break;

              case "bottom":
                i = 1;
                break;

              default:
                i = t[0] / e.height;
            }
            switch (t[1]) {
              case "left":
                s = 0;
                break;

              case "center":
                s = .5;
                break;

              case "right":
                s = 1;
                break;

              default:
                s = t[1] / e.width;
            }
            return {
                x: s,
                y: i
            };
        },
        createPlaceholder: function(t) {
            var e, i = t.css("position"), s = t.position();
            return t.css({
                marginTop: t.css("marginTop"),
                marginBottom: t.css("marginBottom"),
                marginLeft: t.css("marginLeft"),
                marginRight: t.css("marginRight")
            }).outerWidth(t.outerWidth()).outerHeight(t.outerHeight()), /^(static|relative)/.test(i) && (i = "absolute", 
            e = V("<" + t[0].nodeName + ">").insertAfter(t).css({
                display: /^(inline|ruby)/.test(t.css("display")) ? "inline-block" : "block",
                visibility: "hidden",
                marginTop: t.css("marginTop"),
                marginBottom: t.css("marginBottom"),
                marginLeft: t.css("marginLeft"),
                marginRight: t.css("marginRight"),
                float: t.css("float")
            }).outerWidth(t.outerWidth()).outerHeight(t.outerHeight()).addClass("ui-effects-placeholder"), 
            t.data(j + "placeholder", e)), t.css({
                position: i,
                left: s.left,
                top: s.top
            }), e;
        },
        removePlaceholder: function(t) {
            var e = j + "placeholder", i = t.data(e);
            i && (i.remove(), t.removeData(e));
        },
        cleanUp: function(t) {
            V.effects.restoreStyle(t), V.effects.removePlaceholder(t);
        },
        setTransition: function(s, t, n, o) {
            return o = o || {}, V.each(t, function(t, e) {
                var i = s.cssUnit(e);
                0 < i[0] && (o[e] = i[0] * n + i[1]);
            }), o;
        }
    }), V.fn.extend({
        effect: function() {
            function t(t) {
                var e = V(this), i = V.effects.mode(e, r) || o;
                e.data(K, !0), l.push(i), o && ("show" === i || i === o && "hide" === i) && e.show(), 
                o && "none" === i || V.effects.saveStyle(e), "function" == typeof t && t();
            }
            var s = X.apply(this, arguments), n = V.effects.effect[s.effect], o = n.mode, e = s.queue, i = e || "fx", a = s.complete, r = s.mode, l = [];
            return V.fx.off || !n ? r ? this[r](s.duration, a) : this.each(function() {
                a && a.call(this);
            }) : !1 === e ? this.each(t).each(h) : this.queue(i, t).queue(i, h);
            function h(t) {
                var e = V(this);
                function i() {
                    "function" == typeof a && a.call(e[0]), "function" == typeof t && t();
                }
                s.mode = l.shift(), !1 === V.uiBackCompat || o ? "none" === s.mode ? (e[r](), 
                i()) : n.call(e[0], s, function() {
                    e.removeData(K), V.effects.cleanUp(e), "hide" === s.mode && e.hide(), 
                    i();
                }) : (e.is(":hidden") ? "hide" === r : "show" === r) ? (e[r](), 
                i()) : n.call(e[0], s, i);
            }
        },
        show: (R = V.fn.show, function(t) {
            return $(t) ? R.apply(this, arguments) : ((t = X.apply(this, arguments)).mode = "show", 
            this.effect.call(this, t));
        }),
        hide: (L = V.fn.hide, function(t) {
            return $(t) ? L.apply(this, arguments) : ((t = X.apply(this, arguments)).mode = "hide", 
            this.effect.call(this, t));
        }),
        toggle: (F = V.fn.toggle, function(t) {
            return $(t) || "boolean" == typeof t ? F.apply(this, arguments) : ((t = X.apply(this, arguments)).mode = "toggle", 
            this.effect.call(this, t));
        }),
        cssUnit: function(t) {
            var i = this.css(t), s = [];
            return V.each([ "em", "px", "%", "pt" ], function(t, e) {
                0 < i.indexOf(e) && (s = [ parseFloat(i), e ]);
            }), s;
        },
        cssClip: function(t) {
            return t ? this.css("clip", "rect(" + t.top + "px " + t.right + "px " + t.bottom + "px " + t.left + "px)") : G(this.css("clip"), this);
        },
        transfer: function(t, e) {
            var i = V(this), n = "fixed" === (s = V(t.to)).css("position"), o = V("body"), a = n ? o.scrollTop() : 0, r = n ? o.scrollLeft() : 0, o = {
                top: (o = s.offset()).top - a,
                left: o.left - r,
                height: s.innerHeight(),
                width: s.innerWidth()
            }, s = i.offset(), l = V("<div class='ui-effects-transfer'></div>");
            l.appendTo("body").addClass(t.className).css({
                top: s.top - a,
                left: s.left - r,
                height: i.innerHeight(),
                width: i.innerWidth(),
                position: n ? "fixed" : "absolute"
            }).animate(o, t.duration, t.easing, function() {
                l.remove(), "function" == typeof e && e();
            });
        }
    }), V.fx.step.clip = function(t) {
        t.clipInit || (t.start = V(t.elem).cssClip(), "string" == typeof t.end && (t.end = G(t.end, t.elem)), 
        t.clipInit = !0), V(t.elem).cssClip({
            top: t.pos * (t.end.top - t.start.top) + t.start.top,
            right: t.pos * (t.end.right - t.start.right) + t.start.right,
            bottom: t.pos * (t.end.bottom - t.start.bottom) + t.start.bottom,
            left: t.pos * (t.end.left - t.start.left) + t.start.left
        });
    }, Y = {}, V.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(e, t) {
        Y[t] = function(t) {
            return Math.pow(t, e + 2);
        };
    }), V.extend(Y, {
        Sine: function(t) {
            return 1 - Math.cos(t * Math.PI / 2);
        },
        Circ: function(t) {
            return 1 - Math.sqrt(1 - t * t);
        },
        Elastic: function(t) {
            return 0 === t || 1 === t ? t : -Math.pow(2, 8 * (t - 1)) * Math.sin((80 * (t - 1) - 7.5) * Math.PI / 15);
        },
        Back: function(t) {
            return t * t * (3 * t - 2);
        },
        Bounce: function(t) {
            for (var e, i = 4; t < ((e = Math.pow(2, --i)) - 1) / 11; );
            return 1 / Math.pow(4, 3 - i) - 7.5625 * Math.pow((3 * e - 2) / 22 - t, 2);
        }
    }), V.each(Y, function(t, e) {
        V.easing["easeIn" + t] = e, V.easing["easeOut" + t] = function(t) {
            return 1 - e(1 - t);
        }, V.easing["easeInOut" + t] = function(t) {
            return t < .5 ? e(2 * t) / 2 : 1 - e(-2 * t + 2) / 2;
        };
    }), y = V.effects, V.effects.define("blind", "hide", function(t, e) {
        var i = {
            up: [ "bottom", "top" ],
            vertical: [ "bottom", "top" ],
            down: [ "top", "bottom" ],
            left: [ "right", "left" ],
            horizontal: [ "right", "left" ],
            right: [ "left", "right" ]
        }, s = V(this), n = t.direction || "up", o = s.cssClip(), a = {
            clip: V.extend({}, o)
        }, r = V.effects.createPlaceholder(s);
        a.clip[i[n][0]] = a.clip[i[n][1]], "show" === t.mode && (s.cssClip(a.clip), 
        r && r.css(V.effects.clipToBox(a)), a.clip = o), r && r.animate(V.effects.clipToBox(a), t.duration, t.easing), 
        s.animate(a, {
            queue: !1,
            duration: t.duration,
            easing: t.easing,
            complete: e
        });
    }), V.effects.define("bounce", function(t, e) {
        var i, s, n = V(this), o = t.mode, a = "hide" === o, r = "show" === o, l = t.direction || "up", h = t.distance, c = t.times || 5, u = t.duration / (o = 2 * c + (r || a ? 1 : 0)), d = t.easing, p = "up" === l || "down" === l ? "top" : "left", f = "up" === l || "left" === l, g = 0, t = n.queue().length;
        for (V.effects.createPlaceholder(n), l = n.css(p), h = h || n["top" == p ? "outerHeight" : "outerWidth"]() / 3, 
        r && ((s = {
            opacity: 1
        })[p] = l, n.css("opacity", 0).css(p, f ? 2 * -h : 2 * h).animate(s, u, d)), 
        a && (h /= Math.pow(2, c - 1)), (s = {})[p] = l; g < c; g++) (i = {})[p] = (f ? "-=" : "+=") + h, 
        n.animate(i, u, d).animate(s, u, d), h = a ? 2 * h : h / 2;
        a && ((i = {
            opacity: 0
        })[p] = (f ? "-=" : "+=") + h, n.animate(i, u, d)), n.queue(e), V.effects.unshift(n, t, 1 + o);
    }), V.effects.define("clip", "hide", function(t, e) {
        var i = {}, s = V(this), a = (o = "both" === (n = t.direction || "vertical")) || "horizontal" === n, o = o || "vertical" === n, n = s.cssClip();
        i.clip = {
            top: o ? (n.bottom - n.top) / 2 : n.top,
            right: a ? (n.right - n.left) / 2 : n.right,
            bottom: o ? (n.bottom - n.top) / 2 : n.bottom,
            left: a ? (n.right - n.left) / 2 : n.left
        }, V.effects.createPlaceholder(s), "show" === t.mode && (s.cssClip(i.clip), 
        i.clip = n), s.animate(i, {
            queue: !1,
            duration: t.duration,
            easing: t.easing,
            complete: e
        });
    }), V.effects.define("drop", "hide", function(t, e) {
        var i = V(this), s = "show" === t.mode, n = t.direction || "left", o = "up" === n || "down" === n ? "top" : "left", a = "up" === n || "left" === n ? "-=" : "+=", r = "+=" == a ? "-=" : "+=", l = {
            opacity: 0
        };
        V.effects.createPlaceholder(i), n = t.distance || i["top" == o ? "outerHeight" : "outerWidth"](!0) / 2, 
        l[o] = a + n, s && (i.css(l), l[o] = r + n, l.opacity = 1), i.animate(l, {
            queue: !1,
            duration: t.duration,
            easing: t.easing,
            complete: e
        });
    }), V.effects.define("explode", "hide", function(t, e) {
        var i, s, n, o, a, r, l = t.pieces ? Math.round(Math.sqrt(t.pieces)) : 3, h = l, c = V(this), u = "show" === t.mode, d = c.show().css("visibility", "hidden").offset(), p = Math.ceil(c.outerWidth() / h), f = Math.ceil(c.outerHeight() / l), g = [];
        function m() {
            g.push(this), g.length === l * h && (c.css({
                visibility: "visible"
            }), V(g).remove(), e());
        }
        for (i = 0; i < l; i++) for (o = d.top + i * f, r = i - (l - 1) / 2, s = 0; s < h; s++) n = d.left + s * p, 
        a = s - (h - 1) / 2, c.clone().appendTo("body").wrap("<div></div>").css({
            position: "absolute",
            visibility: "visible",
            left: -s * p,
            top: -i * f
        }).parent().addClass("ui-effects-explode").css({
            position: "absolute",
            overflow: "hidden",
            width: p,
            height: f,
            left: n + (u ? a * p : 0),
            top: o + (u ? r * f : 0),
            opacity: u ? 0 : 1
        }).animate({
            left: n + (u ? 0 : a * p),
            top: o + (u ? 0 : r * f),
            opacity: u ? 1 : 0
        }, t.duration || 500, t.easing, m);
    }), V.effects.define("fade", "toggle", function(t, e) {
        var i = "show" === t.mode;
        V(this).css("opacity", i ? 0 : 1).animate({
            opacity: i ? 1 : 0
        }, {
            queue: !1,
            duration: t.duration,
            easing: t.easing,
            complete: e
        });
    }), V.effects.define("fold", "hide", function(e, t) {
        var i = V(this), n = "show" === (s = e.mode), o = "hide" === s, a = e.size || 15, r = /([0-9]+)%/.exec(a), l = e.horizFirst ? [ "right", "bottom" ] : [ "bottom", "right" ], h = e.duration / 2, c = V.effects.createPlaceholder(i), u = i.cssClip(), d = {
            clip: V.extend({}, u)
        }, p = {
            clip: V.extend({}, u)
        }, f = [ u[l[0]], u[l[1]] ], s = i.queue().length;
        r && (a = parseInt(r[1], 10) / 100 * f[o ? 0 : 1]), d.clip[l[0]] = a, p.clip[l[0]] = a, 
        p.clip[l[1]] = 0, n && (i.cssClip(p.clip), c && c.css(V.effects.clipToBox(p)), 
        p.clip = u), i.queue(function(t) {
            c && c.animate(V.effects.clipToBox(d), h, e.easing).animate(V.effects.clipToBox(p), h, e.easing), 
            t();
        }).animate(d, h, e.easing).animate(p, h, e.easing).queue(t), V.effects.unshift(i, s, 4);
    }), V.effects.define("highlight", "show", function(t, e) {
        var i = V(this), s = {
            backgroundColor: i.css("backgroundColor")
        };
        "hide" === t.mode && (s.opacity = 0), V.effects.saveStyle(i), i.css({
            backgroundImage: "none",
            backgroundColor: t.color || "#ffff99"
        }).animate(s, {
            queue: !1,
            duration: t.duration,
            easing: t.easing,
            complete: e
        });
    }), V.effects.define("size", function(s, e) {
        var n, i = V(this), t = [ "fontSize" ], o = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ], a = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ], r = s.mode, l = "effect" !== r, h = s.scale || "both", c = s.origin || [ "middle", "center" ], u = i.css("position"), d = i.position(), p = V.effects.scaledDimensions(i), f = s.from || p, g = s.to || V.effects.scaledDimensions(i, 0);
        V.effects.createPlaceholder(i), "show" === r && (r = f, f = g, g = r), n = {
            from: {
                y: f.height / p.height,
                x: f.width / p.width
            },
            to: {
                y: g.height / p.height,
                x: g.width / p.width
            }
        }, "box" !== h && "both" !== h || (n.from.y !== n.to.y && (f = V.effects.setTransition(i, o, n.from.y, f), 
        g = V.effects.setTransition(i, o, n.to.y, g)), n.from.x !== n.to.x && (f = V.effects.setTransition(i, a, n.from.x, f), 
        g = V.effects.setTransition(i, a, n.to.x, g))), "content" !== h && "both" !== h || n.from.y !== n.to.y && (f = V.effects.setTransition(i, t, n.from.y, f), 
        g = V.effects.setTransition(i, t, n.to.y, g)), c && (c = V.effects.getBaseline(c, p), 
        f.top = (p.outerHeight - f.outerHeight) * c.y + d.top, f.left = (p.outerWidth - f.outerWidth) * c.x + d.left, 
        g.top = (p.outerHeight - g.outerHeight) * c.y + d.top, g.left = (p.outerWidth - g.outerWidth) * c.x + d.left), 
        delete f.outerHeight, delete f.outerWidth, i.css(f), "content" !== h && "both" !== h || (o = o.concat([ "marginTop", "marginBottom" ]).concat(t), 
        a = a.concat([ "marginLeft", "marginRight" ]), i.find("*[width]").each(function() {
            var t = V(this), i = {
                height: (e = V.effects.scaledDimensions(t)).height * n.from.y,
                width: e.width * n.from.x,
                outerHeight: e.outerHeight * n.from.y,
                outerWidth: e.outerWidth * n.from.x
            }, e = {
                height: e.height * n.to.y,
                width: e.width * n.to.x,
                outerHeight: e.height * n.to.y,
                outerWidth: e.width * n.to.x
            };
            n.from.y !== n.to.y && (i = V.effects.setTransition(t, o, n.from.y, i), 
            e = V.effects.setTransition(t, o, n.to.y, e)), n.from.x !== n.to.x && (i = V.effects.setTransition(t, a, n.from.x, i), 
            e = V.effects.setTransition(t, a, n.to.x, e)), l && V.effects.saveStyle(t), 
            t.css(i), t.animate(e, s.duration, s.easing, function() {
                l && V.effects.restoreStyle(t);
            });
        })), i.animate(g, {
            queue: !1,
            duration: s.duration,
            easing: s.easing,
            complete: function() {
                var t = i.offset();
                0 === g.opacity && i.css("opacity", f.opacity), l || (i.css("position", "static" === u ? "relative" : u).offset(t), 
                V.effects.saveStyle(i)), e();
            }
        });
    }), V.effects.define("scale", function(t, e) {
        var i = V(this), s = t.mode, s = parseInt(t.percent, 10) || (0 === parseInt(t.percent, 10) || "effect" !== s ? 0 : 100), s = V.extend(!0, {
            from: V.effects.scaledDimensions(i),
            to: V.effects.scaledDimensions(i, s, t.direction || "both"),
            origin: t.origin || [ "middle", "center" ]
        }, t);
        t.fade && (s.from.opacity = 1, s.to.opacity = 0), V.effects.effect.size.call(this, s, e);
    }), V.effects.define("puff", "hide", function(t, e) {
        t = V.extend(!0, {}, t, {
            fade: !0,
            percent: parseInt(t.percent, 10) || 150
        }), V.effects.effect.scale.call(this, t, e);
    }), V.effects.define("pulsate", "show", function(t, e) {
        var i = V(this), n = "show" === (s = t.mode), o = 2 * (t.times || 5) + (n || "hide" === s ? 1 : 0), a = t.duration / o, r = 0, l = 1, s = i.queue().length;
        for (!n && i.is(":visible") || (i.css("opacity", 0).show(), r = 1); l < o; l++) i.animate({
            opacity: r
        }, a, t.easing), r = 1 - r;
        i.animate({
            opacity: r
        }, a, t.easing), i.queue(e), V.effects.unshift(i, s, 1 + o);
    }), V.effects.define("shake", function(t, e) {
        var i = 1, s = V(this), n = t.direction || "left", o = t.distance || 20, a = t.times || 3, r = 2 * a + 1, l = Math.round(t.duration / r), h = "up" === n || "down" === n ? "top" : "left", c = "up" === n || "left" === n, u = {}, d = {}, p = {}, n = s.queue().length;
        for (V.effects.createPlaceholder(s), u[h] = (c ? "-=" : "+=") + o, d[h] = (c ? "+=" : "-=") + 2 * o, 
        p[h] = (c ? "-=" : "+=") + 2 * o, s.animate(u, l, t.easing); i < a; i++) s.animate(d, l, t.easing).animate(p, l, t.easing);
        s.animate(d, l, t.easing).animate(u, l / 2, t.easing).queue(e), V.effects.unshift(s, n, 1 + r);
    }), V.effects.define("slide", "show", function(t, e) {
        var i, s, n = V(this), o = {
            up: [ "bottom", "top" ],
            down: [ "top", "bottom" ],
            left: [ "right", "left" ],
            right: [ "left", "right" ]
        }, a = t.mode, r = t.direction || "left", l = "up" === r || "down" === r ? "top" : "left", h = "up" === r || "left" === r, c = t.distance || n["top" == l ? "outerHeight" : "outerWidth"](!0), u = {};
        V.effects.createPlaceholder(n), i = n.cssClip(), s = n.position()[l], u[l] = (h ? -1 : 1) * c + s, 
        u.clip = n.cssClip(), u.clip[o[r][1]] = u.clip[o[r][0]], "show" === a && (n.cssClip(u.clip), 
        n.css(l, u[l]), u.clip = i, u[l] = s), n.animate(u, {
            queue: !1,
            duration: t.duration,
            easing: t.easing,
            complete: e
        });
    }), y = !1 !== V.uiBackCompat ? V.effects.define("transfer", function(t, e) {
        V(this).transfer(t, e);
    }) : y, V.ui.focusable = function(t, e) {
        var s, n, i, a = t.nodeName.toLowerCase();
        return "area" === a ? (s = (i = t.parentNode).name, !(!t.href || !s || "map" !== i.nodeName.toLowerCase()) && 0 < (s = V("img[usemap='#" + s + "']")).length && s.is(":visible")) : (/^(input|select|textarea|button|object)$/.test(a) ? (n = !t.disabled) && (i = V(t).closest("fieldset")[0]) && (n = !i.disabled) : n = "a" === a && t.href || e, 
        n && V(t).is(":visible") && function(t) {
            for (var e = t.css("visibility"); "inherit" === e; ) e = (t = t.parent()).css("visibility");
            return "visible" === e;
        }(V(t)));
    }, V.extend(V.expr.pseudos, {
        focusable: function(t) {
            return V.ui.focusable(t, null != V.attr(t, "tabindex"));
        }
    }), V.ui.focusable, V.fn._form = function() {
        return "string" == typeof this[0].form ? this.closest("form") : V(this[0].form);
    }, V.ui.formResetMixin = {
        _formResetHandler: function() {
            var e = V(this);
            setTimeout(function() {
                var t = e.data("ui-form-reset-instances");
                V.each(t, function() {
                    this.refresh();
                });
            });
        },
        _bindFormResetHandler: function() {
            var t;
            this.form = this.element._form(), this.form.length && ((t = this.form.data("ui-form-reset-instances") || []).length || this.form.on("reset.ui-form-reset", this._formResetHandler), 
            t.push(this), this.form.data("ui-form-reset-instances", t));
        },
        _unbindFormResetHandler: function() {
            var t;
            this.form.length && ((t = this.form.data("ui-form-reset-instances")).splice(V.inArray(this, t), 1), 
            t.length ? this.form.data("ui-form-reset-instances", t) : this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset"));
        }
    }, V.expr.pseudos || (V.expr.pseudos = V.expr[":"]), V.uniqueSort || (V.uniqueSort = V.unique), 
    V.escapeSelector || (Q = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g, J = function(t, e) {
        return e ? "\0" === t ? "ï¿½" : t.slice(0, -1) + "\\" + t.charCodeAt(t.length - 1).toString(16) + " " : "\\" + t;
    }, V.escapeSelector = function(t) {
        return (t + "").replace(Q, J);
    }), V.fn.even && V.fn.odd || V.fn.extend({
        even: function() {
            return this.filter(function(t) {
                return t % 2 == 0;
            });
        },
        odd: function() {
            return this.filter(function(t) {
                return t % 2 == 1;
            });
        }
    }), V.ui.keyCode = {
        BACKSPACE: 8,
        COMMA: 188,
        DELETE: 46,
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        LEFT: 37,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        PERIOD: 190,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38
    }, V.fn.labels = function() {
        var t, e, i;
        return this.length ? this[0].labels && this[0].labels.length ? this.pushStack(this[0].labels) : (e = this.eq(0).parents("label"), 
        (t = this.attr("id")) && (i = (i = this.eq(0).parents().last()).add((i.length ? i : this).siblings()), 
        t = "label[for='" + V.escapeSelector(t) + "']", e = e.add(i.find(t).addBack(t))), 
        this.pushStack(e)) : this.pushStack([]);
    }, V.fn.scrollParent = function(t) {
        var e = this.css("position"), i = "absolute" === e, s = t ? /(auto|scroll|hidden)/ : /(auto|scroll)/, t = this.parents().filter(function() {
            var t = V(this);
            return (!i || "static" !== t.css("position")) && s.test(t.css("overflow") + t.css("overflow-y") + t.css("overflow-x"));
        }).eq(0);
        return "fixed" !== e && t.length ? t : V(this[0].ownerDocument || document);
    }, V.extend(V.expr.pseudos, {
        tabbable: function(t) {
            var e = V.attr(t, "tabindex"), i = null != e;
            return (!i || 0 <= e) && V.ui.focusable(t, i);
        }
    }), V.fn.extend({
        uniqueId: (Z = 0, function() {
            return this.each(function() {
                this.id || (this.id = "ui-id-" + ++Z);
            });
        }),
        removeUniqueId: function() {
            return this.each(function() {
                /^ui-id-\d+$/.test(this.id) && V(this).removeAttr("id");
            });
        }
    }), V.widget("ui.accordion", {
        version: "1.13.1",
        options: {
            active: 0,
            animate: {},
            classes: {
                "ui-accordion-header": "ui-corner-top",
                "ui-accordion-header-collapsed": "ui-corner-all",
                "ui-accordion-content": "ui-corner-bottom"
            },
            collapsible: !1,
            event: "click",
            header: function(t) {
                return t.find("> li > :first-child").add(t.find("> :not(li)").even());
            },
            heightStyle: "auto",
            icons: {
                activeHeader: "ui-icon-triangle-1-s",
                header: "ui-icon-triangle-1-e"
            },
            activate: null,
            beforeActivate: null
        },
        hideProps: {
            borderTopWidth: "hide",
            borderBottomWidth: "hide",
            paddingTop: "hide",
            paddingBottom: "hide",
            height: "hide"
        },
        showProps: {
            borderTopWidth: "show",
            borderBottomWidth: "show",
            paddingTop: "show",
            paddingBottom: "show",
            height: "show"
        },
        _create: function() {
            var t = this.options;
            this.prevShow = this.prevHide = V(), this._addClass("ui-accordion", "ui-widget ui-helper-reset"), 
            this.element.attr("role", "tablist"), t.collapsible || !1 !== t.active && null != t.active || (t.active = 0), 
            this._processPanels(), t.active < 0 && (t.active += this.headers.length), 
            this._refresh();
        },
        _getCreateEventData: function() {
            return {
                header: this.active,
                panel: this.active.length ? this.active.next() : V()
            };
        },
        _createIcons: function() {
            var t, e = this.options.icons;
            e && (t = V("<span>"), this._addClass(t, "ui-accordion-header-icon", "ui-icon " + e.header), 
            t.prependTo(this.headers), t = this.active.children(".ui-accordion-header-icon"), 
            this._removeClass(t, e.header)._addClass(t, null, e.activeHeader)._addClass(this.headers, "ui-accordion-icons"));
        },
        _destroyIcons: function() {
            this._removeClass(this.headers, "ui-accordion-icons"), this.headers.children(".ui-accordion-header-icon").remove();
        },
        _destroy: function() {
            var t;
            this.element.removeAttr("role"), this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(), 
            this._destroyIcons(), t = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(), 
            "content" !== this.options.heightStyle && t.css("height", "");
        },
        _setOption: function(t, e) {
            "active" !== t ? ("event" === t && (this.options.event && this._off(this.headers, this.options.event), 
            this._setupEvents(e)), this._super(t, e), "collapsible" !== t || e || !1 !== this.options.active || this._activate(0), 
            "icons" === t && (this._destroyIcons(), e && this._createIcons())) : this._activate(e);
        },
        _setOptionDisabled: function(t) {
            this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t), 
            this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!t);
        },
        _keydown: function(t) {
            if (!t.altKey && !t.ctrlKey) {
                var e = V.ui.keyCode, i = this.headers.length, s = this.headers.index(t.target), n = !1;
                switch (t.keyCode) {
                  case e.RIGHT:
                  case e.DOWN:
                    n = this.headers[(s + 1) % i];
                    break;

                  case e.LEFT:
                  case e.UP:
                    n = this.headers[(s - 1 + i) % i];
                    break;

                  case e.SPACE:
                  case e.ENTER:
                    this._eventHandler(t);
                    break;

                  case e.HOME:
                    n = this.headers[0];
                    break;

                  case e.END:
                    n = this.headers[i - 1];
                }
                n && (V(t.target).attr("tabIndex", -1), V(n).attr("tabIndex", 0), 
                V(n).trigger("focus"), t.preventDefault());
            }
        },
        _panelKeyDown: function(t) {
            t.keyCode === V.ui.keyCode.UP && t.ctrlKey && V(t.currentTarget).prev().trigger("focus");
        },
        refresh: function() {
            var t = this.options;
            this._processPanels(), !1 === t.active && !0 === t.collapsible || !this.headers.length ? (t.active = !1, 
            this.active = V()) : !1 === t.active ? this._activate(0) : this.active.length && !V.contains(this.element[0], this.active[0]) ? this.headers.length === this.headers.find(".ui-state-disabled").length ? (t.active = !1, 
            this.active = V()) : this._activate(Math.max(0, t.active - 1)) : t.active = this.headers.index(this.active), 
            this._destroyIcons(), this._refresh();
        },
        _processPanels: function() {
            var t = this.headers, e = this.panels;
            "function" == typeof this.options.header ? this.headers = this.options.header(this.element) : this.headers = this.element.find(this.options.header), 
            this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default"), 
            this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide(), 
            this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content"), 
            e && (this._off(t.not(this.headers)), this._off(e.not(this.panels)));
        },
        _refresh: function() {
            var i, t = this.options, e = t.heightStyle, s = this.element.parent();
            this.active = this._findActive(t.active), this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed"), 
            this._addClass(this.active.next(), "ui-accordion-content-active"), this.active.next().show(), 
            this.headers.attr("role", "tab").each(function() {
                var t = V(this), e = t.uniqueId().attr("id"), i = t.next(), s = i.uniqueId().attr("id");
                t.attr("aria-controls", s), i.attr("aria-labelledby", e);
            }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }).next().attr({
                "aria-hidden": "true"
            }).hide(), this.active.length ? this.active.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            }).next().attr({
                "aria-hidden": "false"
            }) : this.headers.eq(0).attr("tabIndex", 0), this._createIcons(), this._setupEvents(t.event), 
            "fill" === e ? (i = s.height(), this.element.siblings(":visible").each(function() {
                var t = V(this), e = t.css("position");
                "absolute" !== e && "fixed" !== e && (i -= t.outerHeight(!0));
            }), this.headers.each(function() {
                i -= V(this).outerHeight(!0);
            }), this.headers.next().each(function() {
                V(this).height(Math.max(0, i - V(this).innerHeight() + V(this).height()));
            }).css("overflow", "auto")) : "auto" === e && (i = 0, this.headers.next().each(function() {
                var t = V(this).is(":visible");
                t || V(this).show(), i = Math.max(i, V(this).css("height", "").height()), 
                t || V(this).hide();
            }).height(i));
        },
        _activate: function(t) {
            (t = this._findActive(t)[0]) !== this.active[0] && (t = t || this.active[0], 
            this._eventHandler({
                target: t,
                currentTarget: t,
                preventDefault: V.noop
            }));
        },
        _findActive: function(t) {
            return "number" == typeof t ? this.headers.eq(t) : V();
        },
        _setupEvents: function(t) {
            var i = {
                keydown: "_keydown"
            };
            t && V.each(t.split(" "), function(t, e) {
                i[e] = "_eventHandler";
            }), this._off(this.headers.add(this.headers.next())), this._on(this.headers, i), 
            this._on(this.headers.next(), {
                keydown: "_panelKeyDown"
            }), this._hoverable(this.headers), this._focusable(this.headers);
        },
        _eventHandler: function(t) {
            var e = this.options, i = this.active, s = V(t.currentTarget), n = s[0] === i[0], o = n && e.collapsible, a = o ? V() : s.next(), r = i.next(), a = {
                oldHeader: i,
                oldPanel: r,
                newHeader: o ? V() : s,
                newPanel: a
            };
            t.preventDefault(), n && !e.collapsible || !1 === this._trigger("beforeActivate", t, a) || (e.active = !o && this.headers.index(s), 
            this.active = n ? V() : s, this._toggle(a), this._removeClass(i, "ui-accordion-header-active", "ui-state-active"), 
            e.icons && (i = i.children(".ui-accordion-header-icon"), this._removeClass(i, null, e.icons.activeHeader)._addClass(i, null, e.icons.header)), 
            n || (this._removeClass(s, "ui-accordion-header-collapsed")._addClass(s, "ui-accordion-header-active", "ui-state-active"), 
            e.icons && (n = s.children(".ui-accordion-header-icon"), this._removeClass(n, null, e.icons.header)._addClass(n, null, e.icons.activeHeader)), 
            this._addClass(s.next(), "ui-accordion-content-active")));
        },
        _toggle: function(t) {
            var e = t.newPanel, i = this.prevShow.length ? this.prevShow : t.oldPanel;
            this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = e, this.prevHide = i, 
            this.options.animate ? this._animate(e, i, t) : (i.hide(), e.show(), 
            this._toggleComplete(t)), i.attr({
                "aria-hidden": "true"
            }), i.prev().attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            }), e.length && i.length ? i.prev().attr({
                tabIndex: -1,
                "aria-expanded": "false"
            }) : e.length && this.headers.filter(function() {
                return 0 === parseInt(V(this).attr("tabIndex"), 10);
            }).attr("tabIndex", -1), e.attr("aria-hidden", "false").prev().attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            });
        },
        _animate: function(t, i, e) {
            var s, a = this, r = 0, l = t.css("box-sizing"), h = t.length && (!i.length || t.index() < i.index()), c = this.options.animate || {}, u = h && c.down || c, h = function() {
                a._toggleComplete(e);
            }, n = (n = "string" == typeof u ? u : n) || u.easing || c.easing, o = (o = "number" == typeof u ? u : o) || u.duration || c.duration;
            return i.length ? t.length ? (s = t.show().outerHeight(), i.animate(this.hideProps, {
                duration: o,
                easing: n,
                step: function(t, e) {
                    e.now = Math.round(t);
                }
            }), void t.hide().animate(this.showProps, {
                duration: o,
                easing: n,
                complete: h,
                step: function(t, e) {
                    e.now = Math.round(t), "height" !== e.prop ? "content-box" === l && (r += e.now) : "content" !== a.options.heightStyle && (e.now = Math.round(s - i.outerHeight() - r), 
                    r = 0);
                }
            })) : i.animate(this.hideProps, o, n, h) : t.animate(this.showProps, o, n, h);
        },
        _toggleComplete: function(t) {
            var e = t.oldPanel, i = e.prev();
            this._removeClass(e, "ui-accordion-content-active"), this._removeClass(i, "ui-accordion-header-active")._addClass(i, "ui-accordion-header-collapsed"), 
            e.length && (e.parent()[0].className = e.parent()[0].className), this._trigger("activate", null, t);
        }
    }), V.ui.safeActiveElement = function(e) {
        var i;
        try {
            i = e.activeElement;
        } catch (t) {
            i = e.body;
        }
        return (i = i || e.body).nodeName ? i : e.body;
    }, V.widget("ui.menu", {
        version: "1.13.1",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-caret-1-e"
            },
            items: "> *",
            menus: "ul",
            position: {
                my: "left top",
                at: "right top"
            },
            role: "menu",
            blur: null,
            focus: null,
            select: null
        },
        _create: function() {
            this.activeMenu = this.element, this.mouseHandled = !1, this.lastMousePosition = {
                x: null,
                y: null
            }, this.element.uniqueId().attr({
                role: this.options.role,
                tabIndex: 0
            }), this._addClass("ui-menu", "ui-widget ui-widget-content"), this._on({
                "mousedown .ui-menu-item": function(t) {
                    t.preventDefault(), this._activateItem(t);
                },
                "click .ui-menu-item": function(t) {
                    var e = V(t.target), i = V(V.ui.safeActiveElement(this.document[0]));
                    !this.mouseHandled && e.not(".ui-state-disabled").length && (this.select(t), 
                    t.isPropagationStopped() || (this.mouseHandled = !0), e.has(".ui-menu").length ? this.expand(t) : !this.element.is(":focus") && i.closest(".ui-menu").length && (this.element.trigger("focus", [ !0 ]), 
                    this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)));
                },
                "mouseenter .ui-menu-item": "_activateItem",
                "mousemove .ui-menu-item": "_activateItem",
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(t, e) {
                    var i = this.active || this._menuItems().first();
                    e || this.focus(t, i);
                },
                blur: function(t) {
                    this._delay(function() {
                        V.contains(this.element[0], V.ui.safeActiveElement(this.document[0])) || this.collapseAll(t);
                    });
                },
                keydown: "_keydown"
            }), this.refresh(), this._on(this.document, {
                click: function(t) {
                    this._closeOnDocumentClick(t) && this.collapseAll(t, !0), this.mouseHandled = !1;
                }
            });
        },
        _activateItem: function(t) {
            var e, i;
            this.previousFilter || t.clientX === this.lastMousePosition.x && t.clientY === this.lastMousePosition.y || (this.lastMousePosition = {
                x: t.clientX,
                y: t.clientY
            }, e = V(t.target).closest(".ui-menu-item"), i = V(t.currentTarget), 
            e[0] !== i[0] || i.is(".ui-state-active") || (this._removeClass(i.siblings().children(".ui-state-active"), null, "ui-state-active"), 
            this.focus(t, i)));
        },
        _destroy: function() {
            var t = this.element.find(".ui-menu-item").removeAttr("role aria-disabled").children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(), 
            t.children().each(function() {
                var t = V(this);
                t.data("ui-menu-submenu-caret") && t.remove();
            });
        },
        _keydown: function(t) {
            var e, i, s, n = !0;
            switch (t.keyCode) {
              case V.ui.keyCode.PAGE_UP:
                this.previousPage(t);
                break;

              case V.ui.keyCode.PAGE_DOWN:
                this.nextPage(t);
                break;

              case V.ui.keyCode.HOME:
                this._move("first", "first", t);
                break;

              case V.ui.keyCode.END:
                this._move("last", "last", t);
                break;

              case V.ui.keyCode.UP:
                this.previous(t);
                break;

              case V.ui.keyCode.DOWN:
                this.next(t);
                break;

              case V.ui.keyCode.LEFT:
                this.collapse(t);
                break;

              case V.ui.keyCode.RIGHT:
                this.active && !this.active.is(".ui-state-disabled") && this.expand(t);
                break;

              case V.ui.keyCode.ENTER:
              case V.ui.keyCode.SPACE:
                this._activate(t);
                break;

              case V.ui.keyCode.ESCAPE:
                this.collapse(t);
                break;

              default:
                e = this.previousFilter || "", s = n = !1, i = 96 <= t.keyCode && t.keyCode <= 105 ? (t.keyCode - 96).toString() : String.fromCharCode(t.keyCode), 
                clearTimeout(this.filterTimer), i === e ? s = !0 : i = e + i, e = this._filterMenuItems(i), 
                (e = s && -1 !== e.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : e).length || (i = String.fromCharCode(t.keyCode), 
                e = this._filterMenuItems(i)), e.length ? (this.focus(t, e), this.previousFilter = i, 
                this.filterTimer = this._delay(function() {
                    delete this.previousFilter;
                }, 1e3)) : delete this.previousFilter;
            }
            n && t.preventDefault();
        },
        _activate: function(t) {
            this.active && !this.active.is(".ui-state-disabled") && (this.active.children("[aria-haspopup='true']").length ? this.expand(t) : this.select(t));
        },
        refresh: function() {
            var t, e, s = this, n = this.options.icons.submenu, i = this.element.find(this.options.menus);
            this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length), 
            e = i.filter(":not(.ui-menu)").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function() {
                var t = V(this), e = t.prev(), i = V("<span>").data("ui-menu-submenu-caret", !0);
                s._addClass(i, "ui-menu-icon", "ui-icon " + n), e.attr("aria-haspopup", "true").prepend(i), 
                t.attr("aria-labelledby", e.attr("id"));
            }), this._addClass(e, "ui-menu", "ui-widget ui-widget-content ui-front"), 
            (t = i.add(this.element).find(this.options.items)).not(".ui-menu-item").each(function() {
                var t = V(this);
                s._isDivider(t) && s._addClass(t, "ui-menu-divider", "ui-widget-content");
            }), i = (e = t.not(".ui-menu-item, .ui-menu-divider")).children().not(".ui-menu").uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            }), this._addClass(e, "ui-menu-item")._addClass(i, "ui-menu-item-wrapper"), 
            t.filter(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !V.contains(this.element[0], this.active[0]) && this.blur();
        },
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role];
        },
        _setOption: function(t, e) {
            var i;
            "icons" === t && (i = this.element.find(".ui-menu-icon"), this._removeClass(i, null, this.options.icons.submenu)._addClass(i, null, e.submenu)), 
            this._super(t, e);
        },
        _setOptionDisabled: function(t) {
            this._super(t), this.element.attr("aria-disabled", String(t)), this._toggleClass(null, "ui-state-disabled", !!t);
        },
        focus: function(t, e) {
            var i;
            this.blur(t, t && "focus" === t.type), this._scrollIntoView(e), this.active = e.first(), 
            i = this.active.children(".ui-menu-item-wrapper"), this._addClass(i, null, "ui-state-active"), 
            this.options.role && this.element.attr("aria-activedescendant", i.attr("id")), 
            i = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"), 
            this._addClass(i, null, "ui-state-active"), t && "keydown" === t.type ? this._close() : this.timer = this._delay(function() {
                this._close();
            }, this.delay), (i = e.children(".ui-menu")).length && t && /^mouse/.test(t.type) && this._startOpening(i), 
            this.activeMenu = e.parent(), this._trigger("focus", t, {
                item: e
            });
        },
        _scrollIntoView: function(t) {
            var e, i, s;
            this._hasScroll() && (i = parseFloat(V.css(this.activeMenu[0], "borderTopWidth")) || 0, 
            s = parseFloat(V.css(this.activeMenu[0], "paddingTop")) || 0, e = t.offset().top - this.activeMenu.offset().top - i - s, 
            i = this.activeMenu.scrollTop(), s = this.activeMenu.height(), t = t.outerHeight(), 
            e < 0 ? this.activeMenu.scrollTop(i + e) : s < e + t && this.activeMenu.scrollTop(i + e - s + t));
        },
        blur: function(t, e) {
            e || clearTimeout(this.timer), this.active && (this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active"), 
            this._trigger("blur", t, {
                item: this.active
            }), this.active = null);
        },
        _startOpening: function(t) {
            clearTimeout(this.timer), "true" === t.attr("aria-hidden") && (this.timer = this._delay(function() {
                this._close(), this._open(t);
            }, this.delay));
        },
        _open: function(t) {
            var e = V.extend({
                of: this.active
            }, this.options.position);
            clearTimeout(this.timer), this.element.find(".ui-menu").not(t.parents(".ui-menu")).hide().attr("aria-hidden", "true"), 
            t.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(e);
        },
        collapseAll: function(e, i) {
            clearTimeout(this.timer), this.timer = this._delay(function() {
                var t = i ? this.element : V(e && e.target).closest(this.element.find(".ui-menu"));
                t.length || (t = this.element), this._close(t), this.blur(e), this._removeClass(t.find(".ui-state-active"), null, "ui-state-active"), 
                this.activeMenu = t;
            }, i ? 0 : this.delay);
        },
        _close: function(t) {
            (t = t || (this.active ? this.active.parent() : this.element)).find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false");
        },
        _closeOnDocumentClick: function(t) {
            return !V(t.target).closest(".ui-menu").length;
        },
        _isDivider: function(t) {
            return !/[^\-\u2014\u2013\s]/.test(t.text());
        },
        collapse: function(t) {
            var e = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            e && e.length && (this._close(), this.focus(t, e));
        },
        expand: function(t) {
            var e = this.active && this._menuItems(this.active.children(".ui-menu")).first();
            e && e.length && (this._open(e.parent()), this._delay(function() {
                this.focus(t, e);
            }));
        },
        next: function(t) {
            this._move("next", "first", t);
        },
        previous: function(t) {
            this._move("prev", "last", t);
        },
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },
        _menuItems: function(t) {
            return (t || this.element).find(this.options.items).filter(".ui-menu-item");
        },
        _move: function(t, e, i) {
            var s;
            (s = this.active ? "first" === t || "last" === t ? this.active["first" === t ? "prevAll" : "nextAll"](".ui-menu-item").last() : this.active[t + "All"](".ui-menu-item").first() : s) && s.length && this.active || (s = this._menuItems(this.activeMenu)[e]()), 
            this.focus(i, s);
        },
        nextPage: function(t) {
            var e, i, s;
            this.active ? this.isLastItem() || (this._hasScroll() ? (i = this.active.offset().top, 
            s = this.element.innerHeight(), 0 === V.fn.jquery.indexOf("3.2.") && (s += this.element[0].offsetHeight - this.element.outerHeight()), 
            this.active.nextAll(".ui-menu-item").each(function() {
                return (e = V(this)).offset().top - i - s < 0;
            }), this.focus(t, e)) : this.focus(t, this._menuItems(this.activeMenu)[this.active ? "last" : "first"]())) : this.next(t);
        },
        previousPage: function(t) {
            var e, i, s;
            this.active ? this.isFirstItem() || (this._hasScroll() ? (i = this.active.offset().top, 
            s = this.element.innerHeight(), 0 === V.fn.jquery.indexOf("3.2.") && (s += this.element[0].offsetHeight - this.element.outerHeight()), 
            this.active.prevAll(".ui-menu-item").each(function() {
                return 0 < (e = V(this)).offset().top - i + s;
            }), this.focus(t, e)) : this.focus(t, this._menuItems(this.activeMenu).first())) : this.next(t);
        },
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight");
        },
        select: function(t) {
            this.active = this.active || V(t.target).closest(".ui-menu-item");
            var e = {
                item: this.active
            };
            this.active.has(".ui-menu").length || this.collapseAll(t, !0), this._trigger("select", t, e);
        },
        _filterMenuItems: function(t) {
            var t = t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), e = new RegExp("^" + t, "i");
            return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function() {
                return e.test(String.prototype.trim.call(V(this).children(".ui-menu-item-wrapper").text()));
            });
        }
    }), V.widget("ui.autocomplete", {
        version: "1.13.1",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: !1,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        liveRegionTimer: null,
        _create: function() {
            var i, s, n, e = "textarea" === (t = this.element[0].nodeName.toLowerCase()), t = "input" === t;
            this.isMultiLine = e || !t && this._isContentEditable(this.element), 
            this.valueMethod = this.element[e || t ? "val" : "text"], this.isNewMenu = !0, 
            this._addClass("ui-autocomplete-input"), this.element.attr("autocomplete", "off"), 
            this._on(this.element, {
                keydown: function(t) {
                    if (this.element.prop("readOnly")) s = n = i = !0; else {
                        s = n = i = !1;
                        var e = V.ui.keyCode;
                        switch (t.keyCode) {
                          case e.PAGE_UP:
                            i = !0, this._move("previousPage", t);
                            break;

                          case e.PAGE_DOWN:
                            i = !0, this._move("nextPage", t);
                            break;

                          case e.UP:
                            i = !0, this._keyEvent("previous", t);
                            break;

                          case e.DOWN:
                            i = !0, this._keyEvent("next", t);
                            break;

                          case e.ENTER:
                            this.menu.active && (i = !0, t.preventDefault(), this.menu.select(t));
                            break;

                          case e.TAB:
                            this.menu.active && this.menu.select(t);
                            break;

                          case e.ESCAPE:
                            this.menu.element.is(":visible") && (this.isMultiLine || this._value(this.term), 
                            this.close(t), t.preventDefault());
                            break;

                          default:
                            s = !0, this._searchTimeout(t);
                        }
                    }
                },
                keypress: function(t) {
                    if (i) return i = !1, void (this.isMultiLine && !this.menu.element.is(":visible") || t.preventDefault());
                    if (!s) {
                        var e = V.ui.keyCode;
                        switch (t.keyCode) {
                          case e.PAGE_UP:
                            this._move("previousPage", t);
                            break;

                          case e.PAGE_DOWN:
                            this._move("nextPage", t);
                            break;

                          case e.UP:
                            this._keyEvent("previous", t);
                            break;

                          case e.DOWN:
                            this._keyEvent("next", t);
                        }
                    }
                },
                input: function(t) {
                    if (n) return n = !1, void t.preventDefault();
                    this._searchTimeout(t);
                },
                focus: function() {
                    this.selectedItem = null, this.previous = this._value();
                },
                blur: function(t) {
                    clearTimeout(this.searching), this.close(t), this._change(t);
                }
            }), this._initSource(), this.menu = V("<ul>").appendTo(this._appendTo()).menu({
                role: null
            }).hide().attr({
                unselectable: "on"
            }).menu("instance"), this._addClass(this.menu.element, "ui-autocomplete", "ui-front"), 
            this._on(this.menu.element, {
                mousedown: function(t) {
                    t.preventDefault();
                },
                menufocus: function(t, e) {
                    var i, s;
                    if (this.isNewMenu && (this.isNewMenu = !1, t.originalEvent && /^mouse/.test(t.originalEvent.type))) return this.menu.blur(), 
                    void this.document.one("mousemove", function() {
                        V(t.target).trigger(t.originalEvent);
                    });
                    s = e.item.data("ui-autocomplete-item"), !1 !== this._trigger("focus", t, {
                        item: s
                    }) && t.originalEvent && /^key/.test(t.originalEvent.type) && this._value(s.value), 
                    (i = e.item.attr("aria-label") || s.value) && String.prototype.trim.call(i).length && (clearTimeout(this.liveRegionTimer), 
                    this.liveRegionTimer = this._delay(function() {
                        this.liveRegion.html(V("<div>").text(i));
                    }, 100));
                },
                menuselect: function(t, e) {
                    var i = e.item.data("ui-autocomplete-item"), s = this.previous;
                    this.element[0] !== V.ui.safeActiveElement(this.document[0]) && (this.element.trigger("focus"), 
                    this.previous = s, this._delay(function() {
                        this.previous = s, this.selectedItem = i;
                    })), !1 !== this._trigger("select", t, {
                        item: i
                    }) && this._value(i.value), this.term = this._value(), this.close(t), 
                    this.selectedItem = i;
                }
            }), this.liveRegion = V("<div>", {
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), 
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _destroy: function() {
            clearTimeout(this.searching), this.element.removeAttr("autocomplete"), 
            this.menu.element.remove(), this.liveRegion.remove();
        },
        _setOption: function(t, e) {
            this._super(t, e), "source" === t && this._initSource(), "appendTo" === t && this.menu.element.appendTo(this._appendTo()), 
            "disabled" === t && e && this.xhr && this.xhr.abort();
        },
        _isEventTargetInWidget: function(t) {
            var e = this.menu.element[0];
            return t.target === this.element[0] || t.target === e || V.contains(e, t.target);
        },
        _closeOnClickOutside: function(t) {
            this._isEventTargetInWidget(t) || this.close();
        },
        _appendTo: function() {
            var t = this.options.appendTo;
            return (t = (t = t && (t.jquery || t.nodeType ? V(t) : this.document.find(t).eq(0))) && t[0] ? t : this.element.closest(".ui-front, dialog")).length ? t : this.document[0].body;
        },
        _initSource: function() {
            var i, s, n = this;
            Array.isArray(this.options.source) ? (i = this.options.source, this.source = function(t, e) {
                e(V.ui.autocomplete.filter(i, t.term));
            }) : "string" == typeof this.options.source ? (s = this.options.source, 
            this.source = function(t, e) {
                n.xhr && n.xhr.abort(), n.xhr = V.ajax({
                    url: s,
                    data: t,
                    dataType: "json",
                    success: function(t) {
                        e(t);
                    },
                    error: function() {
                        e([]);
                    }
                });
            }) : this.source = this.options.source;
        },
        _searchTimeout: function(s) {
            clearTimeout(this.searching), this.searching = this._delay(function() {
                var t = this.term === this._value(), e = this.menu.element.is(":visible"), i = s.altKey || s.ctrlKey || s.metaKey || s.shiftKey;
                t && (e || i) || (this.selectedItem = null, this.search(null, s));
            }, this.options.delay);
        },
        search: function(t, e) {
            return t = null != t ? t : this._value(), this.term = this._value(), 
            t.length < this.options.minLength ? this.close(e) : !1 !== this._trigger("search", e) ? this._search(t) : void 0;
        },
        _search: function(t) {
            this.pending++, this._addClass("ui-autocomplete-loading"), this.cancelSearch = !1, 
            this.source({
                term: t
            }, this._response());
        },
        _response: function() {
            var e = ++this.requestIndex;
            return function(t) {
                e === this.requestIndex && this.__response(t), this.pending--, this.pending || this._removeClass("ui-autocomplete-loading");
            }.bind(this);
        },
        __response: function(t) {
            t = t && this._normalize(t), this._trigger("response", null, {
                content: t
            }), !this.options.disabled && t && t.length && !this.cancelSearch ? (this._suggest(t), 
            this._trigger("open")) : this._close();
        },
        close: function(t) {
            this.cancelSearch = !0, this._close(t);
        },
        _close: function(t) {
            this._off(this.document, "mousedown"), this.menu.element.is(":visible") && (this.menu.element.hide(), 
            this.menu.blur(), this.isNewMenu = !0, this._trigger("close", t));
        },
        _change: function(t) {
            this.previous !== this._value() && this._trigger("change", t, {
                item: this.selectedItem
            });
        },
        _normalize: function(t) {
            return t.length && t[0].label && t[0].value ? t : V.map(t, function(t) {
                return "string" == typeof t ? {
                    label: t,
                    value: t
                } : V.extend({}, t, {
                    label: t.label || t.value,
                    value: t.value || t.label
                });
            });
        },
        _suggest: function(t) {
            var e = this.menu.element.empty();
            this._renderMenu(e, t), this.isNewMenu = !0, this.menu.refresh(), e.show(), 
            this._resizeMenu(), e.position(V.extend({
                of: this.element
            }, this.options.position)), this.options.autoFocus && this.menu.next(), 
            this._on(this.document, {
                mousedown: "_closeOnClickOutside"
            });
        },
        _resizeMenu: function() {
            var t = this.menu.element;
            t.outerWidth(Math.max(t.width("").outerWidth() + 1, this.element.outerWidth()));
        },
        _renderMenu: function(i, t) {
            var s = this;
            V.each(t, function(t, e) {
                s._renderItemData(i, e);
            });
        },
        _renderItemData: function(t, e) {
            return this._renderItem(t, e).data("ui-autocomplete-item", e);
        },
        _renderItem: function(t, e) {
            return V("<li>").append(V("<div>").text(e.label)).appendTo(t);
        },
        _move: function(t, e) {
            if (this.menu.element.is(":visible")) return this.menu.isFirstItem() && /^previous/.test(t) || this.menu.isLastItem() && /^next/.test(t) ? (this.isMultiLine || this._value(this.term), 
            void this.menu.blur()) : void this.menu[t](e);
            this.search(null, e);
        },
        widget: function() {
            return this.menu.element;
        },
        _value: function() {
            return this.valueMethod.apply(this.element, arguments);
        },
        _keyEvent: function(t, e) {
            this.isMultiLine && !this.menu.element.is(":visible") || (this._move(t, e), 
            e.preventDefault());
        },
        _isContentEditable: function(t) {
            if (!t.length) return !1;
            var e = t.prop("contentEditable");
            return "inherit" === e ? this._isContentEditable(t.parent()) : "true" === e;
        }
    }), V.extend(V.ui.autocomplete, {
        escapeRegex: function(t) {
            return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        },
        filter: function(t, e) {
            var i = new RegExp(V.ui.autocomplete.escapeRegex(e), "i");
            return V.grep(t, function(t) {
                return i.test(t.label || t.value || t);
            });
        }
    }), V.widget("ui.autocomplete", V.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function(t) {
                    return t + (1 < t ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
                }
            }
        },
        __response: function(t) {
            var e;
            this._superApply(arguments), this.options.disabled || this.cancelSearch || (e = t && t.length ? this.options.messages.results(t.length) : this.options.messages.noResults, 
            clearTimeout(this.liveRegionTimer), this.liveRegionTimer = this._delay(function() {
                this.liveRegion.html(V("<div>").text(e));
            }, 100));
        }
    }), V.ui.autocomplete;
    var et, it, tt = /ui-corner-([a-z]){2,6}/g;
    function st() {
        this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, 
        this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", 
        this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", 
        this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", 
        this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", 
        this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], 
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
            monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
            dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
            dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
            dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: !1,
            showMonthAfterYear: !1,
            yearSuffix: "",
            selectMonthLabel: "Select month",
            selectYearLabel: "Select year"
        }, this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: !1,
            hideIfNoPrevNext: !1,
            navigationAsDateFormat: !1,
            gotoCurrent: !1,
            changeMonth: !1,
            changeYear: !1,
            yearRange: "c-10:c+10",
            showOtherMonths: !1,
            selectOtherMonths: !1,
            showWeek: !1,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            onUpdateDatepicker: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: !0,
            showButtonPanel: !1,
            autoSize: !1,
            disabled: !1
        }, V.extend(this._defaults, this.regional[""]), this.regional.en = V.extend(!0, {}, this.regional[""]), 
        this.regional["en-US"] = V.extend(!0, {}, this.regional.en), this.dpDiv = nt(V("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }
    function nt(t) {
        var e = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return t.on("mouseout", e, function() {
            V(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && V(this).removeClass("ui-datepicker-prev-hover"), 
            -1 !== this.className.indexOf("ui-datepicker-next") && V(this).removeClass("ui-datepicker-next-hover");
        }).on("mouseover", e, ot);
    }
    function ot() {
        V.datepicker._isDisabledDatepicker((it.inline ? it.dpDiv.parent() : it.input)[0]) || (V(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), 
        V(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && V(this).addClass("ui-datepicker-prev-hover"), 
        -1 !== this.className.indexOf("ui-datepicker-next") && V(this).addClass("ui-datepicker-next-hover"));
    }
    function at(t, e) {
        for (var i in V.extend(t, e), e) null == e[i] && (t[i] = e[i]);
    }
    V.widget("ui.controlgroup", {
        version: "1.13.1",
        defaultElement: "<div>",
        options: {
            direction: "horizontal",
            disabled: null,
            onlyVisible: !0,
            items: {
                button: "input[type=button], input[type=submit], input[type=reset], button, a",
                controlgroupLabel: ".ui-controlgroup-label",
                checkboxradio: "input[type='checkbox'], input[type='radio']",
                selectmenu: "select",
                spinner: ".ui-spinner-input"
            }
        },
        _create: function() {
            this._enhance();
        },
        _enhance: function() {
            this.element.attr("role", "toolbar"), this.refresh();
        },
        _destroy: function() {
            this._callChildMethod("destroy"), this.childWidgets.removeData("ui-controlgroup-data"), 
            this.element.removeAttr("role"), this.options.items.controlgroupLabel && this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap();
        },
        _initWidgets: function() {
            var o = this, a = [];
            V.each(this.options.items, function(s, t) {
                var e, n;
                if (t) return "controlgroupLabel" === s ? ((e = o.element.find(t)).each(function() {
                    var t = V(this);
                    t.children(".ui-controlgroup-label-contents").length || t.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");
                }), o._addClass(e, null, "ui-widget ui-widget-content ui-state-default"), 
                void (a = a.concat(e.get()))) : void (V.fn[s] && (n = o["_" + s + "Options"] ? o["_" + s + "Options"]("middle") : {
                    classes: {}
                }, o.element.find(t).each(function() {
                    var t = V(this), e = t[s]("instance"), i = V.widget.extend({}, n);
                    "button" === s && t.parent(".ui-spinner").length || ((e = e || t[s]()[s]("instance")) && (i.classes = o._resolveClassesValues(i.classes, e)), 
                    t[s](i), i = t[s]("widget"), V.data(i[0], "ui-controlgroup-data", e || t[s]("instance")), 
                    a.push(i[0]));
                })));
            }), this.childWidgets = V(V.uniqueSort(a)), this._addClass(this.childWidgets, "ui-controlgroup-item");
        },
        _callChildMethod: function(e) {
            this.childWidgets.each(function() {
                var t = V(this).data("ui-controlgroup-data");
                t && t[e] && t[e]();
            });
        },
        _updateCornerClass: function(t, e) {
            e = this._buildSimpleOptions(e, "label").classes.label, this._removeClass(t, null, "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all"), 
            this._addClass(t, null, e);
        },
        _buildSimpleOptions: function(t, e) {
            var i = "vertical" === this.options.direction, s = {
                classes: {}
            };
            return s.classes[e] = {
                middle: "",
                first: "ui-corner-" + (i ? "top" : "left"),
                last: "ui-corner-" + (i ? "bottom" : "right"),
                only: "ui-corner-all"
            }[t], s;
        },
        _spinnerOptions: function(t) {
            return (t = this._buildSimpleOptions(t, "ui-spinner")).classes["ui-spinner-up"] = "", 
            t.classes["ui-spinner-down"] = "", t;
        },
        _buttonOptions: function(t) {
            return this._buildSimpleOptions(t, "ui-button");
        },
        _checkboxradioOptions: function(t) {
            return this._buildSimpleOptions(t, "ui-checkboxradio-label");
        },
        _selectmenuOptions: function(t) {
            var e = "vertical" === this.options.direction;
            return {
                width: e && "auto",
                classes: {
                    middle: {
                        "ui-selectmenu-button-open": "",
                        "ui-selectmenu-button-closed": ""
                    },
                    first: {
                        "ui-selectmenu-button-open": "ui-corner-" + (e ? "top" : "tl"),
                        "ui-selectmenu-button-closed": "ui-corner-" + (e ? "top" : "left")
                    },
                    last: {
                        "ui-selectmenu-button-open": e ? "" : "ui-corner-tr",
                        "ui-selectmenu-button-closed": "ui-corner-" + (e ? "bottom" : "right")
                    },
                    only: {
                        "ui-selectmenu-button-open": "ui-corner-top",
                        "ui-selectmenu-button-closed": "ui-corner-all"
                    }
                }[t]
            };
        },
        _resolveClassesValues: function(i, s) {
            var n = {};
            return V.each(i, function(t) {
                var e = s.options.classes[t] || "", e = String.prototype.trim.call(e.replace(tt, ""));
                n[t] = (e + " " + i[t]).replace(/\s+/g, " ");
            }), n;
        },
        _setOption: function(t, e) {
            "direction" === t && this._removeClass("ui-controlgroup-" + this.options.direction), 
            this._super(t, e), "disabled" !== t ? this.refresh() : this._callChildMethod(e ? "disable" : "enable");
        },
        refresh: function() {
            var n, o = this;
            this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction), 
            "horizontal" === this.options.direction && this._addClass(null, "ui-helper-clearfix"), 
            this._initWidgets(), n = this.childWidgets, (n = this.options.onlyVisible ? n.filter(":visible") : n).length && (V.each([ "first", "last" ], function(t, e) {
                var i, s = n[e]().data("ui-controlgroup-data");
                s && o["_" + s.widgetName + "Options"] ? ((i = o["_" + s.widgetName + "Options"](1 === n.length ? "only" : e)).classes = o._resolveClassesValues(i.classes, s), 
                s.element[s.widgetName](i)) : o._updateCornerClass(n[e](), e);
            }), this._callChildMethod("refresh"));
        }
    }), V.widget("ui.checkboxradio", [ V.ui.formResetMixin, {
        version: "1.13.1",
        options: {
            disabled: null,
            label: null,
            icon: !0,
            classes: {
                "ui-checkboxradio-label": "ui-corner-all",
                "ui-checkboxradio-icon": "ui-corner-all"
            }
        },
        _getCreateOptions: function() {
            var t, e = this, i = this._super() || {};
            return this._readType(), t = this.element.labels(), this.label = V(t[t.length - 1]), 
            this.label.length || V.error("No label found for checkboxradio widget"), 
            this.originalLabel = "", this.label.contents().not(this.element[0]).each(function() {
                e.originalLabel += 3 === this.nodeType ? V(this).text() : this.outerHTML;
            }), this.originalLabel && (i.label = this.originalLabel), null != (t = this.element[0].disabled) && (i.disabled = t), 
            i;
        },
        _create: function() {
            var t = this.element[0].checked;
            this._bindFormResetHandler(), null == this.options.disabled && (this.options.disabled = this.element[0].disabled), 
            this._setOption("disabled", this.options.disabled), this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible"), 
            this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget"), 
            "radio" === this.type && this._addClass(this.label, "ui-checkboxradio-radio-label"), 
            this.options.label && this.options.label !== this.originalLabel ? this._updateLabel() : this.originalLabel && (this.options.label = this.originalLabel), 
            this._enhance(), t && this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active"), 
            this._on({
                change: "_toggleClasses",
                focus: function() {
                    this._addClass(this.label, null, "ui-state-focus ui-visual-focus");
                },
                blur: function() {
                    this._removeClass(this.label, null, "ui-state-focus ui-visual-focus");
                }
            });
        },
        _readType: function() {
            var t = this.element[0].nodeName.toLowerCase();
            this.type = this.element[0].type, "input" === t && /radio|checkbox/.test(this.type) || V.error("Can't create checkboxradio on element.nodeName=" + t + " and element.type=" + this.type);
        },
        _enhance: function() {
            this._updateIcon(this.element[0].checked);
        },
        widget: function() {
            return this.label;
        },
        _getRadioGroup: function() {
            var t = this.element[0].name, e = "input[name='" + V.escapeSelector(t) + "']";
            return t ? (this.form.length ? V(this.form[0].elements).filter(e) : V(e).filter(function() {
                return 0 === V(this)._form().length;
            })).not(this.element) : V([]);
        },
        _toggleClasses: function() {
            var t = this.element[0].checked;
            this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", t), 
            this.options.icon && "checkbox" === this.type && this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", t)._toggleClass(this.icon, null, "ui-icon-blank", !t), 
            "radio" === this.type && this._getRadioGroup().each(function() {
                var t = V(this).checkboxradio("instance");
                t && t._removeClass(t.label, "ui-checkboxradio-checked", "ui-state-active");
            });
        },
        _destroy: function() {
            this._unbindFormResetHandler(), this.icon && (this.icon.remove(), this.iconSpace.remove());
        },
        _setOption: function(t, e) {
            if ("label" !== t || e) {
                if (this._super(t, e), "disabled" === t) return this._toggleClass(this.label, null, "ui-state-disabled", e), 
                void (this.element[0].disabled = e);
                this.refresh();
            }
        },
        _updateIcon: function(t) {
            var e = "ui-icon ui-icon-background ";
            this.options.icon ? (this.icon || (this.icon = V("<span>"), this.iconSpace = V("<span> </span>"), 
            this._addClass(this.iconSpace, "ui-checkboxradio-icon-space")), "checkbox" === this.type ? (e += t ? "ui-icon-check ui-state-checked" : "ui-icon-blank", 
            this._removeClass(this.icon, null, t ? "ui-icon-blank" : "ui-icon-check")) : e += "ui-icon-blank", 
            this._addClass(this.icon, "ui-checkboxradio-icon", e), t || this._removeClass(this.icon, null, "ui-icon-check ui-state-checked"), 
            this.icon.prependTo(this.label).after(this.iconSpace)) : void 0 !== this.icon && (this.icon.remove(), 
            this.iconSpace.remove(), delete this.icon);
        },
        _updateLabel: function() {
            var t = this.label.contents().not(this.element[0]);
            this.icon && (t = t.not(this.icon[0])), (t = this.iconSpace ? t.not(this.iconSpace[0]) : t).remove(), 
            this.label.append(this.options.label);
        },
        refresh: function() {
            var t = this.element[0].checked, e = this.element[0].disabled;
            this._updateIcon(t), this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", t), 
            null !== this.options.label && this._updateLabel(), e !== this.options.disabled && this._setOptions({
                disabled: e
            });
        }
    } ]), V.ui.checkboxradio, V.widget("ui.button", {
        version: "1.13.1",
        defaultElement: "<button>",
        options: {
            classes: {
                "ui-button": "ui-corner-all"
            },
            disabled: null,
            icon: null,
            iconPosition: "beginning",
            label: null,
            showLabel: !0
        },
        _getCreateOptions: function() {
            var t, e = this._super() || {};
            return this.isInput = this.element.is("input"), null != (t = this.element[0].disabled) && (e.disabled = t), 
            this.originalLabel = this.isInput ? this.element.val() : this.element.html(), 
            this.originalLabel && (e.label = this.originalLabel), e;
        },
        _create: function() {
            !this.option.showLabel & !this.options.icon && (this.options.showLabel = !0), 
            null == this.options.disabled && (this.options.disabled = this.element[0].disabled || !1), 
            this.hasTitle = !!this.element.attr("title"), this.options.label && this.options.label !== this.originalLabel && (this.isInput ? this.element.val(this.options.label) : this.element.html(this.options.label)), 
            this._addClass("ui-button", "ui-widget"), this._setOption("disabled", this.options.disabled), 
            this._enhance(), this.element.is("a") && this._on({
                keyup: function(t) {
                    t.keyCode === V.ui.keyCode.SPACE && (t.preventDefault(), this.element[0].click ? this.element[0].click() : this.element.trigger("click"));
                }
            });
        },
        _enhance: function() {
            this.element.is("button") || this.element.attr("role", "button"), this.options.icon && (this._updateIcon("icon", this.options.icon), 
            this._updateTooltip());
        },
        _updateTooltip: function() {
            this.title = this.element.attr("title"), this.options.showLabel || this.title || this.element.attr("title", this.options.label);
        },
        _updateIcon: function(t, e) {
            var i = "iconPosition" !== t, s = i ? this.options.iconPosition : e, t = "top" === s || "bottom" === s;
            this.icon ? i && this._removeClass(this.icon, null, this.options.icon) : (this.icon = V("<span>"), 
            this._addClass(this.icon, "ui-button-icon", "ui-icon"), this.options.showLabel || this._addClass("ui-button-icon-only")), 
            i && this._addClass(this.icon, null, e), this._attachIcon(s), t ? (this._addClass(this.icon, null, "ui-widget-icon-block"), 
            this.iconSpace && this.iconSpace.remove()) : (this.iconSpace || (this.iconSpace = V("<span> </span>"), 
            this._addClass(this.iconSpace, "ui-button-icon-space")), this._removeClass(this.icon, null, "ui-wiget-icon-block"), 
            this._attachIconSpace(s));
        },
        _destroy: function() {
            this.element.removeAttr("role"), this.icon && this.icon.remove(), this.iconSpace && this.iconSpace.remove(), 
            this.hasTitle || this.element.removeAttr("title");
        },
        _attachIconSpace: function(t) {
            this.icon[/^(?:end|bottom)/.test(t) ? "before" : "after"](this.iconSpace);
        },
        _attachIcon: function(t) {
            this.element[/^(?:end|bottom)/.test(t) ? "append" : "prepend"](this.icon);
        },
        _setOptions: function(t) {
            var e = (void 0 === t.showLabel ? this.options : t).showLabel, i = (void 0 === t.icon ? this.options : t).icon;
            e || i || (t.showLabel = !0), this._super(t);
        },
        _setOption: function(t, e) {
            "icon" === t && (e ? this._updateIcon(t, e) : this.icon && (this.icon.remove(), 
            this.iconSpace && this.iconSpace.remove())), "iconPosition" === t && this._updateIcon(t, e), 
            "showLabel" === t && (this._toggleClass("ui-button-icon-only", null, !e), 
            this._updateTooltip()), "label" === t && (this.isInput ? this.element.val(e) : (this.element.html(e), 
            this.icon && (this._attachIcon(this.options.iconPosition), this._attachIconSpace(this.options.iconPosition)))), 
            this._super(t, e), "disabled" === t && (this._toggleClass(null, "ui-state-disabled", e), 
            (this.element[0].disabled = e) && this.element.trigger("blur"));
        },
        refresh: function() {
            var t = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");
            t !== this.options.disabled && this._setOptions({
                disabled: t
            }), this._updateTooltip();
        }
    }), !1 !== V.uiBackCompat && (V.widget("ui.button", V.ui.button, {
        options: {
            text: !0,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function() {
            this.options.showLabel && !this.options.text && (this.options.showLabel = this.options.text), 
            !this.options.showLabel && this.options.text && (this.options.text = this.options.showLabel), 
            this.options.icon || !this.options.icons.primary && !this.options.icons.secondary ? this.options.icon && (this.options.icons.primary = this.options.icon) : this.options.icons.primary ? this.options.icon = this.options.icons.primary : (this.options.icon = this.options.icons.secondary, 
            this.options.iconPosition = "end"), this._super();
        },
        _setOption: function(t, e) {
            "text" !== t ? ("showLabel" === t && (this.options.text = e), "icon" === t && (this.options.icons.primary = e), 
            "icons" === t && (e.primary ? (this._super("icon", e.primary), this._super("iconPosition", "beginning")) : e.secondary && (this._super("icon", e.secondary), 
            this._super("iconPosition", "end"))), this._superApply(arguments)) : this._super("showLabel", e);
        }
    }), V.fn.button = (et = V.fn.button, function(i) {
        var t = "string" == typeof i, s = Array.prototype.slice.call(arguments, 1), n = this;
        return t ? this.length || "instance" !== i ? this.each(function() {
            var t = V(this).attr("type"), e = V.data(this, "ui-" + ("checkbox" !== t && "radio" !== t ? "button" : "checkboxradio"));
            return "instance" === i ? (n = e, !1) : e ? "function" != typeof e[i] || "_" === i.charAt(0) ? V.error("no such method '" + i + "' for button widget instance") : (t = e[i].apply(e, s)) !== e && void 0 !== t ? (n = t && t.jquery ? n.pushStack(t.get()) : t, 
            !1) : void 0 : V.error("cannot call methods on button prior to initialization; attempted to call method '" + i + "'");
        }) : n = void 0 : (s.length && (i = V.widget.extend.apply(null, [ i ].concat(s))), 
        this.each(function() {
            var t = V(this).attr("type"), e = "checkbox" !== t && "radio" !== t ? "button" : "checkboxradio";
            (t = V.data(this, "ui-" + e)) ? (t.option(i || {}), t._init && t._init()) : "button" != e ? V(this).checkboxradio(V.extend({
                icon: !1
            }, i)) : et.call(V(this), i);
        })), n;
    }), V.fn.buttonset = function() {
        return V.ui.controlgroup || V.error("Controlgroup widget missing"), "option" === arguments[0] && "items" === arguments[1] && arguments[2] ? this.controlgroup.apply(this, [ arguments[0], "items.button", arguments[2] ]) : "option" === arguments[0] && "items" === arguments[1] ? this.controlgroup.apply(this, [ arguments[0], "items.button" ]) : ("object" == typeof arguments[0] && arguments[0].items && (arguments[0].items = {
            button: arguments[0].items
        }), this.controlgroup.apply(this, arguments));
    }), V.ui.button, V.extend(V.ui, {
        datepicker: {
            version: "1.13.1"
        }
    }), V.extend(st.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function() {
            return this.dpDiv;
        },
        setDefaults: function(t) {
            return at(this._defaults, t || {}), this;
        },
        _attachDatepicker: function(t, e) {
            var i, s = t.nodeName.toLowerCase(), n = "div" === s || "span" === s;
            t.id || (this.uuid += 1, t.id = "dp" + this.uuid), (i = this._newInst(V(t), n)).settings = V.extend({}, e || {}), 
            "input" === s ? this._connectDatepicker(t, i) : n && this._inlineDatepicker(t, i);
        },
        _newInst: function(t, e) {
            return {
                id: t[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"),
                input: t,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: e,
                dpDiv: e ? nt(V("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
            };
        },
        _connectDatepicker: function(t, e) {
            var i = V(t);
            e.append = V([]), e.trigger = V([]), i.hasClass(this.markerClassName) || (this._attachments(i, e), 
            i.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp), 
            this._autoSize(e), V.data(t, "datepicker", e), e.settings.disabled && this._disableDatepicker(t));
        },
        _attachments: function(t, e) {
            var i, s = this._get(e, "appendText"), n = this._get(e, "isRTL");
            e.append && e.append.remove(), s && (e.append = V("<span>").addClass(this._appendClass).text(s), 
            t[n ? "before" : "after"](e.append)), t.off("focus", this._showDatepicker), 
            e.trigger && e.trigger.remove(), "focus" !== (i = this._get(e, "showOn")) && "both" !== i || t.on("focus", this._showDatepicker), 
            "button" !== i && "both" !== i || (s = this._get(e, "buttonText"), i = this._get(e, "buttonImage"), 
            this._get(e, "buttonImageOnly") ? e.trigger = V("<img>").addClass(this._triggerClass).attr({
                src: i,
                alt: s,
                title: s
            }) : (e.trigger = V("<button type='button'>").addClass(this._triggerClass), 
            i ? e.trigger.html(V("<img>").attr({
                src: i,
                alt: s,
                title: s
            })) : e.trigger.text(s)), t[n ? "before" : "after"](e.trigger), e.trigger.on("click", function() {
                return V.datepicker._datepickerShowing && V.datepicker._lastInput === t[0] ? V.datepicker._hideDatepicker() : (V.datepicker._datepickerShowing && V.datepicker._lastInput !== t[0] && V.datepicker._hideDatepicker(), 
                V.datepicker._showDatepicker(t[0])), !1;
            }));
        },
        _autoSize: function(t) {
            var e, i, s, n, o, a;
            this._get(t, "autoSize") && !t.inline && (o = new Date(2009, 11, 20), 
            (a = this._get(t, "dateFormat")).match(/[DM]/) && (o.setMonth((e = function(t) {
                for (n = s = i = 0; n < t.length; n++) t[n].length > i && (i = t[n].length, 
                s = n);
                return s;
            })(this._get(t, a.match(/MM/) ? "monthNames" : "monthNamesShort"))), 
            o.setDate(e(this._get(t, a.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - o.getDay())), 
            t.input.attr("size", this._formatDate(t, o).length));
        },
        _inlineDatepicker: function(t, e) {
            var i = V(t);
            i.hasClass(this.markerClassName) || (i.addClass(this.markerClassName).append(e.dpDiv), 
            V.data(t, "datepicker", e), this._setDate(e, this._getDefaultDate(e), !0), 
            this._updateDatepicker(e), this._updateAlternate(e), e.settings.disabled && this._disableDatepicker(t), 
            e.dpDiv.css("display", "block"));
        },
        _dialogDatepicker: function(t, e, i, s, n) {
            var o, a = this._dialogInst;
            return a || (this.uuid += 1, o = "dp" + this.uuid, this._dialogInput = V("<input type='text' id='" + o + "' style='position: absolute; top: -100px; width: 0px;'/>"), 
            this._dialogInput.on("keydown", this._doKeyDown), V("body").append(this._dialogInput), 
            (a = this._dialogInst = this._newInst(this._dialogInput, !1)).settings = {}, 
            V.data(this._dialogInput[0], "datepicker", a)), at(a.settings, s || {}), 
            e = e && e.constructor === Date ? this._formatDate(a, e) : e, this._dialogInput.val(e), 
            this._pos = n ? n.length ? n : [ n.pageX, n.pageY ] : null, this._pos || (o = document.documentElement.clientWidth, 
            s = document.documentElement.clientHeight, e = document.documentElement.scrollLeft || document.body.scrollLeft, 
            n = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [ o / 2 - 100 + e, s / 2 - 150 + n ]), 
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), 
            a.settings.onSelect = i, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), 
            this._showDatepicker(this._dialogInput[0]), V.blockUI && V.blockUI(this.dpDiv), 
            V.data(this._dialogInput[0], "datepicker", a), this;
        },
        _destroyDatepicker: function(t) {
            var e, i = V(t), s = V.data(t, "datepicker");
            i.hasClass(this.markerClassName) && (e = t.nodeName.toLowerCase(), V.removeData(t, "datepicker"), 
            "input" === e ? (s.append.remove(), s.trigger.remove(), i.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)) : "div" !== e && "span" !== e || i.removeClass(this.markerClassName).empty(), 
            it === s && (it = null, this._curInst = null));
        },
        _enableDatepicker: function(e) {
            var t, i = V(e), s = V.data(e, "datepicker");
            i.hasClass(this.markerClassName) && ("input" === (t = e.nodeName.toLowerCase()) ? (e.disabled = !1, 
            s.trigger.filter("button").each(function() {
                this.disabled = !1;
            }).end().filter("img").css({
                opacity: "1.0",
                cursor: ""
            })) : "div" !== t && "span" !== t || ((i = i.children("." + this._inlineClass)).children().removeClass("ui-state-disabled"), 
            i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), 
            this._disabledInputs = V.map(this._disabledInputs, function(t) {
                return t === e ? null : t;
            }));
        },
        _disableDatepicker: function(e) {
            var t, i = V(e), s = V.data(e, "datepicker");
            i.hasClass(this.markerClassName) && ("input" === (t = e.nodeName.toLowerCase()) ? (e.disabled = !0, 
            s.trigger.filter("button").each(function() {
                this.disabled = !0;
            }).end().filter("img").css({
                opacity: "0.5",
                cursor: "default"
            })) : "div" !== t && "span" !== t || ((i = i.children("." + this._inlineClass)).children().addClass("ui-state-disabled"), 
            i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), 
            this._disabledInputs = V.map(this._disabledInputs, function(t) {
                return t === e ? null : t;
            }), this._disabledInputs[this._disabledInputs.length] = e);
        },
        _isDisabledDatepicker: function(t) {
            if (!t) return !1;
            for (var e = 0; e < this._disabledInputs.length; e++) if (this._disabledInputs[e] === t) return !0;
            return !1;
        },
        _getInst: function(t) {
            try {
                return V.data(t, "datepicker");
            } catch (t) {
                throw "Missing instance data for this datepicker";
            }
        },
        _optionDatepicker: function(t, e, i) {
            var s, n, o = this._getInst(t);
            if (2 === arguments.length && "string" == typeof e) return "defaults" === e ? V.extend({}, V.datepicker._defaults) : o ? "all" === e ? V.extend({}, o.settings) : this._get(o, e) : null;
            s = e || {}, "string" == typeof e && ((s = {})[e] = i), o && (this._curInst === o && this._hideDatepicker(), 
            n = this._getDateDatepicker(t, !0), e = this._getMinMaxDate(o, "min"), 
            i = this._getMinMaxDate(o, "max"), at(o.settings, s), null !== e && void 0 !== s.dateFormat && void 0 === s.minDate && (o.settings.minDate = this._formatDate(o, e)), 
            null !== i && void 0 !== s.dateFormat && void 0 === s.maxDate && (o.settings.maxDate = this._formatDate(o, i)), 
            "disabled" in s && (s.disabled ? this._disableDatepicker(t) : this._enableDatepicker(t)), 
            this._attachments(V(t), o), this._autoSize(o), this._setDate(o, n), 
            this._updateAlternate(o), this._updateDatepicker(o));
        },
        _changeDatepicker: function(t, e, i) {
            this._optionDatepicker(t, e, i);
        },
        _refreshDatepicker: function(t) {
            (t = this._getInst(t)) && this._updateDatepicker(t);
        },
        _setDateDatepicker: function(t, e) {
            (t = this._getInst(t)) && (this._setDate(t, e), this._updateDatepicker(t), 
            this._updateAlternate(t));
        },
        _getDateDatepicker: function(t, e) {
            return (t = this._getInst(t)) && !t.inline && this._setDateFromField(t, e), 
            t ? this._getDate(t) : null;
        },
        _doKeyDown: function(t) {
            var e, i, s = V.datepicker._getInst(t.target), n = !0, o = s.dpDiv.is(".ui-datepicker-rtl");
            if (s._keyEvent = !0, V.datepicker._datepickerShowing) switch (t.keyCode) {
              case 9:
                V.datepicker._hideDatepicker(), n = !1;
                break;

              case 13:
                return (i = V("td." + V.datepicker._dayOverClass + ":not(." + V.datepicker._currentClass + ")", s.dpDiv))[0] && V.datepicker._selectDay(t.target, s.selectedMonth, s.selectedYear, i[0]), 
                (e = V.datepicker._get(s, "onSelect")) ? (i = V.datepicker._formatDate(s), 
                e.apply(s.input ? s.input[0] : null, [ i, s ])) : V.datepicker._hideDatepicker(), 
                !1;

              case 27:
                V.datepicker._hideDatepicker();
                break;

              case 33:
                V.datepicker._adjustDate(t.target, t.ctrlKey ? -V.datepicker._get(s, "stepBigMonths") : -V.datepicker._get(s, "stepMonths"), "M");
                break;

              case 34:
                V.datepicker._adjustDate(t.target, t.ctrlKey ? +V.datepicker._get(s, "stepBigMonths") : +V.datepicker._get(s, "stepMonths"), "M");
                break;

              case 35:
                (t.ctrlKey || t.metaKey) && V.datepicker._clearDate(t.target), n = t.ctrlKey || t.metaKey;
                break;

              case 36:
                (t.ctrlKey || t.metaKey) && V.datepicker._gotoToday(t.target), n = t.ctrlKey || t.metaKey;
                break;

              case 37:
                (t.ctrlKey || t.metaKey) && V.datepicker._adjustDate(t.target, o ? 1 : -1, "D"), 
                n = t.ctrlKey || t.metaKey, t.originalEvent.altKey && V.datepicker._adjustDate(t.target, t.ctrlKey ? -V.datepicker._get(s, "stepBigMonths") : -V.datepicker._get(s, "stepMonths"), "M");
                break;

              case 38:
                (t.ctrlKey || t.metaKey) && V.datepicker._adjustDate(t.target, -7, "D"), 
                n = t.ctrlKey || t.metaKey;
                break;

              case 39:
                (t.ctrlKey || t.metaKey) && V.datepicker._adjustDate(t.target, o ? -1 : 1, "D"), 
                n = t.ctrlKey || t.metaKey, t.originalEvent.altKey && V.datepicker._adjustDate(t.target, t.ctrlKey ? +V.datepicker._get(s, "stepBigMonths") : +V.datepicker._get(s, "stepMonths"), "M");
                break;

              case 40:
                (t.ctrlKey || t.metaKey) && V.datepicker._adjustDate(t.target, 7, "D"), 
                n = t.ctrlKey || t.metaKey;
                break;

              default:
                n = !1;
            } else 36 === t.keyCode && t.ctrlKey ? V.datepicker._showDatepicker(this) : n = !1;
            n && (t.preventDefault(), t.stopPropagation());
        },
        _doKeyPress: function(t) {
            var e, i = V.datepicker._getInst(t.target);
            if (V.datepicker._get(i, "constrainInput")) return e = V.datepicker._possibleChars(V.datepicker._get(i, "dateFormat")), 
            i = String.fromCharCode(null == t.charCode ? t.keyCode : t.charCode), 
            t.ctrlKey || t.metaKey || i < " " || !e || -1 < e.indexOf(i);
        },
        _doKeyUp: function(t) {
            if ((t = V.datepicker._getInst(t.target)).input.val() !== t.lastVal) try {
                V.datepicker.parseDate(V.datepicker._get(t, "dateFormat"), t.input ? t.input.val() : null, V.datepicker._getFormatConfig(t)) && (V.datepicker._setDateFromField(t), 
                V.datepicker._updateAlternate(t), V.datepicker._updateDatepicker(t));
            } catch (t) {}
            return !0;
        },
        _showDatepicker: function(t) {
            var e, i, s, n;
            "input" !== (t = t.target || t).nodeName.toLowerCase() && (t = V("input", t.parentNode)[0]), 
            V.datepicker._isDisabledDatepicker(t) || V.datepicker._lastInput === t || (n = V.datepicker._getInst(t), 
            V.datepicker._curInst && V.datepicker._curInst !== n && (V.datepicker._curInst.dpDiv.stop(!0, !0), 
            n && V.datepicker._datepickerShowing && V.datepicker._hideDatepicker(V.datepicker._curInst.input[0])), 
            !1 !== (i = (s = V.datepicker._get(n, "beforeShow")) ? s.apply(t, [ t, n ]) : {}) && (at(n.settings, i), 
            n.lastVal = null, V.datepicker._lastInput = t, V.datepicker._setDateFromField(n), 
            V.datepicker._inDialog && (t.value = ""), V.datepicker._pos || (V.datepicker._pos = V.datepicker._findPos(t), 
            V.datepicker._pos[1] += t.offsetHeight), e = !1, V(t).parents().each(function() {
                return !(e |= "fixed" === V(this).css("position"));
            }), s = {
                left: V.datepicker._pos[0],
                top: V.datepicker._pos[1]
            }, V.datepicker._pos = null, n.dpDiv.empty(), n.dpDiv.css({
                position: "absolute",
                display: "block",
                top: "-1000px"
            }), V.datepicker._updateDatepicker(n), s = V.datepicker._checkOffset(n, s, e), 
            n.dpDiv.css({
                position: V.datepicker._inDialog && V.blockUI ? "static" : e ? "fixed" : "absolute",
                display: "none",
                left: s.left + "px",
                top: s.top + "px"
            }), n.inline || (i = V.datepicker._get(n, "showAnim"), s = V.datepicker._get(n, "duration"), 
            n.dpDiv.css("z-index", function(t) {
                for (var e; t.length && t[0] !== document; ) {
                    if (("absolute" === (e = t.css("position")) || "relative" === e || "fixed" === e) && (e = parseInt(t.css("zIndex"), 10), 
                    !isNaN(e) && 0 !== e)) return e;
                    t = t.parent();
                }
                return 0;
            }(V(t)) + 1), V.datepicker._datepickerShowing = !0, V.effects && V.effects.effect[i] ? n.dpDiv.show(i, V.datepicker._get(n, "showOptions"), s) : n.dpDiv[i || "show"](i ? s : null), 
            V.datepicker._shouldFocusInput(n) && n.input.trigger("focus"), V.datepicker._curInst = n)));
        },
        _updateDatepicker: function(t) {
            this.maxRows = 4, (it = t).dpDiv.empty().append(this._generateHTML(t)), 
            this._attachHandlers(t);
            var e, i = this._getNumberOfMonths(t), s = i[1], n = t.dpDiv.find("." + this._dayOverClass + " a"), o = V.datepicker._get(t, "onUpdateDatepicker");
            0 < n.length && ot.apply(n.get(0)), t.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), 
            1 < s && t.dpDiv.addClass("ui-datepicker-multi-" + s).css("width", 17 * s + "em"), 
            t.dpDiv[(1 !== i[0] || 1 !== i[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), 
            t.dpDiv[(this._get(t, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), 
            t === V.datepicker._curInst && V.datepicker._datepickerShowing && V.datepicker._shouldFocusInput(t) && t.input.trigger("focus"), 
            t.yearshtml && (e = t.yearshtml, setTimeout(function() {
                e === t.yearshtml && t.yearshtml && t.dpDiv.find("select.ui-datepicker-year").first().replaceWith(t.yearshtml), 
                e = t.yearshtml = null;
            }, 0)), o && o.apply(t.input ? t.input[0] : null, [ t ]);
        },
        _shouldFocusInput: function(t) {
            return t.input && t.input.is(":visible") && !t.input.is(":disabled") && !t.input.is(":focus");
        },
        _checkOffset: function(t, e, i) {
            var s = t.dpDiv.outerWidth(), n = t.dpDiv.outerHeight(), o = t.input ? t.input.outerWidth() : 0, a = t.input ? t.input.outerHeight() : 0, r = document.documentElement.clientWidth + (i ? 0 : V(document).scrollLeft()), l = document.documentElement.clientHeight + (i ? 0 : V(document).scrollTop());
            return e.left -= this._get(t, "isRTL") ? s - o : 0, e.left -= i && e.left === t.input.offset().left ? V(document).scrollLeft() : 0, 
            e.top -= i && e.top === t.input.offset().top + a ? V(document).scrollTop() : 0, 
            e.left -= Math.min(e.left, e.left + s > r && s < r ? Math.abs(e.left + s - r) : 0), 
            e.top -= Math.min(e.top, e.top + n > l && n < l ? Math.abs(n + a) : 0), 
            e;
        },
        _findPos: function(t) {
            for (var e = this._getInst(t), i = this._get(e, "isRTL"); t && ("hidden" === t.type || 1 !== t.nodeType || V.expr.pseudos.hidden(t)); ) t = t[i ? "previousSibling" : "nextSibling"];
            return [ (e = V(t).offset()).left, e.top ];
        },
        _hideDatepicker: function(t) {
            var e, i, s = this._curInst;
            !s || t && s !== V.data(t, "datepicker") || this._datepickerShowing && (e = this._get(s, "showAnim"), 
            i = this._get(s, "duration"), t = function() {
                V.datepicker._tidyDialog(s);
            }, V.effects && (V.effects.effect[e] || V.effects[e]) ? s.dpDiv.hide(e, V.datepicker._get(s, "showOptions"), i, t) : s.dpDiv["slideDown" === e ? "slideUp" : "fadeIn" === e ? "fadeOut" : "hide"](e ? i : null, t), 
            e || t(), this._datepickerShowing = !1, (t = this._get(s, "onClose")) && t.apply(s.input ? s.input[0] : null, [ s.input ? s.input.val() : "", s ]), 
            this._lastInput = null, this._inDialog && (this._dialogInput.css({
                position: "absolute",
                left: "0",
                top: "-100px"
            }), V.blockUI && (V.unblockUI(), V("body").append(this.dpDiv))), this._inDialog = !1);
        },
        _tidyDialog: function(t) {
            t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");
        },
        _checkExternalClick: function(t) {
            var e;
            V.datepicker._curInst && (e = V(t.target), t = V.datepicker._getInst(e[0]), 
            (!(e[0].id === V.datepicker._mainDivId || 0 !== e.parents("#" + V.datepicker._mainDivId).length || e.hasClass(V.datepicker.markerClassName) || e.closest("." + V.datepicker._triggerClass).length || !V.datepicker._datepickerShowing || V.datepicker._inDialog && V.blockUI) || e.hasClass(V.datepicker.markerClassName) && V.datepicker._curInst !== t) && V.datepicker._hideDatepicker());
        },
        _adjustDate: function(t, e, i) {
            var s = V(t), t = this._getInst(s[0]);
            this._isDisabledDatepicker(s[0]) || (this._adjustInstDate(t, e, i), 
            this._updateDatepicker(t));
        },
        _gotoToday: function(t) {
            var e = V(t), i = this._getInst(e[0]);
            this._get(i, "gotoCurrent") && i.currentDay ? (i.selectedDay = i.currentDay, 
            i.drawMonth = i.selectedMonth = i.currentMonth, i.drawYear = i.selectedYear = i.currentYear) : (t = new Date(), 
            i.selectedDay = t.getDate(), i.drawMonth = i.selectedMonth = t.getMonth(), 
            i.drawYear = i.selectedYear = t.getFullYear()), this._notifyChange(i), 
            this._adjustDate(e);
        },
        _selectMonthYear: function(t, e, i) {
            var s = V(t);
            (t = this._getInst(s[0]))["selected" + ("M" === i ? "Month" : "Year")] = t["draw" + ("M" === i ? "Month" : "Year")] = parseInt(e.options[e.selectedIndex].value, 10), 
            this._notifyChange(t), this._adjustDate(s);
        },
        _selectDay: function(t, e, i, s) {
            var n = V(t);
            V(s).hasClass(this._unselectableClass) || this._isDisabledDatepicker(n[0]) || ((n = this._getInst(n[0])).selectedDay = n.currentDay = parseInt(V("a", s).attr("data-date")), 
            n.selectedMonth = n.currentMonth = e, n.selectedYear = n.currentYear = i, 
            this._selectDate(t, this._formatDate(n, n.currentDay, n.currentMonth, n.currentYear)));
        },
        _clearDate: function(t) {
            t = V(t), this._selectDate(t, "");
        },
        _selectDate: function(t, e) {
            var i = V(t), t = this._getInst(i[0]);
            e = null != e ? e : this._formatDate(t), t.input && t.input.val(e), 
            this._updateAlternate(t), (i = this._get(t, "onSelect")) ? i.apply(t.input ? t.input[0] : null, [ e, t ]) : t.input && t.input.trigger("change"), 
            t.inline ? this._updateDatepicker(t) : (this._hideDatepicker(), this._lastInput = t.input[0], 
            "object" != typeof t.input[0] && t.input.trigger("focus"), this._lastInput = null);
        },
        _updateAlternate: function(t) {
            var e, i, s = this._get(t, "altField");
            s && (e = this._get(t, "altFormat") || this._get(t, "dateFormat"), i = this._getDate(t), 
            t = this.formatDate(e, i, this._getFormatConfig(t)), V(document).find(s).val(t));
        },
        noWeekends: function(t) {
            return [ 0 < (t = t.getDay()) && t < 6, "" ];
        },
        iso8601Week: function(t) {
            var e = new Date(t.getTime());
            return e.setDate(e.getDate() + 4 - (e.getDay() || 7)), t = e.getTime(), 
            e.setMonth(0), e.setDate(1), Math.floor(Math.round((t - e) / 864e5) / 7) + 1;
        },
        parseDate: function(e, n, t) {
            if (null == e || null == n) throw "Invalid arguments";
            if ("" === (n = "object" == typeof n ? n.toString() : n + "")) return null;
            for (var i, o, a = 0, r = "string" != typeof (r = (t ? t.shortYearCutoff : null) || this._defaults.shortYearCutoff) ? r : new Date().getFullYear() % 100 + parseInt(r, 10), l = (t ? t.dayNamesShort : null) || this._defaults.dayNamesShort, h = (t ? t.dayNames : null) || this._defaults.dayNames, c = (t ? t.monthNamesShort : null) || this._defaults.monthNamesShort, u = (t ? t.monthNames : null) || this._defaults.monthNames, d = -1, p = -1, f = -1, g = -1, m = !1, _ = function(t) {
                return (t = w + 1 < e.length && e.charAt(w + 1) === t) && w++, t;
            }, v = function(t) {
                var e = _(t), e = "@" === t ? 14 : "!" === t ? 20 : "y" === t && e ? 4 : "o" === t ? 3 : 2, e = new RegExp("^\\d{" + ("y" === t ? e : 1) + "," + e + "}");
                if (e = n.substring(a).match(e)) return a += e[0].length, parseInt(e[0], 10);
                throw "Missing number at position " + a;
            }, b = function(t, e, i) {
                var s = -1, e = V.map(_(t) ? i : e, function(t, e) {
                    return [ [ e, t ] ];
                }).sort(function(t, e) {
                    return -(t[1].length - e[1].length);
                });
                if (V.each(e, function(t, e) {
                    var i = e[1];
                    if (n.substr(a, i.length).toLowerCase() === i.toLowerCase()) return s = e[0], 
                    a += i.length, !1;
                }), -1 !== s) return s + 1;
                throw "Unknown name at position " + a;
            }, y = function() {
                if (n.charAt(a) !== e.charAt(w)) throw "Unexpected literal at position " + a;
                a++;
            }, w = 0; w < e.length; w++) if (m) "'" !== e.charAt(w) || _("'") ? y() : m = !1; else switch (e.charAt(w)) {
              case "d":
                f = v("d");
                break;

              case "D":
                b("D", l, h);
                break;

              case "o":
                g = v("o");
                break;

              case "m":
                p = v("m");
                break;

              case "M":
                p = b("M", c, u);
                break;

              case "y":
                d = v("y");
                break;

              case "@":
                d = (o = new Date(v("@"))).getFullYear(), p = o.getMonth() + 1, 
                f = o.getDate();
                break;

              case "!":
                d = (o = new Date((v("!") - this._ticksTo1970) / 1e4)).getFullYear(), 
                p = o.getMonth() + 1, f = o.getDate();
                break;

              case "'":
                _("'") ? y() : m = !0;
                break;

              default:
                y();
            }
            if (a < n.length && (t = n.substr(a), !/^\s+/.test(t))) throw "Extra/unparsed characters found in date: " + t;
            if (-1 === d ? d = new Date().getFullYear() : d < 100 && (d += new Date().getFullYear() - new Date().getFullYear() % 100 + (d <= r ? 0 : -100)), 
            -1 < g) for (p = 1, f = g; !(f <= (i = this._getDaysInMonth(d, p - 1))); ) p++, 
            f -= i;
            if ((o = this._daylightSavingAdjust(new Date(d, p - 1, f))).getFullYear() !== d || o.getMonth() + 1 !== p || o.getDate() !== f) throw "Invalid date";
            return o;
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1e7,
        formatDate: function(e, t, i) {
            if (!t) return "";
            function s(t, e, i) {
                var s = "" + e;
                if (c(t)) for (;s.length < i; ) s = "0" + s;
                return s;
            }
            function n(t, e, i, s) {
                return (c(t) ? s : i)[e];
            }
            var o, a = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort, r = (i ? i.dayNames : null) || this._defaults.dayNames, l = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort, h = (i ? i.monthNames : null) || this._defaults.monthNames, c = function(t) {
                return (t = o + 1 < e.length && e.charAt(o + 1) === t) && o++, t;
            }, u = "", d = !1;
            if (t) for (o = 0; o < e.length; o++) if (d) "'" !== e.charAt(o) || c("'") ? u += e.charAt(o) : d = !1; else switch (e.charAt(o)) {
              case "d":
                u += s("d", t.getDate(), 2);
                break;

              case "D":
                u += n("D", t.getDay(), a, r);
                break;

              case "o":
                u += s("o", Math.round((new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime() - new Date(t.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                break;

              case "m":
                u += s("m", t.getMonth() + 1, 2);
                break;

              case "M":
                u += n("M", t.getMonth(), l, h);
                break;

              case "y":
                u += c("y") ? t.getFullYear() : (t.getFullYear() % 100 < 10 ? "0" : "") + t.getFullYear() % 100;
                break;

              case "@":
                u += t.getTime();
                break;

              case "!":
                u += 1e4 * t.getTime() + this._ticksTo1970;
                break;

              case "'":
                c("'") ? u += "'" : d = !0;
                break;

              default:
                u += e.charAt(o);
            }
            return u;
        },
        _possibleChars: function(e) {
            for (var t = "", i = !1, s = function(t) {
                return (t = n + 1 < e.length && e.charAt(n + 1) === t) && n++, t;
            }, n = 0; n < e.length; n++) if (i) "'" !== e.charAt(n) || s("'") ? t += e.charAt(n) : i = !1; else switch (e.charAt(n)) {
              case "d":
              case "m":
              case "y":
              case "@":
                t += "0123456789";
                break;

              case "D":
              case "M":
                return null;

              case "'":
                s("'") ? t += "'" : i = !0;
                break;

              default:
                t += e.charAt(n);
            }
            return t;
        },
        _get: function(t, e) {
            return (void 0 !== t.settings[e] ? t.settings : this._defaults)[e];
        },
        _setDateFromField: function(t, e) {
            if (t.input.val() !== t.lastVal) {
                var i = this._get(t, "dateFormat"), s = t.lastVal = t.input ? t.input.val() : null, n = this._getDefaultDate(t), o = n, a = this._getFormatConfig(t);
                try {
                    o = this.parseDate(i, s, a) || n;
                } catch (t) {
                    s = e ? "" : s;
                }
                t.selectedDay = o.getDate(), t.drawMonth = t.selectedMonth = o.getMonth(), 
                t.drawYear = t.selectedYear = o.getFullYear(), t.currentDay = s ? o.getDate() : 0, 
                t.currentMonth = s ? o.getMonth() : 0, t.currentYear = s ? o.getFullYear() : 0, 
                this._adjustInstDate(t);
            }
        },
        _getDefaultDate: function(t) {
            return this._restrictMinMax(t, this._determineDate(t, this._get(t, "defaultDate"), new Date()));
        },
        _determineDate: function(r, t, e) {
            var i, s;
            return (t = (t = null == t || "" === t ? e : "string" == typeof t ? function(t) {
                try {
                    return V.datepicker.parseDate(V.datepicker._get(r, "dateFormat"), t, V.datepicker._getFormatConfig(r));
                } catch (t) {}
                for (var e = (t.toLowerCase().match(/^c/) ? V.datepicker._getDate(r) : null) || new Date(), i = e.getFullYear(), s = e.getMonth(), n = e.getDate(), o = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, a = o.exec(t); a; ) {
                    switch (a[2] || "d") {
                      case "d":
                      case "D":
                        n += parseInt(a[1], 10);
                        break;

                      case "w":
                      case "W":
                        n += 7 * parseInt(a[1], 10);
                        break;

                      case "m":
                      case "M":
                        s += parseInt(a[1], 10), n = Math.min(n, V.datepicker._getDaysInMonth(i, s));
                        break;

                      case "y":
                      case "Y":
                        i += parseInt(a[1], 10), n = Math.min(n, V.datepicker._getDaysInMonth(i, s));
                    }
                    a = o.exec(t);
                }
                return new Date(i, s, n);
            }(t) : "number" == typeof t ? isNaN(t) ? e : (i = t, (s = new Date()).setDate(s.getDate() + i), 
            s) : new Date(t.getTime())) && "Invalid Date" === t.toString() ? e : t) && (t.setHours(0), 
            t.setMinutes(0), t.setSeconds(0), t.setMilliseconds(0)), this._daylightSavingAdjust(t);
        },
        _daylightSavingAdjust: function(t) {
            return t ? (t.setHours(12 < t.getHours() ? t.getHours() + 2 : 0), t) : null;
        },
        _setDate: function(t, e, i) {
            var s = !e, n = t.selectedMonth, o = t.selectedYear, e = this._restrictMinMax(t, this._determineDate(t, e, new Date()));
            t.selectedDay = t.currentDay = e.getDate(), t.drawMonth = t.selectedMonth = t.currentMonth = e.getMonth(), 
            t.drawYear = t.selectedYear = t.currentYear = e.getFullYear(), n === t.selectedMonth && o === t.selectedYear || i || this._notifyChange(t), 
            this._adjustInstDate(t), t.input && t.input.val(s ? "" : this._formatDate(t));
        },
        _getDate: function(t) {
            return !t.currentYear || t.input && "" === t.input.val() ? null : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay));
        },
        _attachHandlers: function(t) {
            var e = this._get(t, "stepMonths"), i = "#" + t.id.replace(/\\\\/g, "\\");
            t.dpDiv.find("[data-handler]").map(function() {
                var t = {
                    prev: function() {
                        V.datepicker._adjustDate(i, -e, "M");
                    },
                    next: function() {
                        V.datepicker._adjustDate(i, +e, "M");
                    },
                    hide: function() {
                        V.datepicker._hideDatepicker();
                    },
                    today: function() {
                        V.datepicker._gotoToday(i);
                    },
                    selectDay: function() {
                        return V.datepicker._selectDay(i, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), 
                        !1;
                    },
                    selectMonth: function() {
                        return V.datepicker._selectMonthYear(i, this, "M"), !1;
                    },
                    selectYear: function() {
                        return V.datepicker._selectMonthYear(i, this, "Y"), !1;
                    }
                };
                V(this).on(this.getAttribute("data-event"), t[this.getAttribute("data-handler")]);
            });
        },
        _generateHTML: function(t) {
            var e, i, s, n, o, a, r, l, h, c, u, d, p, f, g, m, _, v, b, y, w, x, k, C, D, I, T, P, M, S, H, z, A = new Date(), O = this._daylightSavingAdjust(new Date(A.getFullYear(), A.getMonth(), A.getDate())), N = this._get(t, "isRTL"), E = this._get(t, "showButtonPanel"), W = this._get(t, "hideIfNoPrevNext"), F = this._get(t, "navigationAsDateFormat"), L = this._getNumberOfMonths(t), R = this._get(t, "showCurrentAtPos"), A = this._get(t, "stepMonths"), Y = 1 !== L[0] || 1 !== L[1], B = this._daylightSavingAdjust(t.currentDay ? new Date(t.currentYear, t.currentMonth, t.currentDay) : new Date(9999, 9, 9)), j = this._getMinMaxDate(t, "min"), q = this._getMinMaxDate(t, "max"), K = t.drawMonth - R, U = t.drawYear;
            if (K < 0 && (K += 12, U--), q) for (e = this._daylightSavingAdjust(new Date(q.getFullYear(), q.getMonth() - L[0] * L[1] + 1, q.getDate())), 
            e = j && e < j ? j : e; this._daylightSavingAdjust(new Date(U, K, 1)) > e; ) --K < 0 && (K = 11, 
            U--);
            for (t.drawMonth = K, t.drawYear = U, R = this._get(t, "prevText"), 
            R = F ? this.formatDate(R, this._daylightSavingAdjust(new Date(U, K - A, 1)), this._getFormatConfig(t)) : R, 
            i = this._canAdjustMonth(t, -1, U, K) ? V("<a>").attr({
                class: "ui-datepicker-prev ui-corner-all",
                "data-handler": "prev",
                "data-event": "click",
                title: R
            }).append(V("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (N ? "e" : "w")).text(R))[0].outerHTML : W ? "" : V("<a>").attr({
                class: "ui-datepicker-prev ui-corner-all ui-state-disabled",
                title: R
            }).append(V("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (N ? "e" : "w")).text(R))[0].outerHTML, 
            R = this._get(t, "nextText"), R = F ? this.formatDate(R, this._daylightSavingAdjust(new Date(U, K + A, 1)), this._getFormatConfig(t)) : R, 
            s = this._canAdjustMonth(t, 1, U, K) ? V("<a>").attr({
                class: "ui-datepicker-next ui-corner-all",
                "data-handler": "next",
                "data-event": "click",
                title: R
            }).append(V("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (N ? "w" : "e")).text(R))[0].outerHTML : W ? "" : V("<a>").attr({
                class: "ui-datepicker-next ui-corner-all ui-state-disabled",
                title: R
            }).append(V("<span>").attr("class", "ui-icon ui-icon-circle-triangle-" + (N ? "w" : "e")).text(R))[0].outerHTML, 
            A = this._get(t, "currentText"), W = this._get(t, "gotoCurrent") && t.currentDay ? B : O, 
            A = F ? this.formatDate(A, W, this._getFormatConfig(t)) : A, R = "", 
            t.inline || (R = V("<button>").attr({
                type: "button",
                class: "ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all",
                "data-handler": "hide",
                "data-event": "click"
            }).text(this._get(t, "closeText"))[0].outerHTML), F = "", E && (F = V("<div class='ui-datepicker-buttonpane ui-widget-content'>").append(N ? R : "").append(this._isInRange(t, W) ? V("<button>").attr({
                type: "button",
                class: "ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all",
                "data-handler": "today",
                "data-event": "click"
            }).text(A) : "").append(N ? "" : R)[0].outerHTML), n = parseInt(this._get(t, "firstDay"), 10), 
            n = isNaN(n) ? 0 : n, o = this._get(t, "showWeek"), a = this._get(t, "dayNames"), 
            r = this._get(t, "dayNamesMin"), l = this._get(t, "monthNames"), h = this._get(t, "monthNamesShort"), 
            c = this._get(t, "beforeShowDay"), u = this._get(t, "showOtherMonths"), 
            d = this._get(t, "selectOtherMonths"), p = this._getDefaultDate(t), 
            f = "", m = 0; m < L[0]; m++) {
                for (_ = "", this.maxRows = 4, v = 0; v < L[1]; v++) {
                    if (b = this._daylightSavingAdjust(new Date(U, K, t.selectedDay)), 
                    y = " ui-corner-all", w = "", Y) {
                        if (w += "<div class='ui-datepicker-group", 1 < L[1]) switch (v) {
                          case 0:
                            w += " ui-datepicker-group-first", y = " ui-corner-" + (N ? "right" : "left");
                            break;

                          case L[1] - 1:
                            w += " ui-datepicker-group-last", y = " ui-corner-" + (N ? "left" : "right");
                            break;

                          default:
                            w += " ui-datepicker-group-middle", y = "";
                        }
                        w += "'>";
                    }
                    for (w += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + y + "'>" + (/all|left/.test(y) && 0 === m ? N ? s : i : "") + (/all|right/.test(y) && 0 === m ? N ? i : s : "") + this._generateMonthYearHeader(t, K, U, j, q, 0 < m || 0 < v, l, h) + "</div><table class='ui-datepicker-calendar'><thead><tr>", 
                    x = o ? "<th class='ui-datepicker-week-col'>" + this._get(t, "weekHeader") + "</th>" : "", 
                    g = 0; g < 7; g++) x += "<th scope='col'" + (5 <= (g + n + 6) % 7 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + a[k = (g + n) % 7] + "'>" + r[k] + "</span></th>";
                    for (w += x + "</tr></thead><tbody>", D = this._getDaysInMonth(U, K), 
                    U === t.selectedYear && K === t.selectedMonth && (t.selectedDay = Math.min(t.selectedDay, D)), 
                    C = (this._getFirstDayOfMonth(U, K) - n + 7) % 7, D = Math.ceil((C + D) / 7), 
                    I = Y && this.maxRows > D ? this.maxRows : D, this.maxRows = I, 
                    T = this._daylightSavingAdjust(new Date(U, K, 1 - C)), P = 0; P < I; P++) {
                        for (w += "<tr>", M = o ? "<td class='ui-datepicker-week-col'>" + this._get(t, "calculateWeek")(T) + "</td>" : "", 
                        g = 0; g < 7; g++) S = c ? c.apply(t.input ? t.input[0] : null, [ T ]) : [ !0, "" ], 
                        z = (H = T.getMonth() !== K) && !d || !S[0] || j && T < j || q && q < T, 
                        M += "<td class='" + (5 <= (g + n + 6) % 7 ? " ui-datepicker-week-end" : "") + (H ? " ui-datepicker-other-month" : "") + (T.getTime() === b.getTime() && K === t.selectedMonth && t._keyEvent || p.getTime() === T.getTime() && p.getTime() === b.getTime() ? " " + this._dayOverClass : "") + (z ? " " + this._unselectableClass + " ui-state-disabled" : "") + (H && !u ? "" : " " + S[1] + (T.getTime() === B.getTime() ? " " + this._currentClass : "") + (T.getTime() === O.getTime() ? " ui-datepicker-today" : "")) + "'" + (H && !u || !S[2] ? "" : " title='" + S[2].replace(/'/g, "&#39;") + "'") + (z ? "" : " data-handler='selectDay' data-event='click' data-month='" + T.getMonth() + "' data-year='" + T.getFullYear() + "'") + ">" + (H && !u ? "&#xa0;" : z ? "<span class='ui-state-default'>" + T.getDate() + "</span>" : "<a class='ui-state-default" + (T.getTime() === O.getTime() ? " ui-state-highlight" : "") + (T.getTime() === B.getTime() ? " ui-state-active" : "") + (H ? " ui-priority-secondary" : "") + "' href='#' aria-current='" + (T.getTime() === B.getTime() ? "true" : "false") + "' data-date='" + T.getDate() + "'>" + T.getDate() + "</a>") + "</td>", 
                        T.setDate(T.getDate() + 1), T = this._daylightSavingAdjust(T);
                        w += M + "</tr>";
                    }
                    11 < ++K && (K = 0, U++), _ += w += "</tbody></table>" + (Y ? "</div>" + (0 < L[0] && v === L[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                }
                f += _;
            }
            return f += F, t._keyEvent = !1, f;
        },
        _generateMonthYearHeader: function(t, e, i, s, n, o, a, r) {
            var l, h, c, u, d, p, f = this._get(t, "changeMonth"), g = this._get(t, "changeYear"), m = this._get(t, "showMonthAfterYear"), _ = this._get(t, "selectMonthLabel"), v = this._get(t, "selectYearLabel"), b = "<div class='ui-datepicker-title'>", y = "";
            if (o || !f) y += "<span class='ui-datepicker-month'>" + a[e] + "</span>"; else {
                for (l = s && s.getFullYear() === i, h = n && n.getFullYear() === i, 
                y += "<select class='ui-datepicker-month' aria-label='" + _ + "' data-handler='selectMonth' data-event='change'>", 
                c = 0; c < 12; c++) (!l || c >= s.getMonth()) && (!h || c <= n.getMonth()) && (y += "<option value='" + c + "'" + (c === e ? " selected='selected'" : "") + ">" + r[c] + "</option>");
                y += "</select>";
            }
            if (m || (b += y + (!o && f && g ? "" : "&#xa0;")), !t.yearshtml) if (t.yearshtml = "", 
            o || !g) b += "<span class='ui-datepicker-year'>" + i + "</span>"; else {
                for (a = this._get(t, "yearRange").split(":"), u = new Date().getFullYear(), 
                d = (_ = function(t) {
                    return t = t.match(/c[+\-].*/) ? i + parseInt(t.substring(1), 10) : t.match(/[+\-].*/) ? u + parseInt(t, 10) : parseInt(t, 10), 
                    isNaN(t) ? u : t;
                })(a[0]), p = Math.max(d, _(a[1] || "")), d = s ? Math.max(d, s.getFullYear()) : d, 
                p = n ? Math.min(p, n.getFullYear()) : p, t.yearshtml += "<select class='ui-datepicker-year' aria-label='" + v + "' data-handler='selectYear' data-event='change'>"; d <= p; d++) t.yearshtml += "<option value='" + d + "'" + (d === i ? " selected='selected'" : "") + ">" + d + "</option>";
                t.yearshtml += "</select>", b += t.yearshtml, t.yearshtml = null;
            }
            return b += this._get(t, "yearSuffix"), m && (b += (!o && f && g ? "" : "&#xa0;") + y), 
            b + "</div>";
        },
        _adjustInstDate: function(t, e, i) {
            var s = t.selectedYear + ("Y" === i ? e : 0), n = t.selectedMonth + ("M" === i ? e : 0), e = Math.min(t.selectedDay, this._getDaysInMonth(s, n)) + ("D" === i ? e : 0), e = this._restrictMinMax(t, this._daylightSavingAdjust(new Date(s, n, e)));
            t.selectedDay = e.getDate(), t.drawMonth = t.selectedMonth = e.getMonth(), 
            t.drawYear = t.selectedYear = e.getFullYear(), "M" !== i && "Y" !== i || this._notifyChange(t);
        },
        _restrictMinMax: function(t, e) {
            var i = this._getMinMaxDate(t, "min"), e = i && e < i ? i : e;
            return (t = this._getMinMaxDate(t, "max")) && t < e ? t : e;
        },
        _notifyChange: function(t) {
            var e = this._get(t, "onChangeMonthYear");
            e && e.apply(t.input ? t.input[0] : null, [ t.selectedYear, t.selectedMonth + 1, t ]);
        },
        _getNumberOfMonths: function(t) {
            return null == (t = this._get(t, "numberOfMonths")) ? [ 1, 1 ] : "number" == typeof t ? [ 1, t ] : t;
        },
        _getMinMaxDate: function(t, e) {
            return this._determineDate(t, this._get(t, e + "Date"), null);
        },
        _getDaysInMonth: function(t, e) {
            return 32 - this._daylightSavingAdjust(new Date(t, e, 32)).getDate();
        },
        _getFirstDayOfMonth: function(t, e) {
            return new Date(t, e, 1).getDay();
        },
        _canAdjustMonth: function(t, e, i, s) {
            var n = this._getNumberOfMonths(t), n = this._daylightSavingAdjust(new Date(i, s + (e < 0 ? e : n[0] * n[1]), 1));
            return e < 0 && n.setDate(this._getDaysInMonth(n.getFullYear(), n.getMonth())), 
            this._isInRange(t, n);
        },
        _isInRange: function(t, e) {
            var i = this._getMinMaxDate(t, "min"), s = this._getMinMaxDate(t, "max"), n = null, o = null, a = this._get(t, "yearRange");
            return a && (t = a.split(":"), a = new Date().getFullYear(), n = parseInt(t[0], 10), 
            o = parseInt(t[1], 10), t[0].match(/[+\-].*/) && (n += a), t[1].match(/[+\-].*/) && (o += a)), 
            (!i || e.getTime() >= i.getTime()) && (!s || e.getTime() <= s.getTime()) && (!n || e.getFullYear() >= n) && (!o || e.getFullYear() <= o);
        },
        _getFormatConfig: function(t) {
            var e = this._get(t, "shortYearCutoff");
            return {
                shortYearCutoff: e = "string" != typeof e ? e : new Date().getFullYear() % 100 + parseInt(e, 10),
                dayNamesShort: this._get(t, "dayNamesShort"),
                dayNames: this._get(t, "dayNames"),
                monthNamesShort: this._get(t, "monthNamesShort"),
                monthNames: this._get(t, "monthNames")
            };
        },
        _formatDate: function(t, e, i, s) {
            return e || (t.currentDay = t.selectedDay, t.currentMonth = t.selectedMonth, 
            t.currentYear = t.selectedYear), e = e ? "object" == typeof e ? e : this._daylightSavingAdjust(new Date(s, i, e)) : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay)), 
            this.formatDate(this._get(t, "dateFormat"), e, this._getFormatConfig(t));
        }
    }), V.fn.datepicker = function(t) {
        if (!this.length) return this;
        V.datepicker.initialized || (V(document).on("mousedown", V.datepicker._checkExternalClick), 
        V.datepicker.initialized = !0), 0 === V("#" + V.datepicker._mainDivId).length && V("body").append(V.datepicker.dpDiv);
        var e = Array.prototype.slice.call(arguments, 1);
        return "string" == typeof t && ("isDisabled" === t || "getDate" === t || "widget" === t) || "option" === t && 2 === arguments.length && "string" == typeof arguments[1] ? V.datepicker["_" + t + "Datepicker"].apply(V.datepicker, [ this[0] ].concat(e)) : this.each(function() {
            "string" == typeof t ? V.datepicker["_" + t + "Datepicker"].apply(V.datepicker, [ this ].concat(e)) : V.datepicker._attachDatepicker(this, t);
        });
    }, V.datepicker = new st(), V.datepicker.initialized = !1, V.datepicker.uuid = new Date().getTime(), 
    V.datepicker.version = "1.13.1", V.datepicker, V.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    var ct, rt = !1;
    function lt(t, e, i) {
        return e <= t && t < e + i;
    }
    function ht(e) {
        return function() {
            var t = this.element.val();
            e.apply(this, arguments), this._refresh(), t !== this.element.val() && this._trigger("change");
        };
    }
    V(document).on("mouseup", function() {
        rt = !1;
    }), V.widget("ui.mouse", {
        version: "1.13.1",
        options: {
            cancel: "input, textarea, button, select, option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var e = this;
            this.element.on("mousedown." + this.widgetName, function(t) {
                return e._mouseDown(t);
            }).on("click." + this.widgetName, function(t) {
                if (!0 === V.data(t.target, e.widgetName + ".preventClickEvent")) return V.removeData(t.target, e.widgetName + ".preventClickEvent"), 
                t.stopImmediatePropagation(), !1;
            }), this.started = !1;
        },
        _mouseDestroy: function() {
            this.element.off("." + this.widgetName), this._mouseMoveDelegate && this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
        },
        _mouseDown: function(t) {
            var e, i, s;
            if (!rt) return this._mouseMoved = !1, this._mouseStarted && this._mouseUp(t), 
            i = 1 === (this._mouseDownEvent = t).which, s = !("string" != typeof (e = this).options.cancel || !t.target.nodeName) && V(t.target).closest(this.options.cancel).length, 
            !(i && !s && this._mouseCapture(t)) || (this.mouseDelayMet = !this.options.delay, 
            this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function() {
                e.mouseDelayMet = !0;
            }, this.options.delay)), this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = !1 !== this._mouseStart(t), 
            !this._mouseStarted) ? (t.preventDefault(), !0) : (!0 === V.data(t.target, this.widgetName + ".preventClickEvent") && V.removeData(t.target, this.widgetName + ".preventClickEvent"), 
            this._mouseMoveDelegate = function(t) {
                return e._mouseMove(t);
            }, this._mouseUpDelegate = function(t) {
                return e._mouseUp(t);
            }, this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate), 
            t.preventDefault(), rt = !0));
        },
        _mouseMove: function(t) {
            if (this._mouseMoved) {
                if (V.ui.ie && (!document.documentMode || document.documentMode < 9) && !t.button) return this._mouseUp(t);
                if (!t.which) if (t.originalEvent.altKey || t.originalEvent.ctrlKey || t.originalEvent.metaKey || t.originalEvent.shiftKey) this.ignoreMissingWhich = !0; else if (!this.ignoreMissingWhich) return this._mouseUp(t);
            }
            return (t.which || t.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(t), 
            t.preventDefault()) : (this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, t), 
            this._mouseStarted ? this._mouseDrag(t) : this._mouseUp(t)), !this._mouseStarted);
        },
        _mouseUp: function(t) {
            this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate), 
            this._mouseStarted && (this._mouseStarted = !1, t.target === this._mouseDownEvent.target && V.data(t.target, this.widgetName + ".preventClickEvent", !0), 
            this._mouseStop(t)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), 
            delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, rt = !1, 
            t.preventDefault();
        },
        _mouseDistanceMet: function(t) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - t.pageX), Math.abs(this._mouseDownEvent.pageY - t.pageY)) >= this.options.distance;
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet;
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return !0;
        }
    }), V.ui.plugin = {
        add: function(t, e, i) {
            var s, n = V.ui[t].prototype;
            for (s in i) n.plugins[s] = n.plugins[s] || [], n.plugins[s].push([ e, i[s] ]);
        },
        call: function(t, e, i, s) {
            var n, o = t.plugins[e];
            if (o && (s || t.element[0].parentNode && 11 !== t.element[0].parentNode.nodeType)) for (n = 0; n < o.length; n++) t.options[o[n][0]] && o[n][1].apply(t.element, i);
        }
    }, V.ui.safeBlur = function(t) {
        t && "body" !== t.nodeName.toLowerCase() && V(t).trigger("blur");
    }, V.widget("ui.draggable", V.ui.mouse, {
        version: "1.13.1",
        widgetEventPrefix: "drag",
        options: {
            addClasses: !0,
            appendTo: "parent",
            axis: !1,
            connectToSortable: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            iframeFix: !1,
            opacity: !1,
            refreshPositions: !1,
            revert: !1,
            revertDuration: 500,
            scope: "default",
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: !1,
            snapMode: "both",
            snapTolerance: 20,
            stack: !1,
            zIndex: !1,
            drag: null,
            start: null,
            stop: null
        },
        _create: function() {
            "original" === this.options.helper && this._setPositionRelative(), this.options.addClasses && this._addClass("ui-draggable"), 
            this._setHandleClassName(), this._mouseInit();
        },
        _setOption: function(t, e) {
            this._super(t, e), "handle" === t && (this._removeHandleClassName(), 
            this._setHandleClassName());
        },
        _destroy: function() {
            (this.helper || this.element).is(".ui-draggable-dragging") ? this.destroyOnClear = !0 : (this._removeHandleClassName(), 
            this._mouseDestroy());
        },
        _mouseCapture: function(t) {
            var e = this.options;
            return !(this.helper || e.disabled || 0 < V(t.target).closest(".ui-resizable-handle").length || (this.handle = this._getHandle(t), 
            !this.handle || (this._blurActiveElement(t), this._blockFrames(!0 === e.iframeFix ? "iframe" : e.iframeFix), 
            0)));
        },
        _blockFrames: function(t) {
            this.iframeBlocks = this.document.find(t).map(function() {
                var t = V(this);
                return V("<div>").css("position", "absolute").appendTo(t.parent()).outerWidth(t.outerWidth()).outerHeight(t.outerHeight()).offset(t.offset())[0];
            });
        },
        _unblockFrames: function() {
            this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
        },
        _blurActiveElement: function(t) {
            var e = V.ui.safeActiveElement(this.document[0]);
            V(t.target).closest(e).length || V.ui.safeBlur(e);
        },
        _mouseStart: function(t) {
            var e = this.options;
            return this.helper = this._createHelper(t), this._addClass(this.helper, "ui-draggable-dragging"), 
            this._cacheHelperProportions(), V.ui.ddmanager && (V.ui.ddmanager.current = this), 
            this._cacheMargins(), this.cssPosition = this.helper.css("position"), 
            this.scrollParent = this.helper.scrollParent(!0), this.offsetParent = this.helper.offsetParent(), 
            this.hasFixedAncestor = 0 < this.helper.parents().filter(function() {
                return "fixed" === V(this).css("position");
            }).length, this.positionAbs = this.element.offset(), this._refreshOffsets(t), 
            this.originalPosition = this.position = this._generatePosition(t, !1), 
            this.originalPageX = t.pageX, this.originalPageY = t.pageY, e.cursorAt && this._adjustOffsetFromHelper(e.cursorAt), 
            this._setContainment(), !1 === this._trigger("start", t) ? (this._clear(), 
            !1) : (this._cacheHelperProportions(), V.ui.ddmanager && !e.dropBehaviour && V.ui.ddmanager.prepareOffsets(this, t), 
            this._mouseDrag(t, !0), V.ui.ddmanager && V.ui.ddmanager.dragStart(this, t), 
            !0);
        },
        _refreshOffsets: function(t) {
            this.offset = {
                top: this.positionAbs.top - this.margins.top,
                left: this.positionAbs.left - this.margins.left,
                scroll: !1,
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            }, this.offset.click = {
                left: t.pageX - this.offset.left,
                top: t.pageY - this.offset.top
            };
        },
        _mouseDrag: function(t, e) {
            if (this.hasFixedAncestor && (this.offset.parent = this._getParentOffset()), 
            this.position = this._generatePosition(t, !0), this.positionAbs = this._convertPositionTo("absolute"), 
            !e) {
                if (e = this._uiHash(), !1 === this._trigger("drag", t, e)) return this._mouseUp(new V.Event("mouseup", t)), 
                !1;
                this.position = e.position;
            }
            return this.helper[0].style.left = this.position.left + "px", this.helper[0].style.top = this.position.top + "px", 
            V.ui.ddmanager && V.ui.ddmanager.drag(this, t), !1;
        },
        _mouseStop: function(t) {
            var e = this, i = !1;
            return V.ui.ddmanager && !this.options.dropBehaviour && (i = V.ui.ddmanager.drop(this, t)), 
            this.dropped && (i = this.dropped, this.dropped = !1), "invalid" === this.options.revert && !i || "valid" === this.options.revert && i || !0 === this.options.revert || "function" == typeof this.options.revert && this.options.revert.call(this.element, i) ? V(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                !1 !== e._trigger("stop", t) && e._clear();
            }) : !1 !== this._trigger("stop", t) && this._clear(), !1;
        },
        _mouseUp: function(t) {
            return this._unblockFrames(), V.ui.ddmanager && V.ui.ddmanager.dragStop(this, t), 
            this.handleElement.is(t.target) && this.element.trigger("focus"), V.ui.mouse.prototype._mouseUp.call(this, t);
        },
        cancel: function() {
            return this.helper.is(".ui-draggable-dragging") ? this._mouseUp(new V.Event("mouseup", {
                target: this.element[0]
            })) : this._clear(), this;
        },
        _getHandle: function(t) {
            return !this.options.handle || !!V(t.target).closest(this.element.find(this.options.handle)).length;
        },
        _setHandleClassName: function() {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element, 
            this._addClass(this.handleElement, "ui-draggable-handle");
        },
        _removeHandleClassName: function() {
            this._removeClass(this.handleElement, "ui-draggable-handle");
        },
        _createHelper: function(t) {
            var e = this.options, i = "function" == typeof e.helper;
            return (t = i ? V(e.helper.apply(this.element[0], [ t ])) : "clone" === e.helper ? this.element.clone().removeAttr("id") : this.element).parents("body").length || t.appendTo("parent" === e.appendTo ? this.element[0].parentNode : e.appendTo), 
            i && t[0] === this.element[0] && this._setPositionRelative(), t[0] === this.element[0] || /(fixed|absolute)/.test(t.css("position")) || t.css("position", "absolute"), 
            t;
        },
        _setPositionRelative: function() {
            /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
        },
        _adjustOffsetFromHelper: function(t) {
            "string" == typeof t && (t = t.split(" ")), "left" in (t = Array.isArray(t) ? {
                left: +t[0],
                top: +t[1] || 0
            } : t) && (this.offset.click.left = t.left + this.margins.left), "right" in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), 
            "top" in t && (this.offset.click.top = t.top + this.margins.top), "bottom" in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top);
        },
        _isRootNode: function(t) {
            return /(html|body)/i.test(t.tagName) || t === this.document[0];
        },
        _getParentOffset: function() {
            var t = this.offsetParent.offset(), e = this.document[0];
            return "absolute" === this.cssPosition && this.scrollParent[0] !== e && V.contains(this.scrollParent[0], this.offsetParent[0]) && (t.left += this.scrollParent.scrollLeft(), 
            t.top += this.scrollParent.scrollTop()), {
                top: (t = this._isRootNode(this.offsetParent[0]) ? {
                    top: 0,
                    left: 0
                } : t).top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: t.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" !== this.cssPosition) return {
                top: 0,
                left: 0
            };
            var t = this.element.position(), e = this._isRootNode(this.scrollParent[0]);
            return {
                top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + (e ? 0 : this.scrollParent.scrollTop()),
                left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + (e ? 0 : this.scrollParent.scrollLeft())
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var t, e, i, s = this.options, n = this.document[0];
            this.relativeContainer = null, s.containment ? "window" !== s.containment ? "document" !== s.containment ? s.containment.constructor !== Array ? ("parent" === s.containment && (s.containment = this.helper[0].parentNode), 
            (i = (e = V(s.containment))[0]) && (t = /(scroll|auto)/.test(e.css("overflow")), 
            this.containment = [ (parseInt(e.css("borderLeftWidth"), 10) || 0) + (parseInt(e.css("paddingLeft"), 10) || 0), (parseInt(e.css("borderTopWidth"), 10) || 0) + (parseInt(e.css("paddingTop"), 10) || 0), (t ? Math.max(i.scrollWidth, i.offsetWidth) : i.offsetWidth) - (parseInt(e.css("borderRightWidth"), 10) || 0) - (parseInt(e.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (t ? Math.max(i.scrollHeight, i.offsetHeight) : i.offsetHeight) - (parseInt(e.css("borderBottomWidth"), 10) || 0) - (parseInt(e.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom ], 
            this.relativeContainer = e)) : this.containment = s.containment : this.containment = [ 0, 0, V(n).width() - this.helperProportions.width - this.margins.left, (V(n).height() || n.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ] : this.containment = [ V(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, V(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, V(window).scrollLeft() + V(window).width() - this.helperProportions.width - this.margins.left, V(window).scrollTop() + (V(window).height() || n.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ] : this.containment = null;
        },
        _convertPositionTo: function(t, e) {
            e = e || this.position;
            var i = "absolute" === t ? 1 : -1, t = this._isRootNode(this.scrollParent[0]);
            return {
                top: e.top + this.offset.relative.top * i + this.offset.parent.top * i - ("fixed" === this.cssPosition ? -this.offset.scroll.top : t ? 0 : this.offset.scroll.top) * i,
                left: e.left + this.offset.relative.left * i + this.offset.parent.left * i - ("fixed" === this.cssPosition ? -this.offset.scroll.left : t ? 0 : this.offset.scroll.left) * i
            };
        },
        _generatePosition: function(t, e) {
            var i, s = this.options, n = this._isRootNode(this.scrollParent[0]), o = t.pageX, a = t.pageY;
            return n && this.offset.scroll || (this.offset.scroll = {
                top: this.scrollParent.scrollTop(),
                left: this.scrollParent.scrollLeft()
            }), e && (this.containment && (i = this.relativeContainer ? (i = this.relativeContainer.offset(), 
            [ this.containment[0] + i.left, this.containment[1] + i.top, this.containment[2] + i.left, this.containment[3] + i.top ]) : this.containment, 
            t.pageX - this.offset.click.left < i[0] && (o = i[0] + this.offset.click.left), 
            t.pageY - this.offset.click.top < i[1] && (a = i[1] + this.offset.click.top), 
            t.pageX - this.offset.click.left > i[2] && (o = i[2] + this.offset.click.left), 
            t.pageY - this.offset.click.top > i[3] && (a = i[3] + this.offset.click.top)), 
            s.grid && (t = s.grid[1] ? this.originalPageY + Math.round((a - this.originalPageY) / s.grid[1]) * s.grid[1] : this.originalPageY, 
            a = !i || t - this.offset.click.top >= i[1] || t - this.offset.click.top > i[3] ? t : t - this.offset.click.top >= i[1] ? t - s.grid[1] : t + s.grid[1], 
            t = s.grid[0] ? this.originalPageX + Math.round((o - this.originalPageX) / s.grid[0]) * s.grid[0] : this.originalPageX, 
            o = !i || t - this.offset.click.left >= i[0] || t - this.offset.click.left > i[2] ? t : t - this.offset.click.left >= i[0] ? t - s.grid[0] : t + s.grid[0]), 
            "y" === s.axis && (o = this.originalPageX), "x" === s.axis && (a = this.originalPageY)), 
            {
                top: a - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : n ? 0 : this.offset.scroll.top),
                left: o - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : n ? 0 : this.offset.scroll.left)
            };
        },
        _clear: function() {
            this._removeClass(this.helper, "ui-draggable-dragging"), this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove(), 
            this.helper = null, this.cancelHelperRemoval = !1, this.destroyOnClear && this.destroy();
        },
        _trigger: function(t, e, i) {
            return i = i || this._uiHash(), V.ui.plugin.call(this, t, [ e, i, this ], !0), 
            /^(drag|start|stop)/.test(t) && (this.positionAbs = this._convertPositionTo("absolute"), 
            i.offset = this.positionAbs), V.Widget.prototype._trigger.call(this, t, e, i);
        },
        plugins: {},
        _uiHash: function() {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            };
        }
    }), V.ui.plugin.add("draggable", "connectToSortable", {
        start: function(e, t, i) {
            var s = V.extend({}, t, {
                item: i.element
            });
            i.sortables = [], V(i.options.connectToSortable).each(function() {
                var t = V(this).sortable("instance");
                t && !t.options.disabled && (i.sortables.push(t), t.refreshPositions(), 
                t._trigger("activate", e, s));
            });
        },
        stop: function(e, t, i) {
            var s = V.extend({}, t, {
                item: i.element
            });
            i.cancelHelperRemoval = !1, V.each(i.sortables, function() {
                var t = this;
                t.isOver ? (t.isOver = 0, i.cancelHelperRemoval = !0, t.cancelHelperRemoval = !1, 
                t._storedCSS = {
                    position: t.placeholder.css("position"),
                    top: t.placeholder.css("top"),
                    left: t.placeholder.css("left")
                }, t._mouseStop(e), t.options.helper = t.options._helper) : (t.cancelHelperRemoval = !0, 
                t._trigger("deactivate", e, s));
            });
        },
        drag: function(i, s, n) {
            V.each(n.sortables, function() {
                var t = !1, e = this;
                e.positionAbs = n.positionAbs, e.helperProportions = n.helperProportions, 
                e.offset.click = n.offset.click, e._intersectsWith(e.containerCache) && (t = !0, 
                V.each(n.sortables, function() {
                    return this.positionAbs = n.positionAbs, this.helperProportions = n.helperProportions, 
                    this.offset.click = n.offset.click, t = (this === e || !this._intersectsWith(this.containerCache) || !V.contains(e.element[0], this.element[0])) && t;
                })), t ? (e.isOver || (e.isOver = 1, n._parent = s.helper.parent(), 
                e.currentItem = s.helper.appendTo(e.element).data("ui-sortable-item", !0), 
                e.options._helper = e.options.helper, e.options.helper = function() {
                    return s.helper[0];
                }, i.target = e.currentItem[0], e._mouseCapture(i, !0), e._mouseStart(i, !0, !0), 
                e.offset.click.top = n.offset.click.top, e.offset.click.left = n.offset.click.left, 
                e.offset.parent.left -= n.offset.parent.left - e.offset.parent.left, 
                e.offset.parent.top -= n.offset.parent.top - e.offset.parent.top, 
                n._trigger("toSortable", i), n.dropped = e.element, V.each(n.sortables, function() {
                    this.refreshPositions();
                }), n.currentItem = n.element, e.fromOutside = n), e.currentItem && (e._mouseDrag(i), 
                s.position = e.position)) : e.isOver && (e.isOver = 0, e.cancelHelperRemoval = !0, 
                e.options._revert = e.options.revert, e.options.revert = !1, e._trigger("out", i, e._uiHash(e)), 
                e._mouseStop(i, !0), e.options.revert = e.options._revert, e.options.helper = e.options._helper, 
                e.placeholder && e.placeholder.remove(), s.helper.appendTo(n._parent), 
                n._refreshOffsets(i), s.position = n._generatePosition(i, !0), n._trigger("fromSortable", i), 
                n.dropped = !1, V.each(n.sortables, function() {
                    this.refreshPositions();
                }));
            });
        }
    }), V.ui.plugin.add("draggable", "cursor", {
        start: function(t, e, i) {
            var s = V("body"), i = i.options;
            s.css("cursor") && (i._cursor = s.css("cursor")), s.css("cursor", i.cursor);
        },
        stop: function(t, e, i) {
            (i = i.options)._cursor && V("body").css("cursor", i._cursor);
        }
    }), V.ui.plugin.add("draggable", "opacity", {
        start: function(t, e, i) {
            e = V(e.helper), i = i.options, e.css("opacity") && (i._opacity = e.css("opacity")), 
            e.css("opacity", i.opacity);
        },
        stop: function(t, e, i) {
            (i = i.options)._opacity && V(e.helper).css("opacity", i._opacity);
        }
    }), V.ui.plugin.add("draggable", "scroll", {
        start: function(t, e, i) {
            i.scrollParentNotHidden || (i.scrollParentNotHidden = i.helper.scrollParent(!1)), 
            i.scrollParentNotHidden[0] !== i.document[0] && "HTML" !== i.scrollParentNotHidden[0].tagName && (i.overflowOffset = i.scrollParentNotHidden.offset());
        },
        drag: function(t, e, i) {
            var s = i.options, n = !1, o = i.scrollParentNotHidden[0], a = i.document[0];
            o !== a && "HTML" !== o.tagName ? (s.axis && "x" === s.axis || (i.overflowOffset.top + o.offsetHeight - t.pageY < s.scrollSensitivity ? o.scrollTop = n = o.scrollTop + s.scrollSpeed : t.pageY - i.overflowOffset.top < s.scrollSensitivity && (o.scrollTop = n = o.scrollTop - s.scrollSpeed)), 
            s.axis && "y" === s.axis || (i.overflowOffset.left + o.offsetWidth - t.pageX < s.scrollSensitivity ? o.scrollLeft = n = o.scrollLeft + s.scrollSpeed : t.pageX - i.overflowOffset.left < s.scrollSensitivity && (o.scrollLeft = n = o.scrollLeft - s.scrollSpeed))) : (s.axis && "x" === s.axis || (t.pageY - V(a).scrollTop() < s.scrollSensitivity ? n = V(a).scrollTop(V(a).scrollTop() - s.scrollSpeed) : V(window).height() - (t.pageY - V(a).scrollTop()) < s.scrollSensitivity && (n = V(a).scrollTop(V(a).scrollTop() + s.scrollSpeed))), 
            s.axis && "y" === s.axis || (t.pageX - V(a).scrollLeft() < s.scrollSensitivity ? n = V(a).scrollLeft(V(a).scrollLeft() - s.scrollSpeed) : V(window).width() - (t.pageX - V(a).scrollLeft()) < s.scrollSensitivity && (n = V(a).scrollLeft(V(a).scrollLeft() + s.scrollSpeed)))), 
            !1 !== n && V.ui.ddmanager && !s.dropBehaviour && V.ui.ddmanager.prepareOffsets(i, t);
        }
    }), V.ui.plugin.add("draggable", "snap", {
        start: function(t, e, i) {
            var s = i.options;
            i.snapElements = [], V(s.snap.constructor !== String ? s.snap.items || ":data(ui-draggable)" : s.snap).each(function() {
                var t = V(this), e = t.offset();
                this !== i.element[0] && i.snapElements.push({
                    item: this,
                    width: t.outerWidth(),
                    height: t.outerHeight(),
                    top: e.top,
                    left: e.left
                });
            });
        },
        drag: function(t, e, i) {
            for (var s, n, o, a, r, l, h, c, u, d = i.options, p = d.snapTolerance, f = e.offset.left, g = f + i.helperProportions.width, m = e.offset.top, _ = m + i.helperProportions.height, v = i.snapElements.length - 1; 0 <= v; v--) l = (r = i.snapElements[v].left - i.margins.left) + i.snapElements[v].width, 
            c = (h = i.snapElements[v].top - i.margins.top) + i.snapElements[v].height, 
            g < r - p || l + p < f || _ < h - p || c + p < m || !V.contains(i.snapElements[v].item.ownerDocument, i.snapElements[v].item) ? (i.snapElements[v].snapping && i.options.snap.release && i.options.snap.release.call(i.element, t, V.extend(i._uiHash(), {
                snapItem: i.snapElements[v].item
            })), i.snapElements[v].snapping = !1) : ("inner" !== d.snapMode && (s = Math.abs(h - _) <= p, 
            n = Math.abs(c - m) <= p, o = Math.abs(r - g) <= p, a = Math.abs(l - f) <= p, 
            s && (e.position.top = i._convertPositionTo("relative", {
                top: h - i.helperProportions.height,
                left: 0
            }).top), n && (e.position.top = i._convertPositionTo("relative", {
                top: c,
                left: 0
            }).top), o && (e.position.left = i._convertPositionTo("relative", {
                top: 0,
                left: r - i.helperProportions.width
            }).left), a && (e.position.left = i._convertPositionTo("relative", {
                top: 0,
                left: l
            }).left)), u = s || n || o || a, "outer" !== d.snapMode && (s = Math.abs(h - m) <= p, 
            n = Math.abs(c - _) <= p, o = Math.abs(r - f) <= p, a = Math.abs(l - g) <= p, 
            s && (e.position.top = i._convertPositionTo("relative", {
                top: h,
                left: 0
            }).top), n && (e.position.top = i._convertPositionTo("relative", {
                top: c - i.helperProportions.height,
                left: 0
            }).top), o && (e.position.left = i._convertPositionTo("relative", {
                top: 0,
                left: r
            }).left), a && (e.position.left = i._convertPositionTo("relative", {
                top: 0,
                left: l - i.helperProportions.width
            }).left)), !i.snapElements[v].snapping && (s || n || o || a || u) && i.options.snap.snap && i.options.snap.snap.call(i.element, t, V.extend(i._uiHash(), {
                snapItem: i.snapElements[v].item
            })), i.snapElements[v].snapping = s || n || o || a || u);
        }
    }), V.ui.plugin.add("draggable", "stack", {
        start: function(t, e, i) {
            var s, i = i.options;
            (i = V.makeArray(V(i.stack)).sort(function(t, e) {
                return (parseInt(V(t).css("zIndex"), 10) || 0) - (parseInt(V(e).css("zIndex"), 10) || 0);
            })).length && (s = parseInt(V(i[0]).css("zIndex"), 10) || 0, V(i).each(function(t) {
                V(this).css("zIndex", s + t);
            }), this.css("zIndex", s + i.length));
        }
    }), V.ui.plugin.add("draggable", "zIndex", {
        start: function(t, e, i) {
            e = V(e.helper), i = i.options, e.css("zIndex") && (i._zIndex = e.css("zIndex")), 
            e.css("zIndex", i.zIndex);
        },
        stop: function(t, e, i) {
            (i = i.options)._zIndex && V(e.helper).css("zIndex", i._zIndex);
        }
    }), V.ui.draggable, V.widget("ui.resizable", V.ui.mouse, {
        version: "1.13.1",
        widgetEventPrefix: "resize",
        options: {
            alsoResize: !1,
            animate: !1,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: !1,
            autoHide: !1,
            classes: {
                "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
            },
            containment: !1,
            ghost: !1,
            grid: !1,
            handles: "e,s,se",
            helper: !1,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 90,
            resize: null,
            start: null,
            stop: null
        },
        _num: function(t) {
            return parseFloat(t) || 0;
        },
        _isNumber: function(t) {
            return !isNaN(parseFloat(t));
        },
        _hasScroll: function(t, e) {
            if ("hidden" === V(t).css("overflow")) return !1;
            var i = e && "left" === e ? "scrollLeft" : "scrollTop", e = !1;
            if (0 < t[i]) return !0;
            try {
                t[i] = 1, e = 0 < t[i], t[i] = 0;
            } catch (t) {}
            return e;
        },
        _create: function() {
            var t, e = this.options, i = this;
            this._addClass("ui-resizable"), V.extend(this, {
                _aspectRatio: !!e.aspectRatio,
                aspectRatio: e.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: e.helper || e.ghost || e.animate ? e.helper || "ui-resizable-helper" : null
            }), this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i) && (this.element.wrap(V("<div class='ui-wrapper'></div>").css({
                overflow: "hidden",
                position: this.element.css("position"),
                width: this.element.outerWidth(),
                height: this.element.outerHeight(),
                top: this.element.css("top"),
                left: this.element.css("left")
            })), this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")), 
            this.elementIsWrapper = !0, t = {
                marginTop: this.originalElement.css("marginTop"),
                marginRight: this.originalElement.css("marginRight"),
                marginBottom: this.originalElement.css("marginBottom"),
                marginLeft: this.originalElement.css("marginLeft")
            }, this.element.css(t), this.originalElement.css("margin", 0), this.originalResizeStyle = this.originalElement.css("resize"), 
            this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({
                position: "static",
                zoom: 1,
                display: "block"
            })), this.originalElement.css(t), this._proportionallyResize()), this._setupHandles(), 
            e.autoHide && V(this.element).on("mouseenter", function() {
                e.disabled || (i._removeClass("ui-resizable-autohide"), i._handles.show());
            }).on("mouseleave", function() {
                e.disabled || i.resizing || (i._addClass("ui-resizable-autohide"), 
                i._handles.hide());
            }), this._mouseInit();
        },
        _destroy: function() {
            function t(t) {
                V(t).removeData("resizable").removeData("ui-resizable").off(".resizable");
            }
            var e;
            return this._mouseDestroy(), this._addedHandles.remove(), this.elementIsWrapper && (t(this.element), 
            e = this.element, this.originalElement.css({
                position: e.css("position"),
                width: e.outerWidth(),
                height: e.outerHeight(),
                top: e.css("top"),
                left: e.css("left")
            }).insertAfter(e), e.remove()), this.originalElement.css("resize", this.originalResizeStyle), 
            t(this.originalElement), this;
        },
        _setOption: function(t, e) {
            switch (this._super(t, e), t) {
              case "handles":
                this._removeHandles(), this._setupHandles();
                break;

              case "aspectRatio":
                this._aspectRatio = !!e;
            }
        },
        _setupHandles: function() {
            var t, e, i, s, n, o = this.options, a = this;
            if (this.handles = o.handles || (V(".ui-resizable-handle", this.element).length ? {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            } : "e,s,se"), this._handles = V(), this._addedHandles = V(), this.handles.constructor === String) for ("all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"), 
            i = this.handles.split(","), this.handles = {}, e = 0; e < i.length; e++) s = "ui-resizable-" + (t = String.prototype.trim.call(i[e])), 
            n = V("<div>"), this._addClass(n, "ui-resizable-handle " + s), n.css({
                zIndex: o.zIndex
            }), this.handles[t] = ".ui-resizable-" + t, this.element.children(this.handles[t]).length || (this.element.append(n), 
            this._addedHandles = this._addedHandles.add(n));
            this._renderAxis = function(t) {
                var e, i, s;
                for (e in t = t || this.element, this.handles) this.handles[e].constructor === String ? this.handles[e] = this.element.children(this.handles[e]).first().show() : (this.handles[e].jquery || this.handles[e].nodeType) && (this.handles[e] = V(this.handles[e]), 
                this._on(this.handles[e], {
                    mousedown: a._mouseDown
                })), this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i) && (i = V(this.handles[e], this.element), 
                s = /sw|ne|nw|se|n|s/.test(e) ? i.outerHeight() : i.outerWidth(), 
                i = [ "padding", /ne|nw|n/.test(e) ? "Top" : /se|sw|s/.test(e) ? "Bottom" : /^e$/.test(e) ? "Right" : "Left" ].join(""), 
                t.css(i, s), this._proportionallyResize()), this._handles = this._handles.add(this.handles[e]);
            }, this._renderAxis(this.element), this._handles = this._handles.add(this.element.find(".ui-resizable-handle")), 
            this._handles.disableSelection(), this._handles.on("mouseover", function() {
                a.resizing || (this.className && (n = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)), 
                a.axis = n && n[1] ? n[1] : "se");
            }), o.autoHide && (this._handles.hide(), this._addClass("ui-resizable-autohide"));
        },
        _removeHandles: function() {
            this._addedHandles.remove();
        },
        _mouseCapture: function(t) {
            var e, i, s = !1;
            for (e in this.handles) (i = V(this.handles[e])[0]) !== t.target && !V.contains(i, t.target) || (s = !0);
            return !this.options.disabled && s;
        },
        _mouseStart: function(t) {
            var e, i, s = this.options, n = this.element;
            return this.resizing = !0, this._renderProxy(), e = this._num(this.helper.css("left")), 
            i = this._num(this.helper.css("top")), s.containment && (e += V(s.containment).scrollLeft() || 0, 
            i += V(s.containment).scrollTop() || 0), this.offset = this.helper.offset(), 
            this.position = {
                left: e,
                top: i
            }, this.size = this._helper ? {
                width: this.helper.width(),
                height: this.helper.height()
            } : {
                width: n.width(),
                height: n.height()
            }, this.originalSize = this._helper ? {
                width: n.outerWidth(),
                height: n.outerHeight()
            } : {
                width: n.width(),
                height: n.height()
            }, this.sizeDiff = {
                width: n.outerWidth() - n.width(),
                height: n.outerHeight() - n.height()
            }, this.originalPosition = {
                left: e,
                top: i
            }, this.originalMousePosition = {
                left: t.pageX,
                top: t.pageY
            }, this.aspectRatio = "number" == typeof s.aspectRatio ? s.aspectRatio : this.originalSize.width / this.originalSize.height || 1, 
            s = V(".ui-resizable-" + this.axis).css("cursor"), V("body").css("cursor", "auto" === s ? this.axis + "-resize" : s), 
            this._addClass("ui-resizable-resizing"), this._propagate("start", t), 
            !0;
        },
        _mouseDrag: function(t) {
            var e = this.originalMousePosition, i = this.axis, s = t.pageX - e.left || 0, e = t.pageY - e.top || 0, i = this._change[i];
            return this._updatePrevProperties(), i && (e = i.apply(this, [ t, s, e ]), 
            this._updateVirtualBoundaries(t.shiftKey), (this._aspectRatio || t.shiftKey) && (e = this._updateRatio(e, t)), 
            e = this._respectSize(e, t), this._updateCache(e), this._propagate("resize", t), 
            e = this._applyChanges(), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), 
            V.isEmptyObject(e) || (this._updatePrevProperties(), this._trigger("resize", t, this.ui()), 
            this._applyChanges())), !1;
        },
        _mouseStop: function(t) {
            this.resizing = !1;
            var e, i, s, n = this.options, o = this;
            return this._helper && (s = (e = (i = this._proportionallyResizeElements).length && /textarea/i.test(i[0].nodeName)) && this._hasScroll(i[0], "left") ? 0 : o.sizeDiff.height, 
            i = e ? 0 : o.sizeDiff.width, e = {
                width: o.helper.width() - i,
                height: o.helper.height() - s
            }, i = parseFloat(o.element.css("left")) + (o.position.left - o.originalPosition.left) || null, 
            s = parseFloat(o.element.css("top")) + (o.position.top - o.originalPosition.top) || null, 
            n.animate || this.element.css(V.extend(e, {
                top: s,
                left: i
            })), o.helper.height(o.size.height), o.helper.width(o.size.width), this._helper && !n.animate && this._proportionallyResize()), 
            V("body").css("cursor", "auto"), this._removeClass("ui-resizable-resizing"), 
            this._propagate("stop", t), this._helper && this.helper.remove(), !1;
        },
        _updatePrevProperties: function() {
            this.prevPosition = {
                top: this.position.top,
                left: this.position.left
            }, this.prevSize = {
                width: this.size.width,
                height: this.size.height
            };
        },
        _applyChanges: function() {
            var t = {};
            return this.position.top !== this.prevPosition.top && (t.top = this.position.top + "px"), 
            this.position.left !== this.prevPosition.left && (t.left = this.position.left + "px"), 
            this.size.width !== this.prevSize.width && (t.width = this.size.width + "px"), 
            this.size.height !== this.prevSize.height && (t.height = this.size.height + "px"), 
            this.helper.css(t), t;
        },
        _updateVirtualBoundaries: function(t) {
            var e, i, s = this.options, n = {
                minWidth: this._isNumber(s.minWidth) ? s.minWidth : 0,
                maxWidth: this._isNumber(s.maxWidth) ? s.maxWidth : 1 / 0,
                minHeight: this._isNumber(s.minHeight) ? s.minHeight : 0,
                maxHeight: this._isNumber(s.maxHeight) ? s.maxHeight : 1 / 0
            };
            (this._aspectRatio || t) && (e = n.minHeight * this.aspectRatio, i = n.minWidth / this.aspectRatio, 
            s = n.maxHeight * this.aspectRatio, t = n.maxWidth / this.aspectRatio, 
            e > n.minWidth && (n.minWidth = e), i > n.minHeight && (n.minHeight = i), 
            s < n.maxWidth && (n.maxWidth = s), t < n.maxHeight && (n.maxHeight = t)), 
            this._vBoundaries = n;
        },
        _updateCache: function(t) {
            this.offset = this.helper.offset(), this._isNumber(t.left) && (this.position.left = t.left), 
            this._isNumber(t.top) && (this.position.top = t.top), this._isNumber(t.height) && (this.size.height = t.height), 
            this._isNumber(t.width) && (this.size.width = t.width);
        },
        _updateRatio: function(t) {
            var e = this.position, i = this.size, s = this.axis;
            return this._isNumber(t.height) ? t.width = t.height * this.aspectRatio : this._isNumber(t.width) && (t.height = t.width / this.aspectRatio), 
            "sw" === s && (t.left = e.left + (i.width - t.width), t.top = null), 
            "nw" === s && (t.top = e.top + (i.height - t.height), t.left = e.left + (i.width - t.width)), 
            t;
        },
        _respectSize: function(t) {
            var e = this._vBoundaries, i = this.axis, s = this._isNumber(t.width) && e.maxWidth && e.maxWidth < t.width, n = this._isNumber(t.height) && e.maxHeight && e.maxHeight < t.height, o = this._isNumber(t.width) && e.minWidth && e.minWidth > t.width, a = this._isNumber(t.height) && e.minHeight && e.minHeight > t.height, r = this.originalPosition.left + this.originalSize.width, l = this.originalPosition.top + this.originalSize.height, h = /sw|nw|w/.test(i), i = /nw|ne|n/.test(i);
            return o && (t.width = e.minWidth), a && (t.height = e.minHeight), s && (t.width = e.maxWidth), 
            n && (t.height = e.maxHeight), o && h && (t.left = r - e.minWidth), 
            s && h && (t.left = r - e.maxWidth), a && i && (t.top = l - e.minHeight), 
            n && i && (t.top = l - e.maxHeight), t.width || t.height || t.left || !t.top ? t.width || t.height || t.top || !t.left || (t.left = null) : t.top = null, 
            t;
        },
        _getPaddingPlusBorderDimensions: function(t) {
            for (var e = 0, i = [], s = [ t.css("borderTopWidth"), t.css("borderRightWidth"), t.css("borderBottomWidth"), t.css("borderLeftWidth") ], n = [ t.css("paddingTop"), t.css("paddingRight"), t.css("paddingBottom"), t.css("paddingLeft") ]; e < 4; e++) i[e] = parseFloat(s[e]) || 0, 
            i[e] += parseFloat(n[e]) || 0;
            return {
                height: i[0] + i[2],
                width: i[1] + i[3]
            };
        },
        _proportionallyResize: function() {
            if (this._proportionallyResizeElements.length) for (var t, e = 0, i = this.helper || this.element; e < this._proportionallyResizeElements.length; e++) t = this._proportionallyResizeElements[e], 
            this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(t)), 
            t.css({
                height: i.height() - this.outerDimensions.height || 0,
                width: i.width() - this.outerDimensions.width || 0
            });
        },
        _renderProxy: function() {
            var t = this.element, e = this.options;
            this.elementOffset = t.offset(), this._helper ? (this.helper = this.helper || V("<div></div>").css({
                overflow: "hidden"
            }), this._addClass(this.helper, this._helper), this.helper.css({
                width: this.element.outerWidth(),
                height: this.element.outerHeight(),
                position: "absolute",
                left: this.elementOffset.left + "px",
                top: this.elementOffset.top + "px",
                zIndex: ++e.zIndex
            }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element;
        },
        _change: {
            e: function(t, e) {
                return {
                    width: this.originalSize.width + e
                };
            },
            w: function(t, e) {
                var i = this.originalSize;
                return {
                    left: this.originalPosition.left + e,
                    width: i.width - e
                };
            },
            n: function(t, e, i) {
                var s = this.originalSize;
                return {
                    top: this.originalPosition.top + i,
                    height: s.height - i
                };
            },
            s: function(t, e, i) {
                return {
                    height: this.originalSize.height + i
                };
            },
            se: function(t, e, i) {
                return V.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [ t, e, i ]));
            },
            sw: function(t, e, i) {
                return V.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [ t, e, i ]));
            },
            ne: function(t, e, i) {
                return V.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [ t, e, i ]));
            },
            nw: function(t, e, i) {
                return V.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [ t, e, i ]));
            }
        },
        _propagate: function(t, e) {
            V.ui.plugin.call(this, t, [ e, this.ui() ]), "resize" !== t && this._trigger(t, e, this.ui());
        },
        plugins: {},
        ui: function() {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            };
        }
    }), V.ui.plugin.add("resizable", "animate", {
        stop: function(e) {
            var i = V(this).resizable("instance"), t = i.options, s = i._proportionallyResizeElements, o = (n = s.length && /textarea/i.test(s[0].nodeName)) && i._hasScroll(s[0], "left") ? 0 : i.sizeDiff.height, a = n ? 0 : i.sizeDiff.width, n = {
                width: i.size.width - a,
                height: i.size.height - o
            }, a = parseFloat(i.element.css("left")) + (i.position.left - i.originalPosition.left) || null, o = parseFloat(i.element.css("top")) + (i.position.top - i.originalPosition.top) || null;
            i.element.animate(V.extend(n, o && a ? {
                top: o,
                left: a
            } : {}), {
                duration: t.animateDuration,
                easing: t.animateEasing,
                step: function() {
                    var t = {
                        width: parseFloat(i.element.css("width")),
                        height: parseFloat(i.element.css("height")),
                        top: parseFloat(i.element.css("top")),
                        left: parseFloat(i.element.css("left"))
                    };
                    s && s.length && V(s[0]).css({
                        width: t.width,
                        height: t.height
                    }), i._updateCache(t), i._propagate("resize", e);
                }
            });
        }
    }), V.ui.plugin.add("resizable", "containment", {
        start: function() {
            var i, s, n = V(this).resizable("instance"), t = n.options, e = n.element, o = t.containment, a = o instanceof V ? o.get(0) : /parent/.test(o) ? e.parent().get(0) : o;
            a && (n.containerElement = V(a), /document/.test(o) || o === document ? (n.containerOffset = {
                left: 0,
                top: 0
            }, n.containerPosition = {
                left: 0,
                top: 0
            }, n.parentData = {
                element: V(document),
                left: 0,
                top: 0,
                width: V(document).width(),
                height: V(document).height() || document.body.parentNode.scrollHeight
            }) : (i = V(a), s = [], V([ "Top", "Right", "Left", "Bottom" ]).each(function(t, e) {
                s[t] = n._num(i.css("padding" + e));
            }), n.containerOffset = i.offset(), n.containerPosition = i.position(), 
            n.containerSize = {
                height: i.innerHeight() - s[3],
                width: i.innerWidth() - s[1]
            }, t = n.containerOffset, e = n.containerSize.height, o = n.containerSize.width, 
            o = n._hasScroll(a, "left") ? a.scrollWidth : o, e = n._hasScroll(a) ? a.scrollHeight : e, 
            n.parentData = {
                element: a,
                left: t.left,
                top: t.top,
                width: o,
                height: e
            }));
        },
        resize: function(t) {
            var e = V(this).resizable("instance"), i = e.options, s = e.containerOffset, n = e.position, o = e._aspectRatio || t.shiftKey, a = {
                top: 0,
                left: 0
            }, r = e.containerElement, t = !0;
            r[0] !== document && /static/.test(r.css("position")) && (a = s), n.left < (e._helper ? s.left : 0) && (e.size.width = e.size.width + (e._helper ? e.position.left - s.left : e.position.left - a.left), 
            o && (e.size.height = e.size.width / e.aspectRatio, t = !1), e.position.left = i.helper ? s.left : 0), 
            n.top < (e._helper ? s.top : 0) && (e.size.height = e.size.height + (e._helper ? e.position.top - s.top : e.position.top), 
            o && (e.size.width = e.size.height * e.aspectRatio, t = !1), e.position.top = e._helper ? s.top : 0), 
            i = e.containerElement.get(0) === e.element.parent().get(0), n = /relative|absolute/.test(e.containerElement.css("position")), 
            i && n ? (e.offset.left = e.parentData.left + e.position.left, e.offset.top = e.parentData.top + e.position.top) : (e.offset.left = e.element.offset().left, 
            e.offset.top = e.element.offset().top), n = Math.abs(e.sizeDiff.width + (e._helper ? e.offset.left - a.left : e.offset.left - s.left)), 
            s = Math.abs(e.sizeDiff.height + (e._helper ? e.offset.top - a.top : e.offset.top - s.top)), 
            n + e.size.width >= e.parentData.width && (e.size.width = e.parentData.width - n, 
            o && (e.size.height = e.size.width / e.aspectRatio, t = !1)), s + e.size.height >= e.parentData.height && (e.size.height = e.parentData.height - s, 
            o && (e.size.width = e.size.height * e.aspectRatio, t = !1)), t || (e.position.left = e.prevPosition.left, 
            e.position.top = e.prevPosition.top, e.size.width = e.prevSize.width, 
            e.size.height = e.prevSize.height);
        },
        stop: function() {
            var t = V(this).resizable("instance"), e = t.options, i = t.containerOffset, s = t.containerPosition, n = t.containerElement, a = (o = V(t.helper)).offset(), r = o.outerWidth() - t.sizeDiff.width, o = o.outerHeight() - t.sizeDiff.height;
            t._helper && !e.animate && /relative/.test(n.css("position")) && V(this).css({
                left: a.left - s.left - i.left,
                width: r,
                height: o
            }), t._helper && !e.animate && /static/.test(n.css("position")) && V(this).css({
                left: a.left - s.left - i.left,
                width: r,
                height: o
            });
        }
    }), V.ui.plugin.add("resizable", "alsoResize", {
        start: function() {
            var t = V(this).resizable("instance").options;
            V(t.alsoResize).each(function() {
                var t = V(this);
                t.data("ui-resizable-alsoresize", {
                    width: parseFloat(t.width()),
                    height: parseFloat(t.height()),
                    left: parseFloat(t.css("left")),
                    top: parseFloat(t.css("top"))
                });
            });
        },
        resize: function(t, i) {
            var e = V(this).resizable("instance"), s = e.options, n = e.originalSize, o = e.originalPosition, a = {
                height: e.size.height - n.height || 0,
                width: e.size.width - n.width || 0,
                top: e.position.top - o.top || 0,
                left: e.position.left - o.left || 0
            };
            V(s.alsoResize).each(function() {
                var t = V(this), s = V(this).data("ui-resizable-alsoresize"), n = {}, e = t.parents(i.originalElement[0]).length ? [ "width", "height" ] : [ "width", "height", "top", "left" ];
                V.each(e, function(t, e) {
                    var i = (s[e] || 0) + (a[e] || 0);
                    i && 0 <= i && (n[e] = i || null);
                }), t.css(n);
            });
        },
        stop: function() {
            V(this).removeData("ui-resizable-alsoresize");
        }
    }), V.ui.plugin.add("resizable", "ghost", {
        start: function() {
            var t = V(this).resizable("instance"), e = t.size;
            t.ghost = t.originalElement.clone(), t.ghost.css({
                opacity: .25,
                display: "block",
                position: "relative",
                height: e.height,
                width: e.width,
                margin: 0,
                left: 0,
                top: 0
            }), t._addClass(t.ghost, "ui-resizable-ghost"), !1 !== V.uiBackCompat && "string" == typeof t.options.ghost && t.ghost.addClass(this.options.ghost), 
            t.ghost.appendTo(t.helper);
        },
        resize: function() {
            var t = V(this).resizable("instance");
            t.ghost && t.ghost.css({
                position: "relative",
                height: t.size.height,
                width: t.size.width
            });
        },
        stop: function() {
            var t = V(this).resizable("instance");
            t.ghost && t.helper && t.helper.get(0).removeChild(t.ghost.get(0));
        }
    }), V.ui.plugin.add("resizable", "grid", {
        resize: function() {
            var t, e = V(this).resizable("instance"), i = e.options, s = e.size, n = e.originalSize, o = e.originalPosition, a = e.axis, r = "number" == typeof i.grid ? [ i.grid, i.grid ] : i.grid, l = r[0] || 1, h = r[1] || 1, c = Math.round((s.width - n.width) / l) * l, u = Math.round((s.height - n.height) / h) * h, d = n.width + c, p = n.height + u, f = i.maxWidth && i.maxWidth < d, g = i.maxHeight && i.maxHeight < p, m = i.minWidth && i.minWidth > d, s = i.minHeight && i.minHeight > p;
            i.grid = r, m && (d += l), s && (p += h), f && (d -= l), g && (p -= h), 
            /^(se|s|e)$/.test(a) ? (e.size.width = d, e.size.height = p) : /^(ne)$/.test(a) ? (e.size.width = d, 
            e.size.height = p, e.position.top = o.top - u) : /^(sw)$/.test(a) ? (e.size.width = d, 
            e.size.height = p, e.position.left = o.left - c) : ((p - h <= 0 || d - l <= 0) && (t = e._getPaddingPlusBorderDimensions(this)), 
            0 < p - h ? (e.size.height = p, e.position.top = o.top - u) : (p = h - t.height, 
            e.size.height = p, e.position.top = o.top + n.height - p), 0 < d - l ? (e.size.width = d, 
            e.position.left = o.left - c) : (d = l - t.width, e.size.width = d, 
            e.position.left = o.left + n.width - d));
        }
    }), V.ui.resizable, V.widget("ui.dialog", {
        version: "1.13.1",
        options: {
            appendTo: "body",
            autoOpen: !0,
            buttons: [],
            classes: {
                "ui-dialog": "ui-corner-all",
                "ui-dialog-titlebar": "ui-corner-all"
            },
            closeOnEscape: !0,
            closeText: "Close",
            draggable: !0,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: !1,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function(t) {
                    var e = V(this).css(t).offset().top;
                    e < 0 && V(this).css("top", t.top - e);
                }
            },
            resizable: !0,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: !0,
            height: !0,
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0,
            width: !0
        },
        resizableRelatedOptions: {
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0
        },
        _create: function() {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            }, this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            }, this.originalTitle = this.element.attr("title"), null == this.options.title && null != this.originalTitle && (this.options.title = this.originalTitle), 
            this.options.disabled && (this.options.disabled = !1), this._createWrapper(), 
            this.element.show().removeAttr("title").appendTo(this.uiDialog), this._addClass("ui-dialog-content", "ui-widget-content"), 
            this._createTitlebar(), this._createButtonPane(), this.options.draggable && V.fn.draggable && this._makeDraggable(), 
            this.options.resizable && V.fn.resizable && this._makeResizable(), this._isOpen = !1, 
            this._trackFocus();
        },
        _init: function() {
            this.options.autoOpen && this.open();
        },
        _appendTo: function() {
            var t = this.options.appendTo;
            return t && (t.jquery || t.nodeType) ? V(t) : this.document.find(t || "body").eq(0);
        },
        _destroy: function() {
            var t, e = this.originalPosition;
            this._untrackInstance(), this._destroyOverlay(), this.element.removeUniqueId().css(this.originalCss).detach(), 
            this.uiDialog.remove(), this.originalTitle && this.element.attr("title", this.originalTitle), 
            (t = e.parent.children().eq(e.index)).length && t[0] !== this.element[0] ? t.before(this.element) : e.parent.append(this.element);
        },
        widget: function() {
            return this.uiDialog;
        },
        disable: V.noop,
        enable: V.noop,
        close: function(t) {
            var e = this;
            this._isOpen && !1 !== this._trigger("beforeClose", t) && (this._isOpen = !1, 
            this._focusedElement = null, this._destroyOverlay(), this._untrackInstance(), 
            this.opener.filter(":focusable").trigger("focus").length || V.ui.safeBlur(V.ui.safeActiveElement(this.document[0])), 
            this._hide(this.uiDialog, this.options.hide, function() {
                e._trigger("close", t);
            }));
        },
        isOpen: function() {
            return this._isOpen;
        },
        moveToTop: function() {
            this._moveToTop();
        },
        _moveToTop: function(t, e) {
            var i = !1, s = this.uiDialog.siblings(".ui-front:visible").map(function() {
                return +V(this).css("z-index");
            }).get();
            return (s = Math.max.apply(null, s)) >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", s + 1), 
            i = !0), i && !e && this._trigger("focus", t), i;
        },
        open: function() {
            var t = this;
            this._isOpen ? this._moveToTop() && this._focusTabbable() : (this._isOpen = !0, 
            this.opener = V(V.ui.safeActiveElement(this.document[0])), this._size(), 
            this._position(), this._createOverlay(), this._moveToTop(null, !0), 
            this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), 
            this._show(this.uiDialog, this.options.show, function() {
                t._focusTabbable(), t._trigger("focus");
            }), this._makeFocusTarget(), this._trigger("open"));
        },
        _focusTabbable: function() {
            var t = this._focusedElement;
            (t = (t = (t = (t = (t = t || this.element.find("[autofocus]")).length ? t : this.element.find(":tabbable")).length ? t : this.uiDialogButtonPane.find(":tabbable")).length ? t : this.uiDialogTitlebarClose.filter(":tabbable")).length ? t : this.uiDialog).eq(0).trigger("focus");
        },
        _restoreTabbableFocus: function() {
            var t = V.ui.safeActiveElement(this.document[0]);
            this.uiDialog[0] === t || V.contains(this.uiDialog[0], t) || this._focusTabbable();
        },
        _keepFocus: function(t) {
            t.preventDefault(), this._restoreTabbableFocus(), this._delay(this._restoreTabbableFocus);
        },
        _createWrapper: function() {
            this.uiDialog = V("<div>").hide().attr({
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo()), this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front"), 
            this._on(this.uiDialog, {
                keydown: function(t) {
                    if (this.options.closeOnEscape && !t.isDefaultPrevented() && t.keyCode && t.keyCode === V.ui.keyCode.ESCAPE) return t.preventDefault(), 
                    void this.close(t);
                    var e, i, s;
                    t.keyCode !== V.ui.keyCode.TAB || t.isDefaultPrevented() || (e = this.uiDialog.find(":tabbable"), 
                    i = e.first(), s = e.last(), t.target !== s[0] && t.target !== this.uiDialog[0] || t.shiftKey ? t.target !== i[0] && t.target !== this.uiDialog[0] || !t.shiftKey || (this._delay(function() {
                        s.trigger("focus");
                    }), t.preventDefault()) : (this._delay(function() {
                        i.trigger("focus");
                    }), t.preventDefault()));
                },
                mousedown: function(t) {
                    this._moveToTop(t) && this._focusTabbable();
                }
            }), this.element.find("[aria-describedby]").length || this.uiDialog.attr({
                "aria-describedby": this.element.uniqueId().attr("id")
            });
        },
        _createTitlebar: function() {
            var t;
            this.uiDialogTitlebar = V("<div>"), this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix"), 
            this._on(this.uiDialogTitlebar, {
                mousedown: function(t) {
                    V(t.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.trigger("focus");
                }
            }), this.uiDialogTitlebarClose = V("<button type='button'></button>").button({
                label: V("<a>").text(this.options.closeText).html(),
                icon: "ui-icon-closethick",
                showLabel: !1
            }).appendTo(this.uiDialogTitlebar), this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close"), 
            this._on(this.uiDialogTitlebarClose, {
                click: function(t) {
                    t.preventDefault(), this.close(t);
                }
            }), t = V("<span>").uniqueId().prependTo(this.uiDialogTitlebar), this._addClass(t, "ui-dialog-title"), 
            this._title(t), this.uiDialogTitlebar.prependTo(this.uiDialog), this.uiDialog.attr({
                "aria-labelledby": t.attr("id")
            });
        },
        _title: function(t) {
            this.options.title ? t.text(this.options.title) : t.html("&#160;");
        },
        _createButtonPane: function() {
            this.uiDialogButtonPane = V("<div>"), this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix"), 
            this.uiButtonSet = V("<div>").appendTo(this.uiDialogButtonPane), this._addClass(this.uiButtonSet, "ui-dialog-buttonset"), 
            this._createButtons();
        },
        _createButtons: function() {
            var s = this, t = this.options.buttons;
            this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), V.isEmptyObject(t) || Array.isArray(t) && !t.length ? this._removeClass(this.uiDialog, "ui-dialog-buttons") : (V.each(t, function(t, e) {
                var i;
                e = V.extend({
                    type: "button"
                }, e = "function" == typeof e ? {
                    click: e,
                    text: t
                } : e), i = e.click, t = {
                    icon: e.icon,
                    iconPosition: e.iconPosition,
                    showLabel: e.showLabel,
                    icons: e.icons,
                    text: e.text
                }, delete e.click, delete e.icon, delete e.iconPosition, delete e.showLabel, 
                delete e.icons, "boolean" == typeof e.text && delete e.text, V("<button></button>", e).button(t).appendTo(s.uiButtonSet).on("click", function() {
                    i.apply(s.element[0], arguments);
                });
            }), this._addClass(this.uiDialog, "ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog));
        },
        _makeDraggable: function() {
            var n = this, o = this.options;
            function a(t) {
                return {
                    position: t.position,
                    offset: t.offset
                };
            }
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function(t, e) {
                    n._addClass(V(this), "ui-dialog-dragging"), n._blockFrames(), 
                    n._trigger("dragStart", t, a(e));
                },
                drag: function(t, e) {
                    n._trigger("drag", t, a(e));
                },
                stop: function(t, e) {
                    var i = e.offset.left - n.document.scrollLeft(), s = e.offset.top - n.document.scrollTop();
                    o.position = {
                        my: "left top",
                        at: "left" + (0 <= i ? "+" : "") + i + " top" + (0 <= s ? "+" : "") + s,
                        of: n.window
                    }, n._removeClass(V(this), "ui-dialog-dragging"), n._unblockFrames(), 
                    n._trigger("dragStop", t, a(e));
                }
            });
        },
        _makeResizable: function() {
            var n = this, o = this.options, t = o.resizable, e = this.uiDialog.css("position"), t = "string" == typeof t ? t : "n,e,s,w,se,sw,ne,nw";
            function a(t) {
                return {
                    originalPosition: t.originalPosition,
                    originalSize: t.originalSize,
                    position: t.position,
                    size: t.size
                };
            }
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: o.maxWidth,
                maxHeight: o.maxHeight,
                minWidth: o.minWidth,
                minHeight: this._minHeight(),
                handles: t,
                start: function(t, e) {
                    n._addClass(V(this), "ui-dialog-resizing"), n._blockFrames(), 
                    n._trigger("resizeStart", t, a(e));
                },
                resize: function(t, e) {
                    n._trigger("resize", t, a(e));
                },
                stop: function(t, e) {
                    var s = (i = n.uiDialog.offset()).left - n.document.scrollLeft(), i = i.top - n.document.scrollTop();
                    o.height = n.uiDialog.height(), o.width = n.uiDialog.width(), 
                    o.position = {
                        my: "left top",
                        at: "left" + (0 <= s ? "+" : "") + s + " top" + (0 <= i ? "+" : "") + i,
                        of: n.window
                    }, n._removeClass(V(this), "ui-dialog-resizing"), n._unblockFrames(), 
                    n._trigger("resizeStop", t, a(e));
                }
            }).css("position", e);
        },
        _trackFocus: function() {
            this._on(this.widget(), {
                focusin: function(t) {
                    this._makeFocusTarget(), this._focusedElement = V(t.target);
                }
            });
        },
        _makeFocusTarget: function() {
            this._untrackInstance(), this._trackingInstances().unshift(this);
        },
        _untrackInstance: function() {
            var t = this._trackingInstances(), e = V.inArray(this, t);
            -1 !== e && t.splice(e, 1);
        },
        _trackingInstances: function() {
            var t = this.document.data("ui-dialog-instances");
            return t || this.document.data("ui-dialog-instances", t = []), t;
        },
        _minHeight: function() {
            var t = this.options;
            return "auto" === t.height ? t.minHeight : Math.min(t.minHeight, t.height);
        },
        _position: function() {
            var t = this.uiDialog.is(":visible");
            t || this.uiDialog.show(), this.uiDialog.position(this.options.position), 
            t || this.uiDialog.hide();
        },
        _setOptions: function(t) {
            var i = this, s = !1, n = {};
            V.each(t, function(t, e) {
                i._setOption(t, e), t in i.sizeRelatedOptions && (s = !0), t in i.resizableRelatedOptions && (n[t] = e);
            }), s && (this._size(), this._position()), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", n);
        },
        _setOption: function(t, e) {
            var i, s = this.uiDialog;
            "disabled" !== t && (this._super(t, e), "appendTo" === t && this.uiDialog.appendTo(this._appendTo()), 
            "buttons" === t && this._createButtons(), "closeText" === t && this.uiDialogTitlebarClose.button({
                label: V("<a>").text("" + this.options.closeText).html()
            }), "draggable" === t && ((i = s.is(":data(ui-draggable)")) && !e && s.draggable("destroy"), 
            !i && e && this._makeDraggable()), "position" === t && this._position(), 
            "resizable" === t && ((i = s.is(":data(ui-resizable)")) && !e && s.resizable("destroy"), 
            i && "string" == typeof e && s.resizable("option", "handles", e), i || !1 === e || this._makeResizable()), 
            "title" === t && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")));
        },
        _size: function() {
            var t, e, i, s = this.options;
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            }), s.minWidth > s.width && (s.width = s.minWidth), t = this.uiDialog.css({
                height: "auto",
                width: s.width
            }).outerHeight(), e = Math.max(0, s.minHeight - t), i = "number" == typeof s.maxHeight ? Math.max(0, s.maxHeight - t) : "none", 
            "auto" === s.height ? this.element.css({
                minHeight: e,
                maxHeight: i,
                height: "auto"
            }) : this.element.height(Math.max(0, s.height - t)), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight());
        },
        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var t = V(this);
                return V("<div>").css({
                    position: "absolute",
                    width: t.outerWidth(),
                    height: t.outerHeight()
                }).appendTo(t.parent()).offset(t.offset())[0];
            });
        },
        _unblockFrames: function() {
            this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
        },
        _allowInteraction: function(t) {
            return !!V(t.target).closest(".ui-dialog").length || !!V(t.target).closest(".ui-datepicker").length;
        },
        _createOverlay: function() {
            var i, s;
            this.options.modal && (i = V.fn.jquery.substring(0, 4), s = !0, this._delay(function() {
                s = !1;
            }), this.document.data("ui-dialog-overlays") || this.document.on("focusin.ui-dialog", function(t) {
                var e;
                s || (e = this._trackingInstances()[0])._allowInteraction(t) || (t.preventDefault(), 
                e._focusTabbable(), "3.4." !== i && "3.5." !== i || e._delay(e._restoreTabbableFocus));
            }.bind(this)), this.overlay = V("<div>").appendTo(this._appendTo()), 
            this._addClass(this.overlay, null, "ui-widget-overlay ui-front"), this._on(this.overlay, {
                mousedown: "_keepFocus"
            }), this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1));
        },
        _destroyOverlay: function() {
            var t;
            this.options.modal && this.overlay && ((t = this.document.data("ui-dialog-overlays") - 1) ? this.document.data("ui-dialog-overlays", t) : (this.document.off("focusin.ui-dialog"), 
            this.document.removeData("ui-dialog-overlays")), this.overlay.remove(), 
            this.overlay = null);
        }
    }), !1 !== V.uiBackCompat && V.widget("ui.dialog", V.ui.dialog, {
        options: {
            dialogClass: ""
        },
        _createWrapper: function() {
            this._super(), this.uiDialog.addClass(this.options.dialogClass);
        },
        _setOption: function(t, e) {
            "dialogClass" === t && this.uiDialog.removeClass(this.options.dialogClass).addClass(e), 
            this._superApply(arguments);
        }
    }), V.ui.dialog, V.widget("ui.droppable", {
        version: "1.13.1",
        widgetEventPrefix: "drop",
        options: {
            accept: "*",
            addClasses: !0,
            greedy: !1,
            scope: "default",
            tolerance: "intersect",
            activate: null,
            deactivate: null,
            drop: null,
            out: null,
            over: null
        },
        _create: function() {
            var t, e = this.options, i = e.accept;
            this.isover = !1, this.isout = !0, this.accept = "function" == typeof i ? i : function(t) {
                return t.is(i);
            }, this.proportions = function() {
                if (!arguments.length) return t = t || {
                    width: this.element[0].offsetWidth,
                    height: this.element[0].offsetHeight
                };
                t = arguments[0];
            }, this._addToManager(e.scope), e.addClasses && this._addClass("ui-droppable");
        },
        _addToManager: function(t) {
            V.ui.ddmanager.droppables[t] = V.ui.ddmanager.droppables[t] || [], V.ui.ddmanager.droppables[t].push(this);
        },
        _splice: function(t) {
            for (var e = 0; e < t.length; e++) t[e] === this && t.splice(e, 1);
        },
        _destroy: function() {
            var t = V.ui.ddmanager.droppables[this.options.scope];
            this._splice(t);
        },
        _setOption: function(t, e) {
            var i;
            "accept" === t ? this.accept = "function" == typeof e ? e : function(t) {
                return t.is(e);
            } : "scope" === t && (i = V.ui.ddmanager.droppables[this.options.scope], 
            this._splice(i), this._addToManager(e)), this._super(t, e);
        },
        _activate: function(t) {
            var e = V.ui.ddmanager.current;
            this._addActiveClass(), e && this._trigger("activate", t, this.ui(e));
        },
        _deactivate: function(t) {
            var e = V.ui.ddmanager.current;
            this._removeActiveClass(), e && this._trigger("deactivate", t, this.ui(e));
        },
        _over: function(t) {
            var e = V.ui.ddmanager.current;
            e && (e.currentItem || e.element)[0] !== this.element[0] && this.accept.call(this.element[0], e.currentItem || e.element) && (this._addHoverClass(), 
            this._trigger("over", t, this.ui(e)));
        },
        _out: function(t) {
            var e = V.ui.ddmanager.current;
            e && (e.currentItem || e.element)[0] !== this.element[0] && this.accept.call(this.element[0], e.currentItem || e.element) && (this._removeHoverClass(), 
            this._trigger("out", t, this.ui(e)));
        },
        _drop: function(e, t) {
            var i = t || V.ui.ddmanager.current, s = !1;
            return !(!i || (i.currentItem || i.element)[0] === this.element[0]) && (this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
                var t = V(this).droppable("instance");
                if (t.options.greedy && !t.options.disabled && t.options.scope === i.options.scope && t.accept.call(t.element[0], i.currentItem || i.element) && V.ui.intersect(i, V.extend(t, {
                    offset: t.element.offset()
                }), t.options.tolerance, e)) return !(s = !0);
            }), !s && !!this.accept.call(this.element[0], i.currentItem || i.element) && (this._removeActiveClass(), 
            this._removeHoverClass(), this._trigger("drop", e, this.ui(i)), this.element));
        },
        ui: function(t) {
            return {
                draggable: t.currentItem || t.element,
                helper: t.helper,
                position: t.position,
                offset: t.positionAbs
            };
        },
        _addHoverClass: function() {
            this._addClass("ui-droppable-hover");
        },
        _removeHoverClass: function() {
            this._removeClass("ui-droppable-hover");
        },
        _addActiveClass: function() {
            this._addClass("ui-droppable-active");
        },
        _removeActiveClass: function() {
            this._removeClass("ui-droppable-active");
        }
    }), V.ui.intersect = function(t, e, i, s) {
        if (!e.offset) return !1;
        var n = (t.positionAbs || t.position.absolute).left + t.margins.left, o = (t.positionAbs || t.position.absolute).top + t.margins.top, a = n + t.helperProportions.width, r = o + t.helperProportions.height, l = e.offset.left, h = e.offset.top, c = l + e.proportions().width, u = h + e.proportions().height;
        switch (i) {
          case "fit":
            return l <= n && a <= c && h <= o && r <= u;

          case "intersect":
            return l < n + t.helperProportions.width / 2 && a - t.helperProportions.width / 2 < c && h < o + t.helperProportions.height / 2 && r - t.helperProportions.height / 2 < u;

          case "pointer":
            return lt(s.pageY, h, e.proportions().height) && lt(s.pageX, l, e.proportions().width);

          case "touch":
            return (h <= o && o <= u || h <= r && r <= u || o < h && u < r) && (l <= n && n <= c || l <= a && a <= c || n < l && c < a);

          default:
            return !1;
        }
    }, !(V.ui.ddmanager = {
        current: null,
        droppables: {
            default: []
        },
        prepareOffsets: function(t, e) {
            var i, s, n = V.ui.ddmanager.droppables[t.options.scope] || [], o = e ? e.type : null, a = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
            t: for (i = 0; i < n.length; i++) if (!(n[i].options.disabled || t && !n[i].accept.call(n[i].element[0], t.currentItem || t.element))) {
                for (s = 0; s < a.length; s++) if (a[s] === n[i].element[0]) {
                    n[i].proportions().height = 0;
                    continue t;
                }
                n[i].visible = "none" !== n[i].element.css("display"), n[i].visible && ("mousedown" === o && n[i]._activate.call(n[i], e), 
                n[i].offset = n[i].element.offset(), n[i].proportions({
                    width: n[i].element[0].offsetWidth,
                    height: n[i].element[0].offsetHeight
                }));
            }
        },
        drop: function(t, e) {
            var i = !1;
            return V.each((V.ui.ddmanager.droppables[t.options.scope] || []).slice(), function() {
                this.options && (!this.options.disabled && this.visible && V.ui.intersect(t, this, this.options.tolerance, e) && (i = this._drop.call(this, e) || i), 
                !this.options.disabled && this.visible && this.accept.call(this.element[0], t.currentItem || t.element) && (this.isout = !0, 
                this.isover = !1, this._deactivate.call(this, e)));
            }), i;
        },
        dragStart: function(t, e) {
            t.element.parentsUntil("body").on("scroll.droppable", function() {
                t.options.refreshPositions || V.ui.ddmanager.prepareOffsets(t, e);
            });
        },
        drag: function(n, o) {
            n.options.refreshPositions && V.ui.ddmanager.prepareOffsets(n, o), V.each(V.ui.ddmanager.droppables[n.options.scope] || [], function() {
                var t, e, i, s;
                this.options.disabled || this.greedyChild || !this.visible || (s = !(i = V.ui.intersect(n, this, this.options.tolerance, o)) && this.isover ? "isout" : i && !this.isover ? "isover" : null) && (this.options.greedy && (e = this.options.scope, 
                (i = this.element.parents(":data(ui-droppable)").filter(function() {
                    return V(this).droppable("instance").options.scope === e;
                })).length && ((t = V(i[0]).droppable("instance")).greedyChild = "isover" === s)), 
                t && "isover" === s && (t.isover = !1, t.isout = !0, t._out.call(t, o)), 
                this[s] = !0, this["isout" === s ? "isover" : "isout"] = !1, this["isover" === s ? "_over" : "_out"].call(this, o), 
                t && "isout" === s && (t.isout = !1, t.isover = !0, t._over.call(t, o)));
            });
        },
        dragStop: function(t, e) {
            t.element.parentsUntil("body").off("scroll.droppable"), t.options.refreshPositions || V.ui.ddmanager.prepareOffsets(t, e);
        }
    }) !== V.uiBackCompat && V.widget("ui.droppable", V.ui.droppable, {
        options: {
            hoverClass: !1,
            activeClass: !1
        },
        _addActiveClass: function() {
            this._super(), this.options.activeClass && this.element.addClass(this.options.activeClass);
        },
        _removeActiveClass: function() {
            this._super(), this.options.activeClass && this.element.removeClass(this.options.activeClass);
        },
        _addHoverClass: function() {
            this._super(), this.options.hoverClass && this.element.addClass(this.options.hoverClass);
        },
        _removeHoverClass: function() {
            this._super(), this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
        }
    }), V.ui.droppable, V.widget("ui.progressbar", {
        version: "1.13.1",
        options: {
            classes: {
                "ui-progressbar": "ui-corner-all",
                "ui-progressbar-value": "ui-corner-left",
                "ui-progressbar-complete": "ui-corner-right"
            },
            max: 100,
            value: 0,
            change: null,
            complete: null
        },
        min: 0,
        _create: function() {
            this.oldValue = this.options.value = this._constrainedValue(), this.element.attr({
                role: "progressbar",
                "aria-valuemin": this.min
            }), this._addClass("ui-progressbar", "ui-widget ui-widget-content"), 
            this.valueDiv = V("<div>").appendTo(this.element), this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header"), 
            this._refreshValue();
        },
        _destroy: function() {
            this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"), 
            this.valueDiv.remove();
        },
        value: function(t) {
            if (void 0 === t) return this.options.value;
            this.options.value = this._constrainedValue(t), this._refreshValue();
        },
        _constrainedValue: function(t) {
            return void 0 === t && (t = this.options.value), this.indeterminate = !1 === t, 
            "number" != typeof t && (t = 0), !this.indeterminate && Math.min(this.options.max, Math.max(this.min, t));
        },
        _setOptions: function(t) {
            var e = t.value;
            delete t.value, this._super(t), this.options.value = this._constrainedValue(e), 
            this._refreshValue();
        },
        _setOption: function(t, e) {
            "max" === t && (e = Math.max(this.min, e)), this._super(t, e);
        },
        _setOptionDisabled: function(t) {
            this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t);
        },
        _percentage: function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
        },
        _refreshValue: function() {
            var t = this.options.value, e = this._percentage();
            this.valueDiv.toggle(this.indeterminate || t > this.min).width(e.toFixed(0) + "%"), 
            this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, t === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate), 
            this.indeterminate ? (this.element.removeAttr("aria-valuenow"), this.overlayDiv || (this.overlayDiv = V("<div>").appendTo(this.valueDiv), 
            this._addClass(this.overlayDiv, "ui-progressbar-overlay"))) : (this.element.attr({
                "aria-valuemax": this.options.max,
                "aria-valuenow": t
            }), this.overlayDiv && (this.overlayDiv.remove(), this.overlayDiv = null)), 
            this.oldValue !== t && (this.oldValue = t, this._trigger("change")), 
            t === this.options.max && this._trigger("complete");
        }
    }), V.widget("ui.selectable", V.ui.mouse, {
        version: "1.13.1",
        options: {
            appendTo: "body",
            autoRefresh: !0,
            distance: 0,
            filter: "*",
            tolerance: "touch",
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },
        _create: function() {
            var i = this;
            this._addClass("ui-selectable"), this.dragged = !1, this.refresh = function() {
                i.elementPos = V(i.element[0]).offset(), i.selectees = V(i.options.filter, i.element[0]), 
                i._addClass(i.selectees, "ui-selectee"), i.selectees.each(function() {
                    var t = V(this), e = {
                        left: (e = t.offset()).left - i.elementPos.left,
                        top: e.top - i.elementPos.top
                    };
                    V.data(this, "selectable-item", {
                        element: this,
                        $element: t,
                        left: e.left,
                        top: e.top,
                        right: e.left + t.outerWidth(),
                        bottom: e.top + t.outerHeight(),
                        startselected: !1,
                        selected: t.hasClass("ui-selected"),
                        selecting: t.hasClass("ui-selecting"),
                        unselecting: t.hasClass("ui-unselecting")
                    });
                });
            }, this.refresh(), this._mouseInit(), this.helper = V("<div>"), this._addClass(this.helper, "ui-selectable-helper");
        },
        _destroy: function() {
            this.selectees.removeData("selectable-item"), this._mouseDestroy();
        },
        _mouseStart: function(i) {
            var s = this, t = this.options;
            this.opos = [ i.pageX, i.pageY ], this.elementPos = V(this.element[0]).offset(), 
            this.options.disabled || (this.selectees = V(t.filter, this.element[0]), 
            this._trigger("start", i), V(t.appendTo).append(this.helper), this.helper.css({
                left: i.pageX,
                top: i.pageY,
                width: 0,
                height: 0
            }), t.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function() {
                var t = V.data(this, "selectable-item");
                t.startselected = !0, i.metaKey || i.ctrlKey || (s._removeClass(t.$element, "ui-selected"), 
                t.selected = !1, s._addClass(t.$element, "ui-unselecting"), t.unselecting = !0, 
                s._trigger("unselecting", i, {
                    unselecting: t.element
                }));
            }), V(i.target).parents().addBack().each(function() {
                var t, e = V.data(this, "selectable-item");
                if (e) return t = !i.metaKey && !i.ctrlKey || !e.$element.hasClass("ui-selected"), 
                s._removeClass(e.$element, t ? "ui-unselecting" : "ui-selected")._addClass(e.$element, t ? "ui-selecting" : "ui-unselecting"), 
                e.unselecting = !t, e.selecting = t, (e.selected = t) ? s._trigger("selecting", i, {
                    selecting: e.element
                }) : s._trigger("unselecting", i, {
                    unselecting: e.element
                }), !1;
            }));
        },
        _mouseDrag: function(s) {
            var t, n, o, a, r, l, h;
            if (this.dragged = !0, !this.options.disabled) return o = (n = this).options, 
            a = this.opos[0], r = this.opos[1], l = s.pageX, h = s.pageY, l < a && (t = l, 
            l = a, a = t), h < r && (t = h, h = r, r = t), this.helper.css({
                left: a,
                top: r,
                width: l - a,
                height: h - r
            }), this.selectees.each(function() {
                var t = V.data(this, "selectable-item"), e = !1, i = {};
                t && t.element !== n.element[0] && (i.left = t.left + n.elementPos.left, 
                i.right = t.right + n.elementPos.left, i.top = t.top + n.elementPos.top, 
                i.bottom = t.bottom + n.elementPos.top, "touch" === o.tolerance ? e = !(i.left > l || i.right < a || i.top > h || i.bottom < r) : "fit" === o.tolerance && (e = i.left > a && i.right < l && i.top > r && i.bottom < h), 
                e ? (t.selected && (n._removeClass(t.$element, "ui-selected"), t.selected = !1), 
                t.unselecting && (n._removeClass(t.$element, "ui-unselecting"), 
                t.unselecting = !1), t.selecting || (n._addClass(t.$element, "ui-selecting"), 
                t.selecting = !0, n._trigger("selecting", s, {
                    selecting: t.element
                }))) : (t.selecting && ((s.metaKey || s.ctrlKey) && t.startselected ? (n._removeClass(t.$element, "ui-selecting"), 
                t.selecting = !1, n._addClass(t.$element, "ui-selected"), t.selected = !0) : (n._removeClass(t.$element, "ui-selecting"), 
                t.selecting = !1, t.startselected && (n._addClass(t.$element, "ui-unselecting"), 
                t.unselecting = !0), n._trigger("unselecting", s, {
                    unselecting: t.element
                }))), !t.selected || s.metaKey || s.ctrlKey || t.startselected || (n._removeClass(t.$element, "ui-selected"), 
                t.selected = !1, n._addClass(t.$element, "ui-unselecting"), t.unselecting = !0, 
                n._trigger("unselecting", s, {
                    unselecting: t.element
                }))));
            }), !1;
        },
        _mouseStop: function(e) {
            var i = this;
            return this.dragged = !1, V(".ui-unselecting", this.element[0]).each(function() {
                var t = V.data(this, "selectable-item");
                i._removeClass(t.$element, "ui-unselecting"), t.unselecting = !1, 
                t.startselected = !1, i._trigger("unselected", e, {
                    unselected: t.element
                });
            }), V(".ui-selecting", this.element[0]).each(function() {
                var t = V.data(this, "selectable-item");
                i._removeClass(t.$element, "ui-selecting")._addClass(t.$element, "ui-selected"), 
                t.selecting = !1, t.selected = !0, t.startselected = !0, i._trigger("selected", e, {
                    selected: t.element
                });
            }), this._trigger("stop", e), this.helper.remove(), !1;
        }
    }), V.widget("ui.selectmenu", [ V.ui.formResetMixin, {
        version: "1.13.1",
        defaultElement: "<select>",
        options: {
            appendTo: null,
            classes: {
                "ui-selectmenu-button-open": "ui-corner-top",
                "ui-selectmenu-button-closed": "ui-corner-all"
            },
            disabled: null,
            icons: {
                button: "ui-icon-triangle-1-s"
            },
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            width: !1,
            change: null,
            close: null,
            focus: null,
            open: null,
            select: null
        },
        _create: function() {
            var t = this.element.uniqueId().attr("id");
            this.ids = {
                element: t,
                button: t + "-button",
                menu: t + "-menu"
            }, this._drawButton(), this._drawMenu(), this._bindFormResetHandler(), 
            this._rendered = !1, this.menuItems = V();
        },
        _drawButton: function() {
            var t, e = this, i = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex);
            this.labels = this.element.labels().attr("for", this.ids.button), this._on(this.labels, {
                click: function(t) {
                    this.button.trigger("focus"), t.preventDefault();
                }
            }), this.element.hide(), this.button = V("<span>", {
                tabindex: this.options.disabled ? -1 : 0,
                id: this.ids.button,
                role: "combobox",
                "aria-expanded": "false",
                "aria-autocomplete": "list",
                "aria-owns": this.ids.menu,
                "aria-haspopup": "true",
                title: this.element.attr("title")
            }).insertAfter(this.element), this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget"), 
            t = V("<span>").appendTo(this.button), this._addClass(t, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button), 
            this.buttonItem = this._renderButtonItem(i).appendTo(this.button), !1 !== this.options.width && this._resizeButton(), 
            this._on(this.button, this._buttonEvents), this.button.one("focusin", function() {
                e._rendered || e._refreshMenu();
            });
        },
        _drawMenu: function() {
            var i = this;
            this.menu = V("<ul>", {
                "aria-hidden": "true",
                "aria-labelledby": this.ids.button,
                id: this.ids.menu
            }), this.menuWrap = V("<div>").append(this.menu), this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front"), 
            this.menuWrap.appendTo(this._appendTo()), this.menuInstance = this.menu.menu({
                classes: {
                    "ui-menu": "ui-corner-bottom"
                },
                role: "listbox",
                select: function(t, e) {
                    t.preventDefault(), i._setSelection(), i._select(e.item.data("ui-selectmenu-item"), t);
                },
                focus: function(t, e) {
                    e = e.item.data("ui-selectmenu-item"), null != i.focusIndex && e.index !== i.focusIndex && (i._trigger("focus", t, {
                        item: e
                    }), i.isOpen || i._select(e, t)), i.focusIndex = e.index, i.button.attr("aria-activedescendant", i.menuItems.eq(e.index).attr("id"));
                }
            }).menu("instance"), this.menuInstance._off(this.menu, "mouseleave"), 
            this.menuInstance._closeOnDocumentClick = function() {
                return !1;
            }, this.menuInstance._isDivider = function() {
                return !1;
            };
        },
        refresh: function() {
            this._refreshMenu(), this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item") || {})), 
            null === this.options.width && this._resizeButton();
        },
        _refreshMenu: function() {
            var t = this.element.find("option");
            this.menu.empty(), this._parseOptions(t), this._renderMenu(this.menu, this.items), 
            this.menuInstance.refresh(), this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"), 
            this._rendered = !0, t.length && (t = this._getSelectedItem(), this.menuInstance.focus(null, t), 
            this._setAria(t.data("ui-selectmenu-item")), this._setOption("disabled", this.element.prop("disabled")));
        },
        open: function(t) {
            this.options.disabled || (this._rendered ? (this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active"), 
            this.menuInstance.focus(null, this._getSelectedItem())) : this._refreshMenu(), 
            this.menuItems.length && (this.isOpen = !0, this._toggleAttr(), this._resizeMenu(), 
            this._position(), this._on(this.document, this._documentClick), this._trigger("open", t)));
        },
        _position: function() {
            this.menuWrap.position(V.extend({
                of: this.button
            }, this.options.position));
        },
        close: function(t) {
            this.isOpen && (this.isOpen = !1, this._toggleAttr(), this.range = null, 
            this._off(this.document), this._trigger("close", t));
        },
        widget: function() {
            return this.button;
        },
        menuWidget: function() {
            return this.menu;
        },
        _renderButtonItem: function(t) {
            var e = V("<span>");
            return this._setText(e, t.label), this._addClass(e, "ui-selectmenu-text"), 
            e;
        },
        _renderMenu: function(s, t) {
            var n = this, o = "";
            V.each(t, function(t, e) {
                var i;
                e.optgroup !== o && (i = V("<li>", {
                    text: e.optgroup
                }), n._addClass(i, "ui-selectmenu-optgroup", "ui-menu-divider" + (e.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : "")), 
                i.appendTo(s), o = e.optgroup), n._renderItemData(s, e);
            });
        },
        _renderItemData: function(t, e) {
            return this._renderItem(t, e).data("ui-selectmenu-item", e);
        },
        _renderItem: function(t, e) {
            var i = V("<li>"), s = V("<div>", {
                title: e.element.attr("title")
            });
            return e.disabled && this._addClass(i, null, "ui-state-disabled"), this._setText(s, e.label), 
            i.append(s).appendTo(t);
        },
        _setText: function(t, e) {
            e ? t.text(e) : t.html("&#160;");
        },
        _move: function(t, e) {
            var i, s = ".ui-menu-item";
            this.isOpen ? i = this.menuItems.eq(this.focusIndex).parent("li") : (i = this.menuItems.eq(this.element[0].selectedIndex).parent("li"), 
            s += ":not(.ui-state-disabled)"), (s = "first" === t || "last" === t ? i["first" === t ? "prevAll" : "nextAll"](s).eq(-1) : i[t + "All"](s).eq(0)).length && this.menuInstance.focus(e, s);
        },
        _getSelectedItem: function() {
            return this.menuItems.eq(this.element[0].selectedIndex).parent("li");
        },
        _toggle: function(t) {
            this[this.isOpen ? "close" : "open"](t);
        },
        _setSelection: function() {
            var t;
            this.range && (window.getSelection ? ((t = window.getSelection()).removeAllRanges(), 
            t.addRange(this.range)) : this.range.select(), this.button.focus());
        },
        _documentClick: {
            mousedown: function(t) {
                !this.isOpen || V(t.target).closest(".ui-selectmenu-menu, #" + V.escapeSelector(this.ids.button)).length || this.close(t);
            }
        },
        _buttonEvents: {
            mousedown: function() {
                var t;
                window.getSelection ? (t = window.getSelection()).rangeCount && (this.range = t.getRangeAt(0)) : this.range = document.selection.createRange();
            },
            click: function(t) {
                this._setSelection(), this._toggle(t);
            },
            keydown: function(t) {
                var e = !0;
                switch (t.keyCode) {
                  case V.ui.keyCode.TAB:
                  case V.ui.keyCode.ESCAPE:
                    this.close(t), e = !1;
                    break;

                  case V.ui.keyCode.ENTER:
                    this.isOpen && this._selectFocusedItem(t);
                    break;

                  case V.ui.keyCode.UP:
                    t.altKey ? this._toggle(t) : this._move("prev", t);
                    break;

                  case V.ui.keyCode.DOWN:
                    t.altKey ? this._toggle(t) : this._move("next", t);
                    break;

                  case V.ui.keyCode.SPACE:
                    this.isOpen ? this._selectFocusedItem(t) : this._toggle(t);
                    break;

                  case V.ui.keyCode.LEFT:
                    this._move("prev", t);
                    break;

                  case V.ui.keyCode.RIGHT:
                    this._move("next", t);
                    break;

                  case V.ui.keyCode.HOME:
                  case V.ui.keyCode.PAGE_UP:
                    this._move("first", t);
                    break;

                  case V.ui.keyCode.END:
                  case V.ui.keyCode.PAGE_DOWN:
                    this._move("last", t);
                    break;

                  default:
                    this.menu.trigger(t), e = !1;
                }
                e && t.preventDefault();
            }
        },
        _selectFocusedItem: function(t) {
            var e = this.menuItems.eq(this.focusIndex).parent("li");
            e.hasClass("ui-state-disabled") || this._select(e.data("ui-selectmenu-item"), t);
        },
        _select: function(t, e) {
            var i = this.element[0].selectedIndex;
            this.element[0].selectedIndex = t.index, this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(t)), 
            this._setAria(t), this._trigger("select", e, {
                item: t
            }), t.index !== i && this._trigger("change", e, {
                item: t
            }), this.close(e);
        },
        _setAria: function(t) {
            t = this.menuItems.eq(t.index).attr("id"), this.button.attr({
                "aria-labelledby": t,
                "aria-activedescendant": t
            }), this.menu.attr("aria-activedescendant", t);
        },
        _setOption: function(t, e) {
            var i;
            "icons" === t && (i = this.button.find("span.ui-icon"), this._removeClass(i, null, this.options.icons.button)._addClass(i, null, e.button)), 
            this._super(t, e), "appendTo" === t && this.menuWrap.appendTo(this._appendTo()), 
            "width" === t && this._resizeButton();
        },
        _setOptionDisabled: function(t) {
            this._super(t), this.menuInstance.option("disabled", t), this.button.attr("aria-disabled", t), 
            this._toggleClass(this.button, null, "ui-state-disabled", t), this.element.prop("disabled", t), 
            t ? (this.button.attr("tabindex", -1), this.close()) : this.button.attr("tabindex", 0);
        },
        _appendTo: function() {
            var t = this.options.appendTo;
            return (t = (t = t && (t.jquery || t.nodeType ? V(t) : this.document.find(t).eq(0))) && t[0] ? t : this.element.closest(".ui-front, dialog")).length ? t : this.document[0].body;
        },
        _toggleAttr: function() {
            this.button.attr("aria-expanded", this.isOpen), this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen), 
            this.menu.attr("aria-hidden", !this.isOpen);
        },
        _resizeButton: function() {
            var t = this.options.width;
            !1 !== t ? (null === t && (t = this.element.show().outerWidth(), this.element.hide()), 
            this.button.outerWidth(t)) : this.button.css("width", "");
        },
        _resizeMenu: function() {
            this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1));
        },
        _getCreateOptions: function() {
            var t = this._super();
            return t.disabled = this.element.prop("disabled"), t;
        },
        _parseOptions: function(t) {
            var i = this, s = [];
            t.each(function(t, e) {
                e.hidden || s.push(i._parseOption(V(e), t));
            }), this.items = s;
        },
        _parseOption: function(t, e) {
            var i = t.parent("optgroup");
            return {
                element: t,
                index: e,
                value: t.val(),
                label: t.text(),
                optgroup: i.attr("label") || "",
                disabled: i.prop("disabled") || t.prop("disabled")
            };
        },
        _destroy: function() {
            this._unbindFormResetHandler(), this.menuWrap.remove(), this.button.remove(), 
            this.element.show(), this.element.removeUniqueId(), this.labels.attr("for", this.ids.element);
        }
    } ]), V.widget("ui.slider", V.ui.mouse, {
        version: "1.13.1",
        widgetEventPrefix: "slide",
        options: {
            animate: !1,
            classes: {
                "ui-slider": "ui-corner-all",
                "ui-slider-handle": "ui-corner-all",
                "ui-slider-range": "ui-corner-all ui-widget-header"
            },
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: !1,
            step: 1,
            value: 0,
            values: null,
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        numPages: 5,
        _create: function() {
            this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, 
            this._handleIndex = null, this._detectOrientation(), this._mouseInit(), 
            this._calculateNewMax(), this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content"), 
            this._refresh(), this._animateOff = !1;
        },
        _refresh: function() {
            this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue();
        },
        _createHandles: function() {
            var t, e = this.options, i = this.element.find(".ui-slider-handle"), s = [], n = e.values && e.values.length || 1;
            for (i.length > n && (i.slice(n).remove(), i = i.slice(0, n)), t = i.length; t < n; t++) s.push("<span tabindex='0'></span>");
            this.handles = i.add(V(s.join("")).appendTo(this.element)), this._addClass(this.handles, "ui-slider-handle", "ui-state-default"), 
            this.handle = this.handles.eq(0), this.handles.each(function(t) {
                V(this).data("ui-slider-handle-index", t).attr("tabIndex", 0);
            });
        },
        _createRange: function() {
            var t = this.options;
            t.range ? (!0 === t.range && (t.values ? t.values.length && 2 !== t.values.length ? t.values = [ t.values[0], t.values[0] ] : Array.isArray(t.values) && (t.values = t.values.slice(0)) : t.values = [ this._valueMin(), this._valueMin() ]), 
            this.range && this.range.length ? (this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max"), 
            this.range.css({
                left: "",
                bottom: ""
            })) : (this.range = V("<div>").appendTo(this.element), this._addClass(this.range, "ui-slider-range")), 
            "min" !== t.range && "max" !== t.range || this._addClass(this.range, "ui-slider-range-" + t.range)) : (this.range && this.range.remove(), 
            this.range = null);
        },
        _setupEvents: function() {
            this._off(this.handles), this._on(this.handles, this._handleEvents), 
            this._hoverable(this.handles), this._focusable(this.handles);
        },
        _destroy: function() {
            this.handles.remove(), this.range && this.range.remove(), this._mouseDestroy();
        },
        _mouseCapture: function(t) {
            var i, s, n, o, e, a, r = this, l = this.options;
            return !l.disabled && (this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            }, this.elementOffset = this.element.offset(), a = {
                x: t.pageX,
                y: t.pageY
            }, i = this._normValueFromMouse(a), s = this._valueMax() - this._valueMin() + 1, 
            this.handles.each(function(t) {
                var e = Math.abs(i - r.values(t));
                (e < s || s === e && (t === r._lastChangedValue || r.values(t) === l.min)) && (s = e, 
                n = V(this), o = t);
            }), !1 !== this._start(t, o) && (this._mouseSliding = !0, this._handleIndex = o, 
            this._addClass(n, null, "ui-state-active"), n.trigger("focus"), e = n.offset(), 
            a = !V(t.target).parents().addBack().is(".ui-slider-handle"), this._clickOffset = a ? {
                left: 0,
                top: 0
            } : {
                left: t.pageX - e.left - n.width() / 2,
                top: t.pageY - e.top - n.height() / 2 - (parseInt(n.css("borderTopWidth"), 10) || 0) - (parseInt(n.css("borderBottomWidth"), 10) || 0) + (parseInt(n.css("marginTop"), 10) || 0)
            }, this.handles.hasClass("ui-state-hover") || this._slide(t, o, i), 
            this._animateOff = !0));
        },
        _mouseStart: function() {
            return !0;
        },
        _mouseDrag: function(t) {
            var e = {
                x: t.pageX,
                y: t.pageY
            }, e = this._normValueFromMouse(e);
            return this._slide(t, this._handleIndex, e), !1;
        },
        _mouseStop: function(t) {
            return this._removeClass(this.handles, null, "ui-state-active"), this._mouseSliding = !1, 
            this._stop(t, this._handleIndex), this._change(t, this._handleIndex), 
            this._handleIndex = null, this._clickOffset = null, this._animateOff = !1;
        },
        _detectOrientation: function() {
            this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal";
        },
        _normValueFromMouse: function(t) {
            var e;
            return (t = 1 < (t = (t = "horizontal" === this.orientation ? (e = this.elementSize.width, 
            t.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (e = this.elementSize.height, 
            t.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0))) / e) ? 1 : t) < 0 && (t = 0), 
            "vertical" === this.orientation && (t = 1 - t), e = this._valueMax() - this._valueMin(), 
            e = this._valueMin() + t * e, this._trimAlignValue(e);
        },
        _uiHash: function(t, e, i) {
            var s = {
                handle: this.handles[t],
                handleIndex: t,
                value: void 0 !== e ? e : this.value()
            };
            return this._hasMultipleValues() && (s.value = void 0 !== e ? e : this.values(t), 
            s.values = i || this.values()), s;
        },
        _hasMultipleValues: function() {
            return this.options.values && this.options.values.length;
        },
        _start: function(t, e) {
            return this._trigger("start", t, this._uiHash(e));
        },
        _slide: function(t, e, i) {
            var s, n = this.value(), o = this.values();
            this._hasMultipleValues() && (s = this.values(e ? 0 : 1), n = this.values(e), 
            2 === this.options.values.length && !0 === this.options.range && (i = 0 === e ? Math.min(s, i) : Math.max(s, i)), 
            o[e] = i), i !== n && !1 !== this._trigger("slide", t, this._uiHash(e, i, o)) && (this._hasMultipleValues() ? this.values(e, i) : this.value(i));
        },
        _stop: function(t, e) {
            this._trigger("stop", t, this._uiHash(e));
        },
        _change: function(t, e) {
            this._keySliding || this._mouseSliding || (this._lastChangedValue = e, 
            this._trigger("change", t, this._uiHash(e)));
        },
        value: function(t) {
            return arguments.length ? (this.options.value = this._trimAlignValue(t), 
            this._refreshValue(), void this._change(null, 0)) : this._value();
        },
        values: function(t, e) {
            var i, s, n;
            if (1 < arguments.length) return this.options.values[t] = this._trimAlignValue(e), 
            this._refreshValue(), void this._change(null, t);
            if (!arguments.length) return this._values();
            if (!Array.isArray(t)) return this._hasMultipleValues() ? this._values(t) : this.value();
            for (i = this.options.values, s = t, n = 0; n < i.length; n += 1) i[n] = this._trimAlignValue(s[n]), 
            this._change(null, n);
            this._refreshValue();
        },
        _setOption: function(t, e) {
            var i, s = 0;
            switch ("range" === t && !0 === this.options.range && ("min" === e ? (this.options.value = this._values(0), 
            this.options.values = null) : "max" === e && (this.options.value = this._values(this.options.values.length - 1), 
            this.options.values = null)), Array.isArray(this.options.values) && (s = this.options.values.length), 
            this._super(t, e), t) {
              case "orientation":
                this._detectOrientation(), this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation), 
                this._refreshValue(), this.options.range && this._refreshRange(e), 
                this.handles.css("horizontal" === e ? "bottom" : "left", "");
                break;

              case "value":
                this._animateOff = !0, this._refreshValue(), this._change(null, 0), 
                this._animateOff = !1;
                break;

              case "values":
                for (this._animateOff = !0, this._refreshValue(), i = s - 1; 0 <= i; i--) this._change(null, i);
                this._animateOff = !1;
                break;

              case "step":
              case "min":
              case "max":
                this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), 
                this._animateOff = !1;
                break;

              case "range":
                this._animateOff = !0, this._refresh(), this._animateOff = !1;
            }
        },
        _setOptionDisabled: function(t) {
            this._super(t), this._toggleClass(null, "ui-state-disabled", !!t);
        },
        _value: function() {
            var t = this.options.value;
            return this._trimAlignValue(t);
        },
        _values: function(t) {
            var e, i;
            if (arguments.length) return t = this.options.values[t], this._trimAlignValue(t);
            if (this._hasMultipleValues()) {
                for (e = this.options.values.slice(), i = 0; i < e.length; i += 1) e[i] = this._trimAlignValue(e[i]);
                return e;
            }
            return [];
        },
        _trimAlignValue: function(t) {
            if (t <= this._valueMin()) return this._valueMin();
            if (t >= this._valueMax()) return this._valueMax();
            var e = 0 < this.options.step ? this.options.step : 1, i = (t - this._valueMin()) % e, t = t - i;
            return 2 * Math.abs(i) >= e && (t += 0 < i ? e : -e), parseFloat(t.toFixed(5));
        },
        _calculateNewMax: function() {
            var t = this.options.max, e = this._valueMin(), i = this.options.step;
            (t = Math.round((t - e) / i) * i + e) > this.options.max && (t -= i), 
            this.max = parseFloat(t.toFixed(this._precision()));
        },
        _precision: function() {
            var t = this._precisionOf(this.options.step);
            return null !== this.options.min ? Math.max(t, this._precisionOf(this.options.min)) : t;
        },
        _precisionOf: function(t) {
            var e = t.toString();
            return -1 === (t = e.indexOf(".")) ? 0 : e.length - t - 1;
        },
        _valueMin: function() {
            return this.options.min;
        },
        _valueMax: function() {
            return this.max;
        },
        _refreshRange: function(t) {
            "vertical" === t && this.range.css({
                width: "",
                left: ""
            }), "horizontal" === t && this.range.css({
                height: "",
                bottom: ""
            });
        },
        _refreshValue: function() {
            var e, i, t, s, n, o = this.options.range, a = this.options, r = this, l = !this._animateOff && a.animate, h = {};
            this._hasMultipleValues() ? this.handles.each(function(t) {
                i = (r.values(t) - r._valueMin()) / (r._valueMax() - r._valueMin()) * 100, 
                h["horizontal" === r.orientation ? "left" : "bottom"] = i + "%", 
                V(this).stop(1, 1)[l ? "animate" : "css"](h, a.animate), !0 === r.options.range && ("horizontal" === r.orientation ? (0 === t && r.range.stop(1, 1)[l ? "animate" : "css"]({
                    left: i + "%"
                }, a.animate), 1 === t && r.range[l ? "animate" : "css"]({
                    width: i - e + "%"
                }, {
                    queue: !1,
                    duration: a.animate
                })) : (0 === t && r.range.stop(1, 1)[l ? "animate" : "css"]({
                    bottom: i + "%"
                }, a.animate), 1 === t && r.range[l ? "animate" : "css"]({
                    height: i - e + "%"
                }, {
                    queue: !1,
                    duration: a.animate
                }))), e = i;
            }) : (t = this.value(), s = this._valueMin(), n = this._valueMax(), 
            i = n !== s ? (t - s) / (n - s) * 100 : 0, h["horizontal" === this.orientation ? "left" : "bottom"] = i + "%", 
            this.handle.stop(1, 1)[l ? "animate" : "css"](h, a.animate), "min" === o && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
                width: i + "%"
            }, a.animate), "max" === o && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
                width: 100 - i + "%"
            }, a.animate), "min" === o && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
                height: i + "%"
            }, a.animate), "max" === o && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
                height: 100 - i + "%"
            }, a.animate));
        },
        _handleEvents: {
            keydown: function(t) {
                var e, i, s, n = V(t.target).data("ui-slider-handle-index");
                switch (t.keyCode) {
                  case V.ui.keyCode.HOME:
                  case V.ui.keyCode.END:
                  case V.ui.keyCode.PAGE_UP:
                  case V.ui.keyCode.PAGE_DOWN:
                  case V.ui.keyCode.UP:
                  case V.ui.keyCode.RIGHT:
                  case V.ui.keyCode.DOWN:
                  case V.ui.keyCode.LEFT:
                    if (t.preventDefault(), !this._keySliding && (this._keySliding = !0, 
                    this._addClass(V(t.target), null, "ui-state-active"), !1 === this._start(t, n))) return;
                }
                switch (s = this.options.step, e = i = this._hasMultipleValues() ? this.values(n) : this.value(), 
                t.keyCode) {
                  case V.ui.keyCode.HOME:
                    i = this._valueMin();
                    break;

                  case V.ui.keyCode.END:
                    i = this._valueMax();
                    break;

                  case V.ui.keyCode.PAGE_UP:
                    i = this._trimAlignValue(e + (this._valueMax() - this._valueMin()) / this.numPages);
                    break;

                  case V.ui.keyCode.PAGE_DOWN:
                    i = this._trimAlignValue(e - (this._valueMax() - this._valueMin()) / this.numPages);
                    break;

                  case V.ui.keyCode.UP:
                  case V.ui.keyCode.RIGHT:
                    if (e === this._valueMax()) return;
                    i = this._trimAlignValue(e + s);
                    break;

                  case V.ui.keyCode.DOWN:
                  case V.ui.keyCode.LEFT:
                    if (e === this._valueMin()) return;
                    i = this._trimAlignValue(e - s);
                }
                this._slide(t, n, i);
            },
            keyup: function(t) {
                var e = V(t.target).data("ui-slider-handle-index");
                this._keySliding && (this._keySliding = !1, this._stop(t, e), this._change(t, e), 
                this._removeClass(V(t.target), null, "ui-state-active"));
            }
        }
    }), V.widget("ui.sortable", V.ui.mouse, {
        version: "1.13.1",
        widgetEventPrefix: "sort",
        ready: !1,
        options: {
            appendTo: "parent",
            axis: !1,
            connectWith: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            dropOnEmpty: !0,
            forcePlaceholderSize: !1,
            forceHelperSize: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            items: "> *",
            opacity: !1,
            placeholder: !1,
            revert: !1,
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1e3,
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _isOverAxis: function(t, e, i) {
            return e <= t && t < e + i;
        },
        _isFloating: function(t) {
            return /left|right/.test(t.css("float")) || /inline|table-cell/.test(t.css("display"));
        },
        _create: function() {
            this.containerCache = {}, this._addClass("ui-sortable"), this.refresh(), 
            this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), 
            this.ready = !0;
        },
        _setOption: function(t, e) {
            this._super(t, e), "handle" === t && this._setHandleClassName();
        },
        _setHandleClassName: function() {
            var t = this;
            this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle"), 
            V.each(this.items, function() {
                t._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle");
            });
        },
        _destroy: function() {
            this._mouseDestroy();
            for (var t = this.items.length - 1; 0 <= t; t--) this.items[t].item.removeData(this.widgetName + "-item");
            return this;
        },
        _mouseCapture: function(t, e) {
            var i = null, s = !1, n = this;
            return !(this.reverting || this.options.disabled || "static" === this.options.type || (this._refreshItems(t), 
            V(t.target).parents().each(function() {
                if (V.data(this, n.widgetName + "-item") === n) return i = V(this), 
                !1;
            }), !(i = V.data(t.target, n.widgetName + "-item") === n ? V(t.target) : i) || this.options.handle && !e && (V(this.options.handle, i).find("*").addBack().each(function() {
                this === t.target && (s = !0);
            }), !s) || (this.currentItem = i, this._removeCurrentsFromItems(), 0)));
        },
        _mouseStart: function(t, e, i) {
            var s, n, o = this.options;
            if ((this.currentContainer = this).refreshPositions(), this.appendTo = V("parent" !== o.appendTo ? o.appendTo : this.currentItem.parent()), 
            this.helper = this._createHelper(t), this._cacheHelperProportions(), 
            this._cacheMargins(), this.offset = this.currentItem.offset(), this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            }, V.extend(this.offset, {
                click: {
                    left: t.pageX - this.offset.left,
                    top: t.pageY - this.offset.top
                },
                relative: this._getRelativeOffset()
            }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), 
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt), this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), 
            this._createPlaceholder(), this.scrollParent = this.placeholder.scrollParent(), 
            V.extend(this.offset, {
                parent: this._getParentOffset()
            }), o.containment && this._setContainment(), o.cursor && "auto" !== o.cursor && (n = this.document.find("body"), 
            this.storedCursor = n.css("cursor"), n.css("cursor", o.cursor), this.storedStylesheet = V("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(n)), 
            o.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), 
            this.helper.css("zIndex", o.zIndex)), o.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), 
            this.helper.css("opacity", o.opacity)), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), 
            this._trigger("start", t, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), 
            !i) for (s = this.containers.length - 1; 0 <= s; s--) this.containers[s]._trigger("activate", t, this._uiHash(this));
            return V.ui.ddmanager && (V.ui.ddmanager.current = this), V.ui.ddmanager && !o.dropBehaviour && V.ui.ddmanager.prepareOffsets(this, t), 
            this.dragging = !0, this._addClass(this.helper, "ui-sortable-helper"), 
            this.helper.parent().is(this.appendTo) || (this.helper.detach().appendTo(this.appendTo), 
            this.offset.parent = this._getParentOffset()), this.position = this.originalPosition = this._generatePosition(t), 
            this.originalPageX = t.pageX, this.originalPageY = t.pageY, this.lastPositionAbs = this.positionAbs = this._convertPositionTo("absolute"), 
            this._mouseDrag(t), !0;
        },
        _scroll: function(t) {
            var e = this.options, i = !1;
            return this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - t.pageY < e.scrollSensitivity ? this.scrollParent[0].scrollTop = i = this.scrollParent[0].scrollTop + e.scrollSpeed : t.pageY - this.overflowOffset.top < e.scrollSensitivity && (this.scrollParent[0].scrollTop = i = this.scrollParent[0].scrollTop - e.scrollSpeed), 
            this.overflowOffset.left + this.scrollParent[0].offsetWidth - t.pageX < e.scrollSensitivity ? this.scrollParent[0].scrollLeft = i = this.scrollParent[0].scrollLeft + e.scrollSpeed : t.pageX - this.overflowOffset.left < e.scrollSensitivity && (this.scrollParent[0].scrollLeft = i = this.scrollParent[0].scrollLeft - e.scrollSpeed)) : (t.pageY - this.document.scrollTop() < e.scrollSensitivity ? i = this.document.scrollTop(this.document.scrollTop() - e.scrollSpeed) : this.window.height() - (t.pageY - this.document.scrollTop()) < e.scrollSensitivity && (i = this.document.scrollTop(this.document.scrollTop() + e.scrollSpeed)), 
            t.pageX - this.document.scrollLeft() < e.scrollSensitivity ? i = this.document.scrollLeft(this.document.scrollLeft() - e.scrollSpeed) : this.window.width() - (t.pageX - this.document.scrollLeft()) < e.scrollSensitivity && (i = this.document.scrollLeft(this.document.scrollLeft() + e.scrollSpeed))), 
            i;
        },
        _mouseDrag: function(t) {
            var e, i, s, n, o = this.options;
            for (this.position = this._generatePosition(t), this.positionAbs = this._convertPositionTo("absolute"), 
            this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), 
            this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), 
            o.scroll && !1 !== this._scroll(t) && (this._refreshItemPositions(!0), 
            V.ui.ddmanager && !o.dropBehaviour && V.ui.ddmanager.prepareOffsets(this, t)), 
            this.dragDirection = {
                vertical: this._getDragVerticalDirection(),
                horizontal: this._getDragHorizontalDirection()
            }, e = this.items.length - 1; 0 <= e; e--) if (s = (i = this.items[e]).item[0], 
            (n = this._intersectsWithPointer(i)) && i.instance === this.currentContainer && !(s === this.currentItem[0] || this.placeholder[1 === n ? "next" : "prev"]()[0] === s || V.contains(this.placeholder[0], s) || "semi-dynamic" === this.options.type && V.contains(this.element[0], s))) {
                if (this.direction = 1 === n ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(i)) break;
                this._rearrange(t, i), this._trigger("change", t, this._uiHash());
                break;
            }
            return this._contactContainers(t), V.ui.ddmanager && V.ui.ddmanager.drag(this, t), 
            this._trigger("sort", t, this._uiHash()), this.lastPositionAbs = this.positionAbs, 
            !1;
        },
        _mouseStop: function(t, e) {
            var i, s, n, o;
            if (t) return V.ui.ddmanager && !this.options.dropBehaviour && V.ui.ddmanager.drop(this, t), 
            this.options.revert ? (s = (i = this).placeholder.offset(), o = {}, 
            (n = this.options.axis) && "x" !== n || (o.left = s.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), 
            n && "y" !== n || (o.top = s.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), 
            this.reverting = !0, V(this.helper).animate(o, parseInt(this.options.revert, 10) || 500, function() {
                i._clear(t);
            })) : this._clear(t, e), !1;
        },
        cancel: function() {
            if (this.dragging) {
                this._mouseUp(new V.Event("mouseup", {
                    target: null
                })), "original" === this.options.helper ? (this.currentItem.css(this._storedCSS), 
                this._removeClass(this.currentItem, "ui-sortable-helper")) : this.currentItem.show();
                for (var t = this.containers.length - 1; 0 <= t; t--) this.containers[t]._trigger("deactivate", null, this._uiHash(this)), 
                this.containers[t].containerCache.over && (this.containers[t]._trigger("out", null, this._uiHash(this)), 
                this.containers[t].containerCache.over = 0);
            }
            return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), 
            "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), 
            V.extend(this, {
                helper: null,
                dragging: !1,
                reverting: !1,
                _noFinalSort: null
            }), this.domPosition.prev ? V(this.domPosition.prev).after(this.currentItem) : V(this.domPosition.parent).prepend(this.currentItem)), 
            this;
        },
        serialize: function(e) {
            var t = this._getItemsAsjQuery(e && e.connected), i = [];
            return e = e || {}, V(t).each(function() {
                var t = (V(e.item || this).attr(e.attribute || "id") || "").match(e.expression || /(.+)[\-=_](.+)/);
                t && i.push((e.key || t[1] + "[]") + "=" + (e.key && e.expression ? t[1] : t[2]));
            }), !i.length && e.key && i.push(e.key + "="), i.join("&");
        },
        toArray: function(t) {
            var e = this._getItemsAsjQuery(t && t.connected), i = [];
            return t = t || {}, e.each(function() {
                i.push(V(t.item || this).attr(t.attribute || "id") || "");
            }), i;
        },
        _intersectsWith: function(t) {
            var e = this.positionAbs.left, i = e + this.helperProportions.width, s = this.positionAbs.top, n = s + this.helperProportions.height, o = t.left, a = o + t.width, r = t.top, l = r + t.height, h = this.offset.click.top, c = this.offset.click.left, h = "x" === this.options.axis || r < s + h && s + h < l, c = "y" === this.options.axis || o < e + c && e + c < a;
            return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > t[this.floating ? "width" : "height"] ? h && c : o < e + this.helperProportions.width / 2 && i - this.helperProportions.width / 2 < a && r < s + this.helperProportions.height / 2 && n - this.helperProportions.height / 2 < l;
        },
        _intersectsWithPointer: function(t) {
            var e = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top, t.height), t = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left, t.width);
            return !(!e || !t) && (e = this.dragDirection.vertical, t = this.dragDirection.horizontal, 
            this.floating ? "right" === t || "down" === e ? 2 : 1 : e && ("down" === e ? 2 : 1));
        },
        _intersectsWithSides: function(t) {
            var e = this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top + t.height / 2, t.height), i = this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left + t.width / 2, t.width), s = this.dragDirection.vertical, t = this.dragDirection.horizontal;
            return this.floating && t ? "right" === t && i || "left" === t && !i : s && ("down" === s && e || "up" === s && !e);
        },
        _getDragVerticalDirection: function() {
            var t = this.positionAbs.top - this.lastPositionAbs.top;
            return 0 != t && (0 < t ? "down" : "up");
        },
        _getDragHorizontalDirection: function() {
            var t = this.positionAbs.left - this.lastPositionAbs.left;
            return 0 != t && (0 < t ? "right" : "left");
        },
        refresh: function(t) {
            return this._refreshItems(t), this._setHandleClassName(), this.refreshPositions(), 
            this;
        },
        _connectWith: function() {
            var t = this.options;
            return t.connectWith.constructor === String ? [ t.connectWith ] : t.connectWith;
        },
        _getItemsAsjQuery: function(t) {
            var e, i, s, n, o = [], a = [], r = this._connectWith();
            if (r && t) for (e = r.length - 1; 0 <= e; e--) for (i = (s = V(r[e], this.document[0])).length - 1; 0 <= i; i--) (n = V.data(s[i], this.widgetFullName)) && n !== this && !n.options.disabled && a.push([ "function" == typeof n.options.items ? n.options.items.call(n.element) : V(n.options.items, n.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), n ]);
            function l() {
                o.push(this);
            }
            for (a.push([ "function" == typeof this.options.items ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : V(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this ]), 
            e = a.length - 1; 0 <= e; e--) a[e][0].each(l);
            return V(o);
        },
        _removeCurrentsFromItems: function() {
            var i = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = V.grep(this.items, function(t) {
                for (var e = 0; e < i.length; e++) if (i[e] === t.item[0]) return !1;
                return !0;
            });
        },
        _refreshItems: function(t) {
            this.items = [], this.containers = [ this ];
            var e, i, s, n, o, a, r, l, h = this.items, c = [ [ "function" == typeof this.options.items ? this.options.items.call(this.element[0], t, {
                item: this.currentItem
            }) : V(this.options.items, this.element), this ] ], u = this._connectWith();
            if (u && this.ready) for (e = u.length - 1; 0 <= e; e--) for (i = (s = V(u[e], this.document[0])).length - 1; 0 <= i; i--) (n = V.data(s[i], this.widgetFullName)) && n !== this && !n.options.disabled && (c.push([ "function" == typeof n.options.items ? n.options.items.call(n.element[0], t, {
                item: this.currentItem
            }) : V(n.options.items, n.element), n ]), this.containers.push(n));
            for (e = c.length - 1; 0 <= e; e--) for (o = c[e][1], l = (a = c[e][i = 0]).length; i < l; i++) (r = V(a[i])).data(this.widgetName + "-item", o), 
            h.push({
                item: r,
                instance: o,
                width: 0,
                height: 0,
                left: 0,
                top: 0
            });
        },
        _refreshItemPositions: function(t) {
            for (var e, i, s = this.items.length - 1; 0 <= s; s--) e = this.items[s], 
            this.currentContainer && e.instance !== this.currentContainer && e.item[0] !== this.currentItem[0] || (i = this.options.toleranceElement ? V(this.options.toleranceElement, e.item) : e.item, 
            t || (e.width = i.outerWidth(), e.height = i.outerHeight()), i = i.offset(), 
            e.left = i.left, e.top = i.top);
        },
        refreshPositions: function(t) {
            var e, i;
            if (this.floating = !!this.items.length && ("x" === this.options.axis || this._isFloating(this.items[0].item)), 
            this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset()), 
            this._refreshItemPositions(t), this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this); else for (e = this.containers.length - 1; 0 <= e; e--) i = this.containers[e].element.offset(), 
            this.containers[e].containerCache.left = i.left, this.containers[e].containerCache.top = i.top, 
            this.containers[e].containerCache.width = this.containers[e].element.outerWidth(), 
            this.containers[e].containerCache.height = this.containers[e].element.outerHeight();
            return this;
        },
        _createPlaceholder: function(i) {
            var s, n, o = (i = i || this).options;
            o.placeholder && o.placeholder.constructor !== String || (s = o.placeholder, 
            n = i.currentItem[0].nodeName.toLowerCase(), o.placeholder = {
                element: function() {
                    var t = V("<" + n + ">", i.document[0]);
                    return i._addClass(t, "ui-sortable-placeholder", s || i.currentItem[0].className)._removeClass(t, "ui-sortable-helper"), 
                    "tbody" === n ? i._createTrPlaceholder(i.currentItem.find("tr").eq(0), V("<tr>", i.document[0]).appendTo(t)) : "tr" === n ? i._createTrPlaceholder(i.currentItem, t) : "img" === n && t.attr("src", i.currentItem.attr("src")), 
                    s || t.css("visibility", "hidden"), t;
                },
                update: function(t, e) {
                    s && !o.forcePlaceholderSize || (e.height() && (!o.forcePlaceholderSize || "tbody" !== n && "tr" !== n) || e.height(i.currentItem.innerHeight() - parseInt(i.currentItem.css("paddingTop") || 0, 10) - parseInt(i.currentItem.css("paddingBottom") || 0, 10)), 
                    e.width() || e.width(i.currentItem.innerWidth() - parseInt(i.currentItem.css("paddingLeft") || 0, 10) - parseInt(i.currentItem.css("paddingRight") || 0, 10)));
                }
            }), i.placeholder = V(o.placeholder.element.call(i.element, i.currentItem)), 
            i.currentItem.after(i.placeholder), o.placeholder.update(i, i.placeholder);
        },
        _createTrPlaceholder: function(t, e) {
            var i = this;
            t.children().each(function() {
                V("<td>&#160;</td>", i.document[0]).attr("colspan", V(this).attr("colspan") || 1).appendTo(e);
            });
        },
        _contactContainers: function(t) {
            for (var e, i, s, n, o, a, r, l, h, c = null, u = null, d = this.containers.length - 1; 0 <= d; d--) V.contains(this.currentItem[0], this.containers[d].element[0]) || (this._intersectsWith(this.containers[d].containerCache) ? c && V.contains(this.containers[d].element[0], c.element[0]) || (c = this.containers[d], 
            u = d) : this.containers[d].containerCache.over && (this.containers[d]._trigger("out", t, this._uiHash(this)), 
            this.containers[d].containerCache.over = 0));
            if (c) if (1 === this.containers.length) this.containers[u].containerCache.over || (this.containers[u]._trigger("over", t, this._uiHash(this)), 
            this.containers[u].containerCache.over = 1); else {
                for (i = 1e4, s = null, n = (l = c.floating || this._isFloating(this.currentItem)) ? "left" : "top", 
                o = l ? "width" : "height", h = l ? "pageX" : "pageY", e = this.items.length - 1; 0 <= e; e--) V.contains(this.containers[u].element[0], this.items[e].item[0]) && this.items[e].item[0] !== this.currentItem[0] && (a = this.items[e].item.offset()[n], 
                r = !1, t[h] - a > this.items[e][o] / 2 && (r = !0), Math.abs(t[h] - a) < i && (i = Math.abs(t[h] - a), 
                s = this.items[e], this.direction = r ? "up" : "down"));
                (s || this.options.dropOnEmpty) && (this.currentContainer !== this.containers[u] ? (s ? this._rearrange(t, s, null, !0) : this._rearrange(t, null, this.containers[u].element, !0), 
                this._trigger("change", t, this._uiHash()), this.containers[u]._trigger("change", t, this._uiHash(this)), 
                this.currentContainer = this.containers[u], this.options.placeholder.update(this.currentContainer, this.placeholder), 
                this.scrollParent = this.placeholder.scrollParent(), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), 
                this.containers[u]._trigger("over", t, this._uiHash(this)), this.containers[u].containerCache.over = 1) : this.currentContainer.containerCache.over || (this.containers[u]._trigger("over", t, this._uiHash()), 
                this.currentContainer.containerCache.over = 1));
            }
        },
        _createHelper: function(t) {
            var e = this.options;
            return (t = "function" == typeof e.helper ? V(e.helper.apply(this.element[0], [ t, this.currentItem ])) : "clone" === e.helper ? this.currentItem.clone() : this.currentItem).parents("body").length || this.appendTo[0].appendChild(t[0]), 
            t[0] === this.currentItem[0] && (this._storedCSS = {
                width: this.currentItem[0].style.width,
                height: this.currentItem[0].style.height,
                position: this.currentItem.css("position"),
                top: this.currentItem.css("top"),
                left: this.currentItem.css("left")
            }), t[0].style.width && !e.forceHelperSize || t.width(this.currentItem.width()), 
            t[0].style.height && !e.forceHelperSize || t.height(this.currentItem.height()), 
            t;
        },
        _adjustOffsetFromHelper: function(t) {
            "string" == typeof t && (t = t.split(" ")), "left" in (t = Array.isArray(t) ? {
                left: +t[0],
                top: +t[1] || 0
            } : t) && (this.offset.click.left = t.left + this.margins.left), "right" in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), 
            "top" in t && (this.offset.click.top = t.top + this.margins.top), "bottom" in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top);
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var t = this.offsetParent.offset();
            return "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && V.contains(this.scrollParent[0], this.offsetParent[0]) && (t.left += this.scrollParent.scrollLeft(), 
            t.top += this.scrollParent.scrollTop()), {
                top: (t = this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && V.ui.ie ? {
                    top: 0,
                    left: 0
                } : t).top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: t.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" !== this.cssPosition) return {
                top: 0,
                left: 0
            };
            var t = this.currentItem.position();
            return {
                top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var t, e, i = this.options;
            "parent" === i.containment && (i.containment = this.helper[0].parentNode), 
            "document" !== i.containment && "window" !== i.containment || (this.containment = [ 0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === i.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === i.containment ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]), 
            /^(document|window|parent)$/.test(i.containment) || (t = V(i.containment)[0], 
            e = V(i.containment).offset(), i = "hidden" !== V(t).css("overflow"), 
            this.containment = [ e.left + (parseInt(V(t).css("borderLeftWidth"), 10) || 0) + (parseInt(V(t).css("paddingLeft"), 10) || 0) - this.margins.left, e.top + (parseInt(V(t).css("borderTopWidth"), 10) || 0) + (parseInt(V(t).css("paddingTop"), 10) || 0) - this.margins.top, e.left + (i ? Math.max(t.scrollWidth, t.offsetWidth) : t.offsetWidth) - (parseInt(V(t).css("borderLeftWidth"), 10) || 0) - (parseInt(V(t).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, e.top + (i ? Math.max(t.scrollHeight, t.offsetHeight) : t.offsetHeight) - (parseInt(V(t).css("borderTopWidth"), 10) || 0) - (parseInt(V(t).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top ]);
        },
        _convertPositionTo: function(t, e) {
            e = e || this.position;
            var i = "absolute" === t ? 1 : -1, s = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && V.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, t = /(html|body)/i.test(s[0].tagName);
            return {
                top: e.top + this.offset.relative.top * i + this.offset.parent.top * i - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : t ? 0 : s.scrollTop()) * i,
                left: e.left + this.offset.relative.left * i + this.offset.parent.left * i - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : t ? 0 : s.scrollLeft()) * i
            };
        },
        _generatePosition: function(t) {
            var e = this.options, i = t.pageX, s = t.pageY, n = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && V.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, o = /(html|body)/i.test(n[0].tagName);
            return "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), 
            this.originalPosition && (this.containment && (t.pageX - this.offset.click.left < this.containment[0] && (i = this.containment[0] + this.offset.click.left), 
            t.pageY - this.offset.click.top < this.containment[1] && (s = this.containment[1] + this.offset.click.top), 
            t.pageX - this.offset.click.left > this.containment[2] && (i = this.containment[2] + this.offset.click.left), 
            t.pageY - this.offset.click.top > this.containment[3] && (s = this.containment[3] + this.offset.click.top)), 
            e.grid && (t = this.originalPageY + Math.round((s - this.originalPageY) / e.grid[1]) * e.grid[1], 
            s = !this.containment || t - this.offset.click.top >= this.containment[1] && t - this.offset.click.top <= this.containment[3] ? t : t - this.offset.click.top >= this.containment[1] ? t - e.grid[1] : t + e.grid[1], 
            t = this.originalPageX + Math.round((i - this.originalPageX) / e.grid[0]) * e.grid[0], 
            i = !this.containment || t - this.offset.click.left >= this.containment[0] && t - this.offset.click.left <= this.containment[2] ? t : t - this.offset.click.left >= this.containment[0] ? t - e.grid[0] : t + e.grid[0])), 
            {
                top: s - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : o ? 0 : n.scrollTop()),
                left: i - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : o ? 0 : n.scrollLeft())
            };
        },
        _rearrange: function(t, e, i, s) {
            i ? i[0].appendChild(this.placeholder[0]) : e.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? e.item[0] : e.item[0].nextSibling), 
            this.counter = this.counter ? ++this.counter : 1;
            var n = this.counter;
            this._delay(function() {
                n === this.counter && this.refreshPositions(!s);
            });
        },
        _clear: function(t, e) {
            this.reverting = !1;
            var i, s = [];
            if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), 
            this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) "auto" !== this._storedCSS[i] && "static" !== this._storedCSS[i] || (this._storedCSS[i] = "");
                this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper");
            } else this.currentItem.show();
            function n(e, i, s) {
                return function(t) {
                    s._trigger(e, t, i._uiHash(i));
                };
            }
            for (this.fromOutside && !e && s.push(function(t) {
                this._trigger("receive", t, this._uiHash(this.fromOutside));
            }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || e || s.push(function(t) {
                this._trigger("update", t, this._uiHash());
            }), this === this.currentContainer || e || (s.push(function(t) {
                this._trigger("remove", t, this._uiHash());
            }), s.push(function(e) {
                return function(t) {
                    e._trigger("receive", t, this._uiHash(this));
                };
            }.call(this, this.currentContainer)), s.push(function(e) {
                return function(t) {
                    e._trigger("update", t, this._uiHash(this));
                };
            }.call(this, this.currentContainer))), i = this.containers.length - 1; 0 <= i; i--) e || s.push(n("deactivate", this, this.containers[i])), 
            this.containers[i].containerCache.over && (s.push(n("out", this, this.containers[i])), 
            this.containers[i].containerCache.over = 0);
            if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), 
            this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), 
            this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), 
            this.dragging = !1, e || this._trigger("beforeStop", t, this._uiHash()), 
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), 
            this.helper = null), !e) {
                for (i = 0; i < s.length; i++) s[i].call(this, t);
                this._trigger("stop", t, this._uiHash());
            }
            return this.fromOutside = !1, !this.cancelHelperRemoval;
        },
        _trigger: function() {
            !1 === V.Widget.prototype._trigger.apply(this, arguments) && this.cancel();
        },
        _uiHash: function(t) {
            var e = t || this;
            return {
                helper: e.helper,
                placeholder: e.placeholder || V([]),
                position: e.position,
                originalPosition: e.originalPosition,
                offset: e.positionAbs,
                item: e.currentItem,
                sender: t ? t.element : null
            };
        }
    }), V.widget("ui.spinner", {
        version: "1.13.1",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            classes: {
                "ui-spinner": "ui-corner-all",
                "ui-spinner-down": "ui-corner-br",
                "ui-spinner-up": "ui-corner-tr"
            },
            culture: null,
            icons: {
                down: "ui-icon-triangle-1-s",
                up: "ui-icon-triangle-1-n"
            },
            incremental: !0,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function() {
            this._setOption("max", this.options.max), this._setOption("min", this.options.min), 
            this._setOption("step", this.options.step), "" !== this.value() && this._value(this.element.val(), !0), 
            this._draw(), this._on(this._events), this._refresh(), this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _getCreateOptions: function() {
            var s = this._super(), n = this.element;
            return V.each([ "min", "max", "step" ], function(t, e) {
                var i = n.attr(e);
                null != i && i.length && (s[e] = i);
            }), s;
        },
        _events: {
            keydown: function(t) {
                this._start(t) && this._keydown(t) && t.preventDefault();
            },
            keyup: "_stop",
            focus: function() {
                this.previous = this.element.val();
            },
            blur: function(t) {
                this.cancelBlur ? delete this.cancelBlur : (this._stop(), this._refresh(), 
                this.previous !== this.element.val() && this._trigger("change", t));
            },
            mousewheel: function(t, e) {
                var i = V.ui.safeActiveElement(this.document[0]);
                if (this.element[0] === i && e) {
                    if (!this.spinning && !this._start(t)) return !1;
                    this._spin((0 < e ? 1 : -1) * this.options.step, t), clearTimeout(this.mousewheelTimer), 
                    this.mousewheelTimer = this._delay(function() {
                        this.spinning && this._stop(t);
                    }, 100), t.preventDefault();
                }
            },
            "mousedown .ui-spinner-button": function(t) {
                var e;
                function i() {
                    this.element[0] !== V.ui.safeActiveElement(this.document[0]) && (this.element.trigger("focus"), 
                    this.previous = e, this._delay(function() {
                        this.previous = e;
                    }));
                }
                e = this.element[0] === V.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val(), 
                t.preventDefault(), i.call(this), this.cancelBlur = !0, this._delay(function() {
                    delete this.cancelBlur, i.call(this);
                }), !1 !== this._start(t) && this._repeat(null, V(t.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, t);
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function(t) {
                if (V(t.currentTarget).hasClass("ui-state-active")) return !1 !== this._start(t) && void this._repeat(null, V(t.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, t);
            },
            "mouseleave .ui-spinner-button": "_stop"
        },
        _enhance: function() {
            this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append("<a></a><a></a>");
        },
        _draw: function() {
            this._enhance(), this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content"), 
            this._addClass("ui-spinner-input"), this.element.attr("role", "spinbutton"), 
            this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", !0).button({
                classes: {
                    "ui-button": ""
                }
            }), this._removeClass(this.buttons, "ui-corner-all"), this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up"), 
            this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down"), 
            this.buttons.first().button({
                icon: this.options.icons.up,
                showLabel: !1
            }), this.buttons.last().button({
                icon: this.options.icons.down,
                showLabel: !1
            }), this.buttons.height() > Math.ceil(.5 * this.uiSpinner.height()) && 0 < this.uiSpinner.height() && this.uiSpinner.height(this.uiSpinner.height());
        },
        _keydown: function(t) {
            var e = this.options, i = V.ui.keyCode;
            switch (t.keyCode) {
              case i.UP:
                return this._repeat(null, 1, t), !0;

              case i.DOWN:
                return this._repeat(null, -1, t), !0;

              case i.PAGE_UP:
                return this._repeat(null, e.page, t), !0;

              case i.PAGE_DOWN:
                return this._repeat(null, -e.page, t), !0;
            }
            return !1;
        },
        _start: function(t) {
            return !(!this.spinning && !1 === this._trigger("start", t)) && (this.counter || (this.counter = 1), 
            this.spinning = !0);
        },
        _repeat: function(t, e, i) {
            t = t || 500, clearTimeout(this.timer), this.timer = this._delay(function() {
                this._repeat(40, e, i);
            }, t), this._spin(e * this.options.step, i);
        },
        _spin: function(t, e) {
            var i = this.value() || 0;
            this.counter || (this.counter = 1), i = this._adjustValue(i + t * this._increment(this.counter)), 
            this.spinning && !1 === this._trigger("spin", e, {
                value: i
            }) || (this._value(i), this.counter++);
        },
        _increment: function(t) {
            var e = this.options.incremental;
            return e ? "function" == typeof e ? e(t) : Math.floor(t * t * t / 5e4 - t * t / 500 + 17 * t / 200 + 1) : 1;
        },
        _precision: function() {
            var t = this._precisionOf(this.options.step);
            return null !== this.options.min ? Math.max(t, this._precisionOf(this.options.min)) : t;
        },
        _precisionOf: function(t) {
            var e = t.toString();
            return -1 === (t = e.indexOf(".")) ? 0 : e.length - t - 1;
        },
        _adjustValue: function(t) {
            var e = this.options, i = null !== e.min ? e.min : 0;
            return t = i + Math.round((t - i) / e.step) * e.step, t = parseFloat(t.toFixed(this._precision())), 
            null !== e.max && t > e.max ? e.max : null !== e.min && t < e.min ? e.min : t;
        },
        _stop: function(t) {
            this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), 
            this.counter = 0, this.spinning = !1, this._trigger("stop", t));
        },
        _setOption: function(t, e) {
            var i;
            if ("culture" === t || "numberFormat" === t) return i = this._parse(this.element.val()), 
            this.options[t] = e, void this.element.val(this._format(i));
            "max" !== t && "min" !== t && "step" !== t || "string" == typeof e && (e = this._parse(e)), 
            "icons" === t && (i = this.buttons.first().find(".ui-icon"), this._removeClass(i, null, this.options.icons.up), 
            this._addClass(i, null, e.up), i = this.buttons.last().find(".ui-icon"), 
            this._removeClass(i, null, this.options.icons.down), this._addClass(i, null, e.down)), 
            this._super(t, e);
        },
        _setOptionDisabled: function(t) {
            this._super(t), this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!t), 
            this.element.prop("disabled", !!t), this.buttons.button(t ? "disable" : "enable");
        },
        _setOptions: ht(function(t) {
            this._super(t);
        }),
        _parse: function(t) {
            return "" === (t = "string" == typeof t && "" !== t ? window.Globalize && this.options.numberFormat ? Globalize.parseFloat(t, 10, this.options.culture) : +t : t) || isNaN(t) ? null : t;
        },
        _format: function(t) {
            return "" === t ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(t, this.options.numberFormat, this.options.culture) : t;
        },
        _refresh: function() {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                "aria-valuenow": this._parse(this.element.val())
            });
        },
        isValid: function() {
            var t = this.value();
            return null !== t && t === this._adjustValue(t);
        },
        _value: function(t, e) {
            var i;
            "" !== t && null !== (i = this._parse(t)) && (e || (i = this._adjustValue(i)), 
            t = this._format(i)), this.element.val(t), this._refresh();
        },
        _destroy: function() {
            this.element.prop("disabled", !1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"), 
            this.uiSpinner.replaceWith(this.element);
        },
        stepUp: ht(function(t) {
            this._stepUp(t);
        }),
        _stepUp: function(t) {
            this._start() && (this._spin((t || 1) * this.options.step), this._stop());
        },
        stepDown: ht(function(t) {
            this._stepDown(t);
        }),
        _stepDown: function(t) {
            this._start() && (this._spin((t || 1) * -this.options.step), this._stop());
        },
        pageUp: ht(function(t) {
            this._stepUp((t || 1) * this.options.page);
        }),
        pageDown: ht(function(t) {
            this._stepDown((t || 1) * this.options.page);
        }),
        value: function(t) {
            if (!arguments.length) return this._parse(this.element.val());
            ht(this._value).call(this, t);
        },
        widget: function() {
            return this.uiSpinner;
        }
    }), !1 !== V.uiBackCompat && V.widget("ui.spinner", V.ui.spinner, {
        _enhance: function() {
            this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
        },
        _uiSpinnerHtml: function() {
            return "<span>";
        },
        _buttonHtml: function() {
            return "<a></a><a></a>";
        }
    }), V.ui.spinner, V.widget("ui.tabs", {
        version: "1.13.1",
        delay: 300,
        options: {
            active: null,
            classes: {
                "ui-tabs": "ui-corner-all",
                "ui-tabs-nav": "ui-corner-all",
                "ui-tabs-panel": "ui-corner-bottom",
                "ui-tabs-tab": "ui-corner-top"
            },
            collapsible: !1,
            event: "click",
            heightStyle: "content",
            hide: null,
            show: null,
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _isLocal: (ct = /#.*$/, function(t) {
            var e = t.href.replace(ct, ""), i = location.href.replace(ct, "");
            try {
                e = decodeURIComponent(e);
            } catch (t) {}
            try {
                i = decodeURIComponent(i);
            } catch (t) {}
            return 1 < t.hash.length && e === i;
        }),
        _create: function() {
            var e = this, t = this.options;
            this.running = !1, this._addClass("ui-tabs", "ui-widget ui-widget-content"), 
            this._toggleClass("ui-tabs-collapsible", null, t.collapsible), this._processTabs(), 
            t.active = this._initialActive(), Array.isArray(t.disabled) && (t.disabled = V.uniqueSort(t.disabled.concat(V.map(this.tabs.filter(".ui-state-disabled"), function(t) {
                return e.tabs.index(t);
            }))).sort()), !1 !== this.options.active && this.anchors.length ? this.active = this._findActive(t.active) : this.active = V(), 
            this._refresh(), this.active.length && this.load(t.active);
        },
        _initialActive: function() {
            var i = this.options.active, t = this.options.collapsible, s = location.hash.substring(1);
            return null === i && (s && this.tabs.each(function(t, e) {
                if (V(e).attr("aria-controls") === s) return i = t, !1;
            }), null !== (i = null === i ? this.tabs.index(this.tabs.filter(".ui-tabs-active")) : i) && -1 !== i || (i = !!this.tabs.length && 0)), 
            !1 !== i && -1 === (i = this.tabs.index(this.tabs.eq(i))) && (i = !t && 0), 
            i = !t && !1 === i && this.anchors.length ? 0 : i;
        },
        _getCreateEventData: function() {
            return {
                tab: this.active,
                panel: this.active.length ? this._getPanelForTab(this.active) : V()
            };
        },
        _tabKeydown: function(t) {
            var e = V(V.ui.safeActiveElement(this.document[0])).closest("li"), i = this.tabs.index(e), s = !0;
            if (!this._handlePageNav(t)) {
                switch (t.keyCode) {
                  case V.ui.keyCode.RIGHT:
                  case V.ui.keyCode.DOWN:
                    i++;
                    break;

                  case V.ui.keyCode.UP:
                  case V.ui.keyCode.LEFT:
                    s = !1, i--;
                    break;

                  case V.ui.keyCode.END:
                    i = this.anchors.length - 1;
                    break;

                  case V.ui.keyCode.HOME:
                    i = 0;
                    break;

                  case V.ui.keyCode.SPACE:
                    return t.preventDefault(), clearTimeout(this.activating), void this._activate(i);

                  case V.ui.keyCode.ENTER:
                    return t.preventDefault(), clearTimeout(this.activating), void this._activate(i !== this.options.active && i);

                  default:
                    return;
                }
                t.preventDefault(), clearTimeout(this.activating), i = this._focusNextTab(i, s), 
                t.ctrlKey || t.metaKey || (e.attr("aria-selected", "false"), this.tabs.eq(i).attr("aria-selected", "true"), 
                this.activating = this._delay(function() {
                    this.option("active", i);
                }, this.delay));
            }
        },
        _panelKeydown: function(t) {
            this._handlePageNav(t) || t.ctrlKey && t.keyCode === V.ui.keyCode.UP && (t.preventDefault(), 
            this.active.trigger("focus"));
        },
        _handlePageNav: function(t) {
            return t.altKey && t.keyCode === V.ui.keyCode.PAGE_UP ? (this._activate(this._focusNextTab(this.options.active - 1, !1)), 
            !0) : t.altKey && t.keyCode === V.ui.keyCode.PAGE_DOWN ? (this._activate(this._focusNextTab(this.options.active + 1, !0)), 
            !0) : void 0;
        },
        _findNextTab: function(t, e) {
            for (var i = this.tabs.length - 1; -1 !== V.inArray(t = (t = i < t ? 0 : t) < 0 ? i : t, this.options.disabled); ) t = e ? t + 1 : t - 1;
            return t;
        },
        _focusNextTab: function(t, e) {
            return t = this._findNextTab(t, e), this.tabs.eq(t).trigger("focus"), 
            t;
        },
        _setOption: function(t, e) {
            "active" !== t ? (this._super(t, e), "collapsible" === t && (this._toggleClass("ui-tabs-collapsible", null, e), 
            e || !1 !== this.options.active || this._activate(0)), "event" === t && this._setupEvents(e), 
            "heightStyle" === t && this._setupHeightStyle(e)) : this._activate(e);
        },
        _sanitizeSelector: function(t) {
            return t ? t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
        },
        refresh: function() {
            var t = this.options, e = this.tablist.children(":has(a[href])");
            t.disabled = V.map(e.filter(".ui-state-disabled"), function(t) {
                return e.index(t);
            }), this._processTabs(), !1 !== t.active && this.anchors.length ? this.active.length && !V.contains(this.tablist[0], this.active[0]) ? this.tabs.length === t.disabled.length ? (t.active = !1, 
            this.active = V()) : this._activate(this._findNextTab(Math.max(0, t.active - 1), !1)) : t.active = this.tabs.index(this.active) : (t.active = !1, 
            this.active = V()), this._refresh();
        },
        _refresh: function() {
            this._setOptionDisabled(this.options.disabled), this._setupEvents(this.options.event), 
            this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }), this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                "aria-hidden": "true"
            }), this.active.length ? (this.active.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            }), this._addClass(this.active, "ui-tabs-active", "ui-state-active"), 
            this._getPanelForTab(this.active).show().attr({
                "aria-hidden": "false"
            })) : this.tabs.eq(0).attr("tabIndex", 0);
        },
        _processTabs: function() {
            var l = this, t = this.tabs, e = this.anchors, i = this.panels;
            this.tablist = this._getList().attr("role", "tablist"), this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header"), 
            this.tablist.on("mousedown" + this.eventNamespace, "> li", function(t) {
                V(this).is(".ui-state-disabled") && t.preventDefault();
            }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
                V(this).closest("li").is(".ui-state-disabled") && this.blur();
            }), this.tabs = this.tablist.find("> li:has(a[href])").attr({
                role: "tab",
                tabIndex: -1
            }), this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default"), this.anchors = this.tabs.map(function() {
                return V("a", this)[0];
            }).attr({
                tabIndex: -1
            }), this._addClass(this.anchors, "ui-tabs-anchor"), this.panels = V(), 
            this.anchors.each(function(t, e) {
                var i, s, n, o = V(e).uniqueId().attr("id"), a = V(e).closest("li"), r = a.attr("aria-controls");
                l._isLocal(e) ? (n = (i = e.hash).substring(1), s = l.element.find(l._sanitizeSelector(i))) : (n = a.attr("aria-controls") || V({}).uniqueId()[0].id, 
                (s = l.element.find(i = "#" + n)).length || (s = l._createPanel(n)).insertAfter(l.panels[t - 1] || l.tablist), 
                s.attr("aria-live", "polite")), s.length && (l.panels = l.panels.add(s)), 
                r && a.data("ui-tabs-aria-controls", r), a.attr({
                    "aria-controls": n,
                    "aria-labelledby": o
                }), s.attr("aria-labelledby", o);
            }), this.panels.attr("role", "tabpanel"), this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content"), 
            t && (this._off(t.not(this.tabs)), this._off(e.not(this.anchors)), this._off(i.not(this.panels)));
        },
        _getList: function() {
            return this.tablist || this.element.find("ol, ul").eq(0);
        },
        _createPanel: function(t) {
            return V("<div>").attr("id", t).data("ui-tabs-destroy", !0);
        },
        _setOptionDisabled: function(t) {
            var e, i;
            for (Array.isArray(t) && (t.length ? t.length === this.anchors.length && (t = !0) : t = !1), 
            i = 0; e = this.tabs[i]; i++) e = V(e), !0 === t || -1 !== V.inArray(i, t) ? (e.attr("aria-disabled", "true"), 
            this._addClass(e, null, "ui-state-disabled")) : (e.removeAttr("aria-disabled"), 
            this._removeClass(e, null, "ui-state-disabled"));
            this.options.disabled = t, this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !0 === t);
        },
        _setupEvents: function(t) {
            var i = {};
            t && V.each(t.split(" "), function(t, e) {
                i[e] = "_eventHandler";
            }), this._off(this.anchors.add(this.tabs).add(this.panels)), this._on(!0, this.anchors, {
                click: function(t) {
                    t.preventDefault();
                }
            }), this._on(this.anchors, i), this._on(this.tabs, {
                keydown: "_tabKeydown"
            }), this._on(this.panels, {
                keydown: "_panelKeydown"
            }), this._focusable(this.tabs), this._hoverable(this.tabs);
        },
        _setupHeightStyle: function(t) {
            var i, e = this.element.parent();
            "fill" === t ? (i = e.height(), i -= this.element.outerHeight() - this.element.height(), 
            this.element.siblings(":visible").each(function() {
                var t = V(this), e = t.css("position");
                "absolute" !== e && "fixed" !== e && (i -= t.outerHeight(!0));
            }), this.element.children().not(this.panels).each(function() {
                i -= V(this).outerHeight(!0);
            }), this.panels.each(function() {
                V(this).height(Math.max(0, i - V(this).innerHeight() + V(this).height()));
            }).css("overflow", "auto")) : "auto" === t && (i = 0, this.panels.each(function() {
                i = Math.max(i, V(this).height("").height());
            }).height(i));
        },
        _eventHandler: function(t) {
            var e = this.options, i = this.active, s = V(t.currentTarget).closest("li"), n = s[0] === i[0], o = n && e.collapsible, a = o ? V() : this._getPanelForTab(s), r = i.length ? this._getPanelForTab(i) : V(), i = {
                oldTab: i,
                oldPanel: r,
                newTab: o ? V() : s,
                newPanel: a
            };
            t.preventDefault(), s.hasClass("ui-state-disabled") || s.hasClass("ui-tabs-loading") || this.running || n && !e.collapsible || !1 === this._trigger("beforeActivate", t, i) || (e.active = !o && this.tabs.index(s), 
            this.active = n ? V() : s, this.xhr && this.xhr.abort(), r.length || a.length || V.error("jQuery UI Tabs: Mismatching fragment identifier."), 
            a.length && this.load(this.tabs.index(s), t), this._toggle(t, i));
        },
        _toggle: function(t, e) {
            var i = this, s = e.newPanel, n = e.oldPanel;
            function o() {
                i.running = !1, i._trigger("activate", t, e);
            }
            function a() {
                i._addClass(e.newTab.closest("li"), "ui-tabs-active", "ui-state-active"), 
                s.length && i.options.show ? i._show(s, i.options.show, o) : (s.show(), 
                o());
            }
            this.running = !0, n.length && this.options.hide ? this._hide(n, this.options.hide, function() {
                i._removeClass(e.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), 
                a();
            }) : (this._removeClass(e.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), 
            n.hide(), a()), n.attr("aria-hidden", "true"), e.oldTab.attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            }), s.length && n.length ? e.oldTab.attr("tabIndex", -1) : s.length && this.tabs.filter(function() {
                return 0 === V(this).attr("tabIndex");
            }).attr("tabIndex", -1), s.attr("aria-hidden", "false"), e.newTab.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            });
        },
        _activate: function(t) {
            (t = this._findActive(t))[0] !== this.active[0] && (t = (t = t.length ? t : this.active).find(".ui-tabs-anchor")[0], 
            this._eventHandler({
                target: t,
                currentTarget: t,
                preventDefault: V.noop
            }));
        },
        _findActive: function(t) {
            return !1 === t ? V() : this.tabs.eq(t);
        },
        _getIndex: function(t) {
            return "string" == typeof t ? this.anchors.index(this.anchors.filter("[href$='" + V.escapeSelector(t) + "']")) : t;
        },
        _destroy: function() {
            this.xhr && this.xhr.abort(), this.tablist.removeAttr("role").off(this.eventNamespace), 
            this.anchors.removeAttr("role tabIndex").removeUniqueId(), this.tabs.add(this.panels).each(function() {
                V.data(this, "ui-tabs-destroy") ? V(this).remove() : V(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded");
            }), this.tabs.each(function() {
                var t = V(this), e = t.data("ui-tabs-aria-controls");
                e ? t.attr("aria-controls", e).removeData("ui-tabs-aria-controls") : t.removeAttr("aria-controls");
            }), this.panels.show(), "content" !== this.options.heightStyle && this.panels.css("height", "");
        },
        enable: function(i) {
            var t = this.options.disabled;
            !1 !== t && (t = void 0 !== i && (i = this._getIndex(i), Array.isArray(t) ? V.map(t, function(t) {
                return t !== i ? t : null;
            }) : V.map(this.tabs, function(t, e) {
                return e !== i ? e : null;
            })), this._setOptionDisabled(t));
        },
        disable: function(t) {
            var e = this.options.disabled;
            if (!0 !== e) {
                if (void 0 === t) e = !0; else {
                    if (t = this._getIndex(t), -1 !== V.inArray(t, e)) return;
                    e = Array.isArray(e) ? V.merge([ t ], e).sort() : [ t ];
                }
                this._setOptionDisabled(e);
            }
        },
        load: function(t, s) {
            function n(t, e) {
                "abort" === e && o.panels.stop(!1, !0), o._removeClass(i, "ui-tabs-loading"), 
                a.removeAttr("aria-busy"), t === o.xhr && delete o.xhr;
            }
            t = this._getIndex(t);
            var o = this, i = this.tabs.eq(t), t = i.find(".ui-tabs-anchor"), a = this._getPanelForTab(i), r = {
                tab: i,
                panel: a
            };
            this._isLocal(t[0]) || (this.xhr = V.ajax(this._ajaxSettings(t, s, r)), 
            this.xhr && "canceled" !== this.xhr.statusText && (this._addClass(i, "ui-tabs-loading"), 
            a.attr("aria-busy", "true"), this.xhr.done(function(t, e, i) {
                setTimeout(function() {
                    a.html(t), o._trigger("load", s, r), n(i, e);
                }, 1);
            }).fail(function(t, e) {
                setTimeout(function() {
                    n(t, e);
                }, 1);
            })));
        },
        _ajaxSettings: function(t, i, s) {
            var n = this;
            return {
                url: t.attr("href").replace(/#.*$/, ""),
                beforeSend: function(t, e) {
                    return n._trigger("beforeLoad", i, V.extend({
                        jqXHR: t,
                        ajaxSettings: e
                    }, s));
                }
            };
        },
        _getPanelForTab: function(t) {
            return t = V(t).attr("aria-controls"), this.element.find(this._sanitizeSelector("#" + t));
        }
    }), !1 !== V.uiBackCompat && V.widget("ui.tabs", V.ui.tabs, {
        _processTabs: function() {
            this._superApply(arguments), this._addClass(this.tabs, "ui-tab");
        }
    }), V.ui.tabs, V.widget("ui.tooltip", {
        version: "1.13.1",
        options: {
            classes: {
                "ui-tooltip": "ui-corner-all ui-widget-shadow"
            },
            content: function() {
                var t = V(this).attr("title");
                return V("<a>").text(t).html();
            },
            hide: !0,
            items: "[title]:not([disabled])",
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            show: !0,
            track: !1,
            close: null,
            open: null
        },
        _addDescribedBy: function(t, e) {
            var i = (t.attr("aria-describedby") || "").split(/\s+/);
            i.push(e), t.data("ui-tooltip-id", e).attr("aria-describedby", String.prototype.trim.call(i.join(" ")));
        },
        _removeDescribedBy: function(t) {
            var e = t.data("ui-tooltip-id"), i = (t.attr("aria-describedby") || "").split(/\s+/);
            -1 !== (e = V.inArray(e, i)) && i.splice(e, 1), t.removeData("ui-tooltip-id"), 
            (i = String.prototype.trim.call(i.join(" "))) ? t.attr("aria-describedby", i) : t.removeAttr("aria-describedby");
        },
        _create: function() {
            this._on({
                mouseover: "open",
                focusin: "open"
            }), this.tooltips = {}, this.parents = {}, this.liveRegion = V("<div>").attr({
                role: "log",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), 
            this.disabledTitles = V([]);
        },
        _setOption: function(t, e) {
            var i = this;
            this._super(t, e), "content" === t && V.each(this.tooltips, function(t, e) {
                i._updateContent(e.element);
            });
        },
        _setOptionDisabled: function(t) {
            this[t ? "_disable" : "_enable"]();
        },
        _disable: function() {
            var s = this;
            V.each(this.tooltips, function(t, e) {
                var i = V.Event("blur");
                i.target = i.currentTarget = e.element[0], s.close(i, !0);
            }), this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function() {
                var t = V(this);
                if (t.is("[title]")) return t.data("ui-tooltip-title", t.attr("title")).removeAttr("title");
            }));
        },
        _enable: function() {
            this.disabledTitles.each(function() {
                var t = V(this);
                t.data("ui-tooltip-title") && t.attr("title", t.data("ui-tooltip-title"));
            }), this.disabledTitles = V([]);
        },
        open: function(t) {
            var i = this, e = V(t ? t.target : this.element).closest(this.options.items);
            e.length && !e.data("ui-tooltip-id") && (e.attr("title") && e.data("ui-tooltip-title", e.attr("title")), 
            e.data("ui-tooltip-open", !0), t && "mouseover" === t.type && e.parents().each(function() {
                var t, e = V(this);
                e.data("ui-tooltip-open") && ((t = V.Event("blur")).target = t.currentTarget = this, 
                i.close(t, !0)), e.attr("title") && (e.uniqueId(), i.parents[this.id] = {
                    element: this,
                    title: e.attr("title")
                }, e.attr("title", ""));
            }), this._registerCloseHandlers(t, e), this._updateContent(e, t));
        },
        _updateContent: function(e, i) {
            var t = this.options.content, s = this, n = i ? i.type : null;
            if ("string" == typeof t || t.nodeType || t.jquery) return this._open(i, e, t);
            (t = t.call(e[0], function(t) {
                s._delay(function() {
                    e.data("ui-tooltip-open") && (i && (i.type = n), this._open(i, e, t));
                });
            })) && this._open(i, e, t);
        },
        _open: function(t, e, i) {
            var s, n, o, a = V.extend({}, this.options.position);
            function r(t) {
                a.of = t, n.is(":hidden") || n.position(a);
            }
            i && ((s = this._find(e)) ? s.tooltip.find(".ui-tooltip-content").html(i) : (e.is("[title]") && (t && "mouseover" === t.type ? e.attr("title", "") : e.removeAttr("title")), 
            s = this._tooltip(e), n = s.tooltip, this._addDescribedBy(e, n.attr("id")), 
            n.find(".ui-tooltip-content").html(i), this.liveRegion.children().hide(), 
            (i = V("<div>").html(n.find(".ui-tooltip-content").html())).removeAttr("name").find("[name]").removeAttr("name"), 
            i.removeAttr("id").find("[id]").removeAttr("id"), i.appendTo(this.liveRegion), 
            this.options.track && t && /^mouse/.test(t.type) ? (this._on(this.document, {
                mousemove: r
            }), r(t)) : n.position(V.extend({
                of: e
            }, this.options.position)), n.hide(), this._show(n, this.options.show), 
            this.options.track && this.options.show && this.options.show.delay && (o = this.delayedShow = setInterval(function() {
                n.is(":visible") && (r(a.of), clearInterval(o));
            }, 13)), this._trigger("open", t, {
                tooltip: n
            })));
        },
        _registerCloseHandlers: function(t, e) {
            var i = {
                keyup: function(t) {
                    t.keyCode === V.ui.keyCode.ESCAPE && ((t = V.Event(t)).currentTarget = e[0], 
                    this.close(t, !0));
                }
            };
            e[0] !== this.element[0] && (i.remove = function() {
                var t = this._find(e);
                t && this._removeTooltip(t.tooltip);
            }), t && "mouseover" !== t.type || (i.mouseleave = "close"), t && "focusin" !== t.type || (i.focusout = "close"), 
            this._on(!0, e, i);
        },
        close: function(t) {
            var e, i = this, s = V(t ? t.currentTarget : this.element), n = this._find(s);
            n ? (e = n.tooltip, n.closing || (clearInterval(this.delayedShow), s.data("ui-tooltip-title") && !s.attr("title") && s.attr("title", s.data("ui-tooltip-title")), 
            this._removeDescribedBy(s), n.hiding = !0, e.stop(!0), this._hide(e, this.options.hide, function() {
                i._removeTooltip(V(this));
            }), s.removeData("ui-tooltip-open"), this._off(s, "mouseleave focusout keyup"), 
            s[0] !== this.element[0] && this._off(s, "remove"), this._off(this.document, "mousemove"), 
            t && "mouseleave" === t.type && V.each(this.parents, function(t, e) {
                V(e.element).attr("title", e.title), delete i.parents[t];
            }), n.closing = !0, this._trigger("close", t, {
                tooltip: e
            }), n.hiding || (n.closing = !1))) : s.removeData("ui-tooltip-open");
        },
        _tooltip: function(t) {
            var e = V("<div>").attr("role", "tooltip"), i = V("<div>").appendTo(e), s = e.uniqueId().attr("id");
            return this._addClass(i, "ui-tooltip-content"), this._addClass(e, "ui-tooltip", "ui-widget ui-widget-content"), 
            e.appendTo(this._appendTo(t)), this.tooltips[s] = {
                element: t,
                tooltip: e
            };
        },
        _find: function(t) {
            return (t = t.data("ui-tooltip-id")) ? this.tooltips[t] : null;
        },
        _removeTooltip: function(t) {
            clearInterval(this.delayedShow), t.remove(), delete this.tooltips[t.attr("id")];
        },
        _appendTo: function(t) {
            return (t = t.closest(".ui-front, dialog")).length ? t : this.document[0].body;
        },
        _destroy: function() {
            var s = this;
            V.each(this.tooltips, function(t, e) {
                var i = V.Event("blur"), e = e.element;
                i.target = i.currentTarget = e[0], s.close(i, !0), V("#" + t).remove(), 
                e.data("ui-tooltip-title") && (e.attr("title") || e.attr("title", e.data("ui-tooltip-title")), 
                e.removeData("ui-tooltip-title"));
            }), this.liveRegion.remove();
        }
    }), !1 !== V.uiBackCompat && V.widget("ui.tooltip", V.ui.tooltip, {
        options: {
            tooltipClass: null
        },
        _tooltip: function() {
            var t = this._superApply(arguments);
            return this.options.tooltipClass && t.tooltip.addClass(this.options.tooltipClass), 
            t;
        }
    }), V.ui.tooltip;
}), function($) {
    $.widget("custom.groupcomplete", $.ui.autocomplete, {
        _renderItemData: function(ul, item) {
            ul = "function" == typeof this.options.renderItem ? this.options.renderItem(ul, item) : this._renderItem(ul, item);
            return ul.data("ui-autocomplete-item", item);
        },
        _renderMenu: function(ul, items) {
            var currentCategory, currentCategoryId, categoryId, that = this, category = "";
            $.each(items, function(index, item) {
                (category = 0 < $(item.option).closest("optgroup").length ? $(item.option).closest("optgroup")[0] : null) && (categoryId = $(category).attr("id"), 
                (category = $(category).attr("label")) === currentCategory && categoryId === currentCategoryId || (ul.append("<li class='ui-autocomplete-category ui-state-disabled' role='option'>" + category + "</li>"), 
                currentCategory = category, currentCategoryId = categoryId)), that._renderItemData(ul, item);
            }), $(ul).attr("role", "listbox"), $(ul).find("li").attr("role", "option"), 
            $(ul).find("li:odd").addClass("odd");
            try {
                var scrollNeeded = this.element.offset().top + this.element.outerHeight() + $(ul).outerHeight() - ($(window).height() + $(window).scrollTop());
                0 < scrollNeeded && $("html, body").animate({
                    scrollTop: "+=" + scrollNeeded + "px"
                }, "slow");
            } catch (e) {}
        }
    }), $(document).on("keydown", function(e) {
        32 === (e.charCode || e.keyCode || 0) && null != e.target.className && -1 !== e.target.className.indexOf("ui-button") && e.preventDefault();
    }), $.widget("custom.combobox", {
        _create: function() {
            this.wrapper = $("<span>").addClass("ssb-combobox").insertAfter(this.element), 
            this.element.hide(), this._createAutocomplete(), this._createShowAllButton();
        },
        _createAutocomplete: function() {
            var selected = this.element.find(":selected"), selected = selected.val() ? selected.text() : "", elementID = this.element.attr("id");
            this.input = $("<input>").appendTo(this.wrapper).val(selected).attr("title", "").attr("role", "combobox").attr("aria-autocomplete", "both").attr("aria-expanded", "false").attr("id", elementID + "-input").addClass("ssb-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left").on("focus", function() {
                $(this).select();
            }).on("keydown", function(ev) {
                "true" === $(this).attr("aria-expanded") && 27 === ev.keyCode && ev.stopPropagation();
            }).on("groupcompletecreate", function() {
                var keys = {};
                $(this).keydown(function(e) {
                    keys[e.which] = !0, "18" in keys && "38" in keys && (keys = {}, 
                    $(this).groupcomplete("close"));
                }), $(this).keyup(function(e) {
                    delete keys[e.which];
                });
            }).groupcomplete({
                delay: 0,
                minLength: 0,
                source: $.proxy(this, "_source"),
                renderItem: this.options.renderItem,
                select: function(event, ui) {
                    ui.item.option.selected = !0, $(ui.item.option).parents("select").trigger("change", ui);
                },
                open: function(event, ui) {
                    $(this).attr("aria-expanded", "true"), $(this).parent().find("div").attr("aria-pressed", "true");
                    var parentSelect = $(this).parent().prev("select");
                    0 < parentSelect.length && parentSelect.trigger("open", ui);
                },
                close: function(event, ui) {
                    $(this).attr("aria-expanded", "false"), $(this).removeAttr("aria-activedescendant"), 
                    $(this).parent().find("div").attr("aria-pressed", "false");
                    var parentSelect = $(this).parent().prev("select");
                    0 < parentSelect.length && parentSelect.trigger("close", ui);
                },
                focus: function(event, ui) {
                    var selectedElement = $(this).data("customGroupcomplete").menu.element.find("div.ui-state-active"), wrapperElementId = selectedElement.attr("id") + "-wrapper";
                    return selectedElement.parent("li").attr("id", wrapperElementId), 
                    $(this).attr("aria-activedescendant", wrapperElementId), !1;
                }
            }).tooltip({
                tooltipClass: "ui-state-highlight"
            }), this._on(this.input, {
                autocompleteselect: function(event, ui) {
                    ui.item.option.selected = !0, this._trigger("select", event, {
                        item: ui.item.option
                    });
                },
                autocompletechange: "_removeIfInvalid"
            });
        },
        _createShowAllButton: function() {
            var input = this.input, wasOpen = !1, inputLabel = $('label[for="' + $(input).attr("id") + '"]');
            if (0 < inputLabel.length) switch (inputLabel = inputLabel[0].innerText) {
              case "Severity":
                inputLabel = "Severities";
                break;

              case "Status":
                inputLabel = "Statuses";
                break;

              default:
                inputLabel += "s";
            }
            var showAllTitle = "Show All " + (inputLabel.length <= 0 ? "Items" : inputLabel);
            $("<div>").attr("tabIndex", 0).attr("title", showAllTitle).attr("aria-pressed", "false").appendTo(this.wrapper).button({
                icons: {
                    primary: "fas fa-caret-down"
                },
                text: !1
            }).removeClass("ui-corner-all").addClass("ssb-combobox-toggle ui-corner-right").mousedown(function() {
                wasOpen = input.groupcomplete("widget").is(":visible");
            }).click(function() {
                input.focus(), wasOpen || input.groupcomplete("search", "");
            }).keydown(function(e) {
                var keyPressed = e.which;
                32 !== keyPressed && 13 !== keyPressed || (e.preventDefault(), input.focus(), 
                input.groupcomplete("search", ""));
            }).hover(function() {
                $(this).tooltip(), $(this).tooltip("open");
            }, function() {
                $(this).tooltip("destroy");
            });
        },
        _source: function(request, response) {
            var regexString = (request.term + "").replace(/([.?+\^\$\[\]\\(){}|-])/g, "\\$1"), matcher = new RegExp(regexString, "i");
            response(this.element.find("option,optgroup option").map(function() {
                var text = $(this).text();
                if (this.value && (!request.term || matcher.test(text))) return {
                    label: text,
                    value: text,
                    option: this
                };
            }));
        },
        _removeIfInvalid: function(event, ui) {
            var valueLowerCase, valid;
            ui.item || (ui = this.input.val(), valueLowerCase = ui.toLowerCase(), 
            valid = !1, this.element.find("option").each(function() {
                if ($(this).text().toLowerCase() === valueLowerCase) return !(this.selected = valid = !0);
            }), valid || (this.input.val("").attr("title", ui + " didn't match any item").tooltip("open"), 
            this.element.val(""), this._delay(function() {
                this.input.tooltip("close").attr("title", "");
            }, 2500), this.input.groupcomplete("instance").term = ""));
        },
        _destroy: function() {
            this.wrapper.remove(), this.element.show();
        }
    });
}(jQuery);

var AST = AST || {
    controller: null
};

AST.postsMessagesMixin = {
    postCommand: function(destination, cmd) {
        window.postMessage({
            source: "ast",
            destination: destination,
            command: cmd
        }, window.origin);
    },
    postResults: function(destination, result) {
        window.postMessage({
            source: "ast",
            destination: destination,
            result: result
        }, window.origin);
    },
    postPromise: function(destination, message, expectResponse = !0) {
        return new Promise((resolve, reject) => {
            const id = Date.now() + "-" + Math.floor(Math.random() * Date.now());
            if (expectResponse) {
                const responseMessageListener = responseMessage => {
                    responseMessage = responseMessage.data;
                    responseMessage.id === id && responseMessage.isResponse && (window.removeEventListener("message", responseMessageListener), 
                    responseMessage.error ? reject({
                        error: responseMessage.error
                    }) : resolve(responseMessage));
                };
                window.addEventListener("message", responseMessageListener);
            }
            window.postMessage({
                id: id,
                source: "ast",
                destination: destination,
                command: message
            }, window.origin), expectResponse || resolve(!0);
        });
    }
}, AST.hasDataModelMixin = {
    model: null,
    initModel: function(data) {
        this.setModel(new AST.Model(data));
    },
    getModel: function() {
        return this.model;
    },
    setModel: function(model) {
        this.model = model;
    },
    getData: function() {
        return $.extend(!0, {}, this.model.getData());
    },
    setData: function(data) {
        this.model.setData(data);
    },
    getModelProperty: function(key) {
        return this.model.get(key);
    },
    setModelProperty: function(key, value) {
        this.model.set(key, value);
    }
}, AST.hasTitleMixin = {
    title: "",
    getTitle: function() {
        return this.title;
    },
    setTitle: function(val) {
        this.title = val;
    }
}, AST.HighlightsMixin = $.extend({
    initHighlighting: function() {
        this.shouldHighlight();
    },
    shouldHighlight: function() {
        var setting = AST.Storage.get("highlight-instances");
        return null === setting && this.setShouldHighlight(setting = !0), setting;
    },
    setShouldHighlight: function(val) {
        AST.Storage.set("highlight-instances", !!val), this._nofifyPageOfHighlighting(val);
    },
    _nofifyPageOfHighlighting: function(val) {
        this.postCommand("page", {
            type: "HIGHLIGHT_TOGGLE",
            on: val
        });
    },
    highlight: function(frameId, selector, content, color, callback, expanded, offsets) {
        this._nofifyPageOfHighlighting(this.shouldHighlight()), this.postCommand("page", {
            type: "HIGHLIGHT_INSTANCE",
            frameId: frameId,
            selector: selector,
            content: content,
            color: color,
            callback: callback,
            expanded: expanded
        });
    },
    unhighlight: function() {
        this.postCommand("page", {
            type: "UNHIGHLIGHT_INSTANCE"
        });
    },
    toggleInstances: function(frameId, selector) {
        this.postCommand("page", {
            type: "TOGGLE_INSTANCE_HIGHLIGHT",
            frameId: frameId,
            selector: selector
        });
    },
    getHighlightToggleButton: function() {
        return new AST.form.Toggle({
            attributes: {
                class: "highlight-toggle"
            },
            label: "Toggle Highlight",
            labelPosition: "left",
            onLabel: "On",
            offLabel: "Off",
            initChecked: this.shouldHighlight(),
            listeners: {
                click: this.handleToggleHighlighting.bind(this)
            }
        });
    },
    handleToggleHighlighting: function(ev) {
        this.setShouldHighlight(ev.currentTarget.checked);
    }
}, AST.postsMessagesMixin), AST.nodeCaptureMixin = {
    handleNodeCapture: function(ev) {
        ev.preventDefault(), new AST.NodeCapture({
            target: ev.currentTarget
        }).launch();
    },
    handleNodeCaptureDOM: function(ev) {
        ev.preventDefault(), new AST.NodeCapture({
            target: ev.currentTarget
        }).keyboardLaunch();
    },
    handleNodeCaptureKeyboard: function(ev) {
        ev.keyCode !== AST.Util.KeyCodes.ENTER && ev.keyCode !== AST.Util.KeyCodes.SPACE || this.handleNodeCaptureDOM(ev);
    },
    connectCaptureResultsListener: function() {
        this.resultsListener = this.handleCaptureResults.bind(this), window.addEventListener("message", this.resultsListener, !1);
    },
    disconnectCaptureResultsListener: function() {
        window.removeEventListener("message", this.resultsListener, !1);
    },
    handleNodeCaptureSelection: function(field, node, frameId) {
        var html = node[0].outerHTML.substr(0, node[0].outerHTML.indexOf(">") + 1) + "</" + node.prop("tagName").toLowerCase() + ">", field = ($(field.getEl()).val(html), 
        node.attr("data-ae_domuel"));
        this.getModel().set("uel", field), this.getModel().set("path", "[NODE][" + field + "]"), 
        this.getModel().set("node", node), this.getModel().set("moduleLocation", frameId);
    },
    getSelectedNode: function() {
        return this.getModel().get("node");
    }
}, AST.RememberFocusTargetMixin = {
    target: null,
    getTarget: function() {
        return this.target;
    },
    setTarget: function(target) {
        this.target = target;
    }
}, AST.Util = {
    _browser: "chrome",
    AssetTypes: {
        PRODUCTION: "Production",
        SANDBOX: "Sandbox"
    },
    TestTypes: {
        GLOBAL: 2,
        IMPLIED_GLOBAL: 3,
        AUTOMATIC: 4,
        GUIDED_AUTOMATIC: 5,
        MANUAL: 6,
        GUIDED_MANUAL: 30,
        ADVISORY: -1
    },
    InstanceStatus: {
        FAIL: 0,
        PASSED: 1,
        REVIEW: 3,
        FIXED: 4,
        MANUAL: 5
    },
    MacroCommands: {
        SELECT: "select",
        CLICK: "click",
        USERNAME: "username",
        PASSWORD: "password",
        TEXT: "text"
    },
    KeyCodes: {
        DOWN: 40,
        UP: 38,
        LEFT: 37,
        RIGHT: 39,
        TAB: 9,
        HOME: 36,
        END: 35,
        ENTER: 13,
        SPACE: 32,
        SHIFT: 9,
        ESC: 27,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123
    },
    isEdge: function() {
        return "edge" === this._browser;
    },
    isFireFox: function() {
        return "firefox" === this._browser;
    },
    isChrome: function() {
        return "chrome" === this._browser;
    },
    getBrowserName: function() {
        return AST.Util.isEdge() ? "edge" : AST.Util.isFireFox() ? "firefox" : AST.Util.isChrome() ? "chrome" : "";
    },
    encodeHTML: function(decodedString) {
        return decodedString = (decodedString = (decodedString = decodedString.replace(/</g, "&lt;")).replace(/>/g, "&gt;")).replace(/"/g, "&quot;");
    },
    decodeHTML: function(encodedString) {
        return encodedString = $("<textarea/>").html(encodedString).text();
    },
    recursivePrintHtml: function(node, indent) {
        var html = "";
        switch (node.nodeType) {
          case Node.ELEMENT_NODE:
            if (html = (html += "\n" + "  ".repeat(indent)) + node.outerHTML.substr(0, node.outerHTML.indexOf(">") + 1), 
            node.tagName && "html" !== node.tagName.toLowerCase()) for (var i = 0; i < node.childNodes.length; i++) html += AST.Util.recursivePrintHtml(node.childNodes[i], indent + 1);
            "\n" === html.charAt(html.length - 1) && (html += "  ".repeat(indent)), 
            html += "</" + node.tagName.toLowerCase() + ">\n";
            break;

          case Node.TEXT_NODE:
            html += node.textContent;
        }
        return html;
    },
    reloadCss: function() {
        for (var h, s, a = document.getElementsByTagName("link"), i = 0; i < a.length; i++) 0 <= (s = a[i]).rel.toLowerCase().indexOf("stylesheet") && s.href && (h = s.href.replace(/(&|%5C?)forceReload=\d+/, ""), 
        s.href = h + (0 <= h.indexOf("?") ? "&" : "?") + "forceReload=" + new Date().valueOf());
    },
    getBackButton: function(text) {
        return '<i class="fas fa-arrow-alt-left"></i><span class="a11y-offscreen-text">' + text + "</span>";
    },
    prettyPrintHtml: function(node, indent) {
        indent = void 0 !== indent ? indent : 0;
        var pre = new AST.Element({
            tagName: "pre",
            attributes: {}
        });
        return AST.Util.recursivePrettyPrintHtml(pre, node, indent), pre;
    },
    appendChild: function(outer, inner) {
        outer.addChild(inner);
    },
    recursivePrettyPrintHtml: function(pre, node, indent) {
        var space, tag, close, code = new AST.Element({
            tagName: "code",
            attributes: {
                class: "start indent-" + indent
            }
        });
        switch (node.nodeType) {
          case Node.ELEMENT_NODE:
            open = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: "<"
            }), AST.Util.appendChild(code, open), tag = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "tagName"
                },
                content: node.tagName.toLowerCase()
            }), AST.Util.appendChild(code, tag), 0 < node.attributes.length && (space = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "space"
                },
                content: " "
            }), AST.Util.appendChild(code, space));
            for (var j = 0, k = node.attributes.length; j < k; j++) {
                var attrName, attr = node.attributes[j];
                0 !== attr.nodeName.indexOf("data-ae") && 0 !== attr.nodeName.indexOf("data-la") && (attrName = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attributeName"
                    },
                    content: attr.nodeName
                }), AST.Util.appendChild(code, attrName), attrName = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attrQuote"
                    },
                    content: '="'
                }), AST.Util.appendChild(code, attrName), attrName = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attributeValue"
                    },
                    content: attr.nodeValue
                }), AST.Util.appendChild(code, attrName), attr = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attrQuote"
                    },
                    content: '"'
                }), AST.Util.appendChild(code, attr), j + 1 !== k && (space = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "space"
                    },
                    content: " "
                }), AST.Util.appendChild(code, space)));
            }
            if (close = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: ">"
            }), AST.Util.appendChild(code, close), AST.Util.appendChild(pre, code), 
            node.tagName && "html" !== node.tagName.toLowerCase()) for (var i = 0; i < node.childNodes.length; i++) AST.Util.recursivePrettyPrintHtml(pre, node.childNodes[i], indent + 1);
            var closeContainer = new AST.Element({
                tagName: "code",
                attributes: {
                    class: "end indent-" + indent
                }
            }), open = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: "</"
            });
            AST.Util.appendChild(closeContainer, open), tag = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "tagName"
                },
                content: node.tagName.toLowerCase()
            }), AST.Util.appendChild(closeContainer, tag), close = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: ">"
            }), AST.Util.appendChild(closeContainer, close), AST.Util.appendChild(pre, closeContainer);
            break;

          case Node.TEXT_NODE:
            0 < node.textContent.trim().length && (open = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "txt indent-" + indent
                },
                content: node.textContent.trim()
            }), AST.Util.appendChild(pre, open));
        }
        return code;
    },
    mapEngineResult: function(data, i, result) {
        data.records = data.records || {}, data.records[result.bestPracticeId] = data.records[result.bestPracticeId] || {
            violation: {
                violationID: result.bestPracticeId
            },
            instances: []
        };
        var attribute = result.attributeDetail, i = (AST.controller.isSuppressSensitiveDataEnabled() && (result.element = AST.Util.parseTagFromHtml(result.element), 
        attribute = result.attribute), {
            lineNumber: i,
            element: result.element.substr(0, 3e3),
            attribute: attribute.substr(0, 3e3),
            xpath: result.path,
            testResult: result.testResult,
            engineTestId: result.engineTestId
        }), attribute = AST.Storage.get("activeAsset");
        attribute instanceof AST.Model && AST.alchemy.isEnabled(attribute.get("organizationID")) && "object" == typeof result.fixType && AST.alchemy.Fix.TYPES.exists(result.fixType.fixType) && (i.fixType = result.fixType.fixType, 
        i.fix = result.fixType.fix, i.fingerprint = result.fingerprint), data.records[result.bestPracticeId].instances.push(i);
    },
    parseTagFromHtml: function(html, defaultValue) {
        defaultValue = defaultValue || "<unknown/>", html = html || "";
        try {
            var match = (html = 0 === html.indexOf("&lt;") ? AST.Util.decodeHTML(html) : html).match(/^<[a-z0-9]+/i);
            if (match) return "<" + match[0].substring(1).toLowerCase() + "/>";
        } catch (e) {
            AST.logger.log(e);
        }
        return defaultValue;
    },
    maskBody: function() {
        $("body").addClass("has-popup");
    },
    unmaskBody: function() {
        $("body").removeClass("has-popup");
    },
    isValidUrl: function(url, requireProtocol) {
        return ((requireProtocol = requireProtocol || !1) ? /^(http|https|file):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i : /^(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i).test(url);
    },
    bootstrapMenus: function() {
        var context = document;
        $ACC.query('button.accMenu[data-bootstrapped="false"], a.accMenu[data-bootstrapped="false"]', context, function(i, o) {
            var p = $ACC.getAttr(o, "data-src"), cid = $ACC.getAttr(o, "data-internal"), flyout = $ACC.getAttr(o, "data-flyout");
            (cid || p) && $ACC.setMenu(o, cid || p.substring(0, p.indexOf("#")), cid ? p : p.substring(p.indexOf("#") + 1), function(ev, dc) {
                "function" != typeof this.onclick && (document.location = this.href);
            }, !!cid, context, {
                role: $ACC.getAttr(o, "data-role") || "Menu",
                accStart: $ACC.getAttr(o, "data-starttext") || "Start",
                accEnd: $ACC.getAttr(o, "data-endtext") || "End",
                openState: $ACC.getAttr(o, "data-openstate") || "Open",
                ariaLevel: 3,
                containerClass: $ACC.getAttr(o, "data-containerclass") || "menu",
                menuTag: $ACC.getAttr(o, "data-menutag") || "ol",
                menuClass: $ACC.getAttr(o, "data-menuclass") || "menu",
                itemTag: $ACC.getAttr(o, "data-menuitemtag") || "a",
                folderClass: $ACC.getAttr(o, "data-menufolderclass") || "submenu",
                linkClass: $ACC.getAttr(o, "data-menulinkclass") || "link",
                horizontal: !!flyout,
                autoPosition: 0,
                offsetLeft: function(dc) {
                    return 0;
                },
                offsetTop: function(dc) {
                    return $("body").hasClass("has-popup") ? 0 : -1 * $("main").scrollTop();
                },
                overrides: {
                    cssObj: {
                        position: "absolute",
                        zIndex: 1
                    }
                }
            }), jQuery(o).attr("data-bootstrapped", "true").removeClass("hidden");
        });
    },
    mapObject: function(obj, mapFunc) {
        const result = [];
        for (var key in mapFunc = mapFunc || function(val) {
            return val;
        }, obj) Object.hasOwnProperty.call(obj, key) && result.push(mapFunc(obj[key]));
        return result;
    }
}, AST.Storage = {
    KEY: "Level-Access-AST-",
    _initialized: !1,
    _data: {},
    initialize: function() {
        !1 === AST.Storage._initialized && (AST.Storage._initialized = !0, AST.controller.addListener("LOAD_LOCAL_STORAGE_RESPONSE", function(msg) {
            $.isEmpty(msg.result.storage) || (AST.Storage._data = msg.result.storage), 
            AST.controller.fireEvent("storageready");
        }), window.postMessage({
            source: "ast",
            destination: "background",
            command: {
                type: "LOAD_LOCAL_STORAGE"
            }
        }, window.origin));
    },
    set: function(key, value) {
        try {
            AST.Storage._data[AST.Storage._getKey(key)] = value, window.postMessage({
                source: "ast",
                destination: "background",
                command: {
                    type: "SET_LOCAL_STORAGE",
                    key: AST.Storage._getKey(key),
                    value: JSON.stringify(value)
                }
            }, window.origin), window.postMessage({
                source: "ast",
                destination: "background",
                command: {
                    type: "TO_EXTERNAL",
                    action: "storage",
                    extension: AST.Storage.get("companionExtensionId"),
                    data: {
                        host: AST.Storage.get("host"),
                        activeAsset: AST.Storage.get("activeAsset"),
                        activeReport: AST.Storage.get("activeReport"),
                        activeModule: AST.Storage.get("activeModule")
                    }
                }
            }, window.origin);
        } catch (e) {}
    },
    get: function(key, defaultValue) {
        defaultValue = defaultValue || null;
        try {
            var val = AST.Storage._data[AST.Storage._getKey(key)];
            return void 0 !== val ? val : defaultValue;
        } catch (e) {
            return;
        }
    },
    _getKey: function(key) {
        return AST.Storage.KEY + key;
    }
}, AST.TokenWatcher = function() {
    return AST.TokenWatcher.instance || (AST.TokenWatcher.instance = this), AST.TokenWatcher.instance;
}, $.extend(AST.TokenWatcher.prototype, {
    _expirationTime: null,
    _expirationTimeout: null,
    _expirationWarningTimeout: null,
    _warningModal: null,
    startExpirationWarningTimeout: function() {
        this.endExpirationWarningTimeout(), this._expirationWarningTimeout = setTimeout(function() {
            this.endExpirationWarningTimeout(), this.showWarningModal();
        }.bind(this), this.getExpirationTime() - Date.now() - 22e3);
    },
    endExpirationWarningTimeout: function() {
        clearTimeout(this._expirationWarningTimeout);
    },
    startExpirationTimeout: function() {
        this._expirationTimeout = setTimeout(function() {
            this.closeWarningModal(), this.attemptTokenRefresh();
        }.bind(this), this.getExpirationTime() - Date.now() + 2e3);
    },
    endExpirationTimeout: function() {
        clearTimeout(this._expirationTimeout);
    },
    attemptTokenRefresh: function() {
        AST.controller.ajaxPost(!0, "/api/assistant/user/refreshToken", {}, function() {
            this.closeWarningModal(), this.endExpirationTimeout();
        }.bind(this), function() {
            this.closeWarningModal(), this.endExpirationTimeout(), AST.controller.handleSessionTimeout();
        }.bind(this));
    },
    showWarningModal: function() {
        this.startExpirationTimeout(), this._warningModal = new AST.window.Modal({
            title: '<i class="fas fa-clock"></i> Extend Session',
            height: 200,
            width: 360,
            children: [ new AST.Element({
                tagName: "p",
                content: "The current AMP session will expire in 20 seconds and you will be logged out if you don't extend your session."
            }), new AST.Element({
                tagName: "p",
                content: 'Activate "Extend" if you would like to extend your session and continue working.<br>'
            }) ],
            buttons: [ new AST.form.Button({
                content: "Extend",
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.attemptTokenRefresh();
                    }.bind(this)
                }
            }), new AST.form.CancelButton({
                content: "Cancel",
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.closeWarningModal();
                    }.bind(this)
                }
            }) ]
        }), this._warningModal.render(), setTimeout(function() {
            this._warningModal.dialog.setAttribute("aria-atomic", "true"), this._warningModal.dialog.setAttribute("role", "alert");
        }.bind(this), 1e3);
    },
    closeWarningModal: function() {
        this._warningModal.close();
    },
    getExpirationTime: function() {
        return this._expirationTime;
    },
    setExpirationTime: function(tokenExpiration) {
        this._expirationTime = tokenExpiration, this.startExpirationWarningTimeout();
    }
}), AST.tokenWatcher = new AST.TokenWatcher(), AST.Model = function(data) {
    this._id = $.uniqueid(), this.setData(data || this.data);
}, $.extend(AST.Model.prototype, AST.postsMessagesMixin, {
    _id: null,
    _dirty: !1,
    data: {},
    isDirty: function() {
        return this._dirty;
    },
    setDirty: function(dirty) {
        this._dirty = dirty;
    },
    getData: function() {
        return this.data;
    },
    setData: function(data) {
        this.data = {}, $.each(data, this.set.bind(this)), this.setDirty(!1), this.notifyExternalDataListener();
    },
    get: function(key) {
        for (var value = this.data, indexParts = key.split("."), i = 0; i < indexParts.length; i++) value = value[indexParts[i]];
        return value;
    },
    set: function(key, value) {
        for (var holder = this.data, indexParts = key.split("."), i = 0; i < indexParts.length - 1; i++) holder = holder[indexParts[i]];
        holder[indexParts[indexParts.length - 1]] !== value && (holder[indexParts[indexParts.length - 1]] = value, 
        this.setDirty(!0), AST.controller.fireEvent(this._id + "-" + key, value), 
        null !== this.getExternalActionType() && AST.Storage.set("last-data", {
            action: this.getExternalActionType(),
            data: this._externalMapperExport()
        }));
    },
    getId: function() {
        return this._id;
    },
    _extensionId: null,
    _externalActionType: null,
    _externalMapperImport: function(data) {
        $.each(data, function(key, value) {
            this.set(key, value);
        }.bind(this));
    },
    _externalMapperExport: function() {
        return $.extend(!0, {}, this.getData());
    },
    getExtensionId: function() {
        return this._extensionId;
    },
    setExtensionId: function(val) {
        this._extensionId = val;
    },
    getExternalActionType: function() {
        return this._externalActionType;
    },
    setExternalActionType: function(val) {
        this._externalActionType = val;
    },
    setExternalMapperImport: function(func) {
        this._externalMapperImport = func;
    },
    setExternalMapperExport: function(func) {
        this._externalMapperExport = func;
    },
    initExternalListener: function(action, boundTo) {
        this.setExternalActionType(action), this.setExtensionId(AST.Storage.get("companionExtensionId")), 
        AST.controller.addListener("FROM_EXTERNAL", function(msg) {
            try {
                msg.result.payload.action === this.getExternalActionType() && (this.setExtensionId(msg.extensionId), 
                this._externalMapperImport(msg.result.payload.data));
            } catch (e) {}
        }.bind(this), this, boundTo), this.notifyExternalDataListener();
    },
    notifyExternalDataListener: function() {
        null !== this.getExternalActionType() && (AST.Storage.set("last-data", {
            action: this.getExternalActionType(),
            data: this._externalMapperExport()
        }), this.postCommand("background", {
            type: "TO_EXTERNAL",
            action: this.getExternalActionType(),
            extension: this.getExtensionId(),
            data: this._externalMapperExport()
        }));
    }
}), AST.Logger = function(logging) {
    return AST.Logger.instance || (this._enabled = logging = void 0 === logging ? !1 : logging, 
    AST.Logger.instance = this), AST.Logger.instance;
}, $.extend(AST.Logger.prototype, {
    _enabled: !1,
    isEnabled: function() {
        return this._enabled;
    },
    setEnabled: function(enabled) {
        this._enabled = enabled;
    },
    log: function() {
        this.isEnabled() && console.log.apply(window, arguments);
    },
    trace: function() {
        this.isEnabled() && console.trace.apply(window, arguments);
    }
}), AST.logger = new AST.Logger(!1), AST.Element = function(c) {
    this.setId(c.id || $.uniqueid()), this.setTagName(c.tagName || null), this.setAttributes(c.attributes || {}), 
    this.setContent(c.content || null), this.setListeners(c.listeners || {}), this.setChildren(c.children || []), 
    this.initElement(), this.bindListeners(), this.appendContent = !1, this.addListener("tab-activated", function() {
        setTimeout(this.rebindListeners.bind(this), 100);
    }.bind(this));
}, $.extend(AST.Element.prototype, {
    _id: null,
    _content: null,
    _tagName: null,
    _parent: null,
    _children: [],
    _attributes: {},
    _listeners: {},
    el: null,
    appendContent: !1,
    initElement: function() {
        return $.isEmpty(this.el) && (this.el = $("<" + this.getTagName() + ">")[0]), 
        this.el;
    },
    bindListeners: function() {
        $.each(this.getListeners(), this.bindListener.bind(this));
    },
    bindListener: function(event, listener) {
        $(this.el).on(event, listener.bind(this));
    },
    unbindListener: function(event, listener) {
        $(this.el).off(event, listener);
    },
    rebindListener: function(event, listener) {
        this.unbindListener(event, listener), this.bindListener(event, listener);
    },
    rebindListeners: function() {
        $.each(this.getListeners(), this.rebindListener.bind(this));
    },
    fireEvent: function(event, args, scope) {
        "function" == typeof this.getListener(event) && this.getListener(event).call(scope || this, args);
    },
    bubbleEvent: function(event, args, scope) {
        null !== this.getParent() && "object" == typeof this.getParent() && void 0 !== this.getParent().fireEvent && (this.getParent().fireEvent(event, args, scope), 
        this.getParent().bubbleEvent(event, args, scope));
    },
    cascadeEvent: function(event, args, scope) {
        null !== this.getChildren() && $.isArray(this.getChildren()) && $.each(this.getChildren(), function(index, child) {
            null !== child && "object" == typeof child && void 0 !== child.fireEvent && (child.fireEvent(event, args, scope), 
            child.cascadeEvent(event, args, scope));
        });
    },
    render: function() {
        return $(this.el).empty(), $.isEmpty(this.getId()) || this.el.setAttribute("id", this.getId()), 
        $.each(this._attributes, function(key, value) {
            this.el.setAttribute(key, value);
        }.bind(this)), $.each(this._children, function(i, child) {
            $(this.el).append(child.render());
        }.bind(this)), $.isEmpty(this.getContent()) || (this.appendContent ? $(this.el).append(this.getContent()) : $(this.el).prepend(this.getContent())), 
        this.el;
    },
    getTagName: function() {
        return this._tagName;
    },
    setTagName: function(val) {
        this._tagName = val;
    },
    getId: function() {
        return this._id;
    },
    setId: function(val) {
        this._id = val;
    },
    getParent: function() {
        return this._parent;
    },
    setParent: function(el) {
        this._parent = el;
    },
    getContent: function() {
        return this._content;
    },
    setContent: function(val) {
        this._content = val;
    },
    getChildren: function() {
        return this._children;
    },
    setChildren: function(children) {
        children instanceof AST.Element && (children = [ children ]), this._children = children, 
        $.each(this._children, function(i, child) {
            child.setParent(this);
        }.bind(this));
    },
    addChild: function(child) {
        this._children.push(child), child.setParent(this);
    },
    removeChild: function(child) {
        var i = this._children.indexOf(child);
        !1 !== i && (this._children.splice(i, 1), child.setParent(null));
    },
    getAttributes: function() {
        return this._attributes;
    },
    setAttributes: function(attributes) {
        this._attributes = attributes;
    },
    setAttribute: function(key, value) {
        this._attributes[key] = value;
    },
    getAttribute: function(key) {
        return this._attributes[key];
    },
    removeAttribute: function(key) {
        delete this._attributes[key];
    },
    getListeners: function() {
        return this._listeners;
    },
    setListeners: function(listeners) {
        this._listeners = listeners;
    },
    addListener: function(event, listener) {
        this._listeners[event] = listener, this.bindListener(event, listener);
    },
    getListener: function(event) {
        return this._listeners[event];
    },
    removeListener: function(event) {
        delete this._listeners[event];
    },
    getEl: function() {
        return this.el;
    },
    isAppendContent: function() {
        return this.appendContent;
    },
    setAppendContent: function(bool) {
        this.appendContent = bool;
    }
}), AST.ButtonBar = function(c) {
    c.tagName = "div", c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " btn-wrapper", 
    AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.ButtonBar.prototype, AST.Element.prototype), AST.PageActions = function(c) {
    c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " page-actions", 
    AST.ButtonBar.prototype.constructor.call(this, c);
}, $.extend(AST.PageActions.prototype, AST.ButtonBar.prototype), AST.form = AST.form || {}, 
AST.form.Form = function(c) {
    c.tagName = c.tagName || "form", c.attributes = c.attributes || {}, c.attributes["data-la-form"] = !0, 
    AST.Element.prototype.constructor.call(this, c), this.setMethod(c.method || this.getMethod()), 
    this.setAction(c.action || this.getAction()), this.setButtons(c.buttons || this.getButtons()), 
    this.setOrientation(c.orientation || this.getOrientation());
}, $.extend(AST.form.Form.prototype, AST.Element.prototype, {
    method: "GET",
    action: "",
    buttons: [],
    orientation: "vertical",
    formEl: null,
    wrapperEl: null,
    errorEl: null,
    render: function() {
        return this.setWrapperEl($("<div>")), this.getWrapperEl().attr("class", "form-wrapper " + this.getOrientation() + " " + this.getAttribute("class")), 
        this.setErrorEl(this.getErrorEl() || new AST.list.Errors().render()), this.getWrapperEl().append(this.getErrorEl()), 
        this.setFormEl(AST.Element.prototype.render.call(this)), this.getWrapperEl().append(this.getFormEl()), 
        this.resizeFilterFormElements(), $(this.getFormEl()).prepend(new AST.form.Submit({
            attributes: {
                tabindex: -1,
                style: "display: none",
                "aria-hidden": !0
            }
        }).render()), this.renderButtons(), this.getWrapperEl()[0];
    },
    renderButtons: function() {
        var btnWrapper;
        0 < this.buttons.length && (this.getWrapperEl().addClass("with-buttons"), 
        0 === (btnWrapper = $("#" + this.getId() + "-btn-wrapper")).length && (btnWrapper = new AST.ButtonBar({
            id: this.getId() + "-btn-wrapper"
        }).render(), this.getWrapperEl().append(btnWrapper), btnWrapper = $(btnWrapper)), 
        btnWrapper.empty(), $.each(this.buttons, function(i, button) {
            btnWrapper.append(button.render());
        }.bind(this)));
    },
    resetButtons: function() {
        var btnWrapper = $("#" + this.getId() + "-btn-wrapper");
        0 < btnWrapper.length && btnWrapper.empty();
    },
    resizeFilterFormElements: function() {
        var children;
        "horizontal" === this.getOrientation() && (children = $(" > form > .form-input-wrapper.horizontal", this.getWrapperEl())).css("width", 100 / children.length + "%");
    },
    handleErrors: function(errors) {
        $(this.getErrorEl()).empty(), $.each(errors, function(i, error) {
            error = error.render();
            $(error).prepend('<i class="fas fa-exclamation-square"></i> <span class="a11y-offscreen-text">error: </span>'), 
            $(this.getErrorEl()).append(error);
        }.bind(this));
    },
    getFormEl: function() {
        return this.formEl;
    },
    setFormEl: function(element) {
        this.formEl = element;
    },
    getWrapperEl: function() {
        return this.wrapperEl;
    },
    setWrapperEl: function(element) {
        this.wrapperEl = element;
    },
    getErrorEl: function() {
        return this.errorEl;
    },
    setErrorEl: function(element) {
        this.errorEl = element;
    },
    getMethod: function() {
        return this.method;
    },
    setMethod: function(val) {
        this.method = val;
    },
    getAction: function() {
        return this.action;
    },
    setAction: function(val) {
        this.action = val;
    },
    getButtons: function() {
        return this.buttons;
    },
    setButtons: function(buttons) {
        $.each(this.buttons, function(i, button) {
            button.setParent(null);
        }), this.buttons = buttons, $.each(this.buttons, function(i, button) {
            button.setParent(this);
        }.bind(this));
    },
    addButton: function(button) {
        button.setParent(this), this.buttons.push(button);
    },
    removeButton: function(button) {
        var i = this.buttons.indexOf(button);
        !1 !== i && (this.buttons.splice(i, 1), button.setParent(null));
    },
    getOrientation: function() {
        return this.orientation;
    },
    setOrientation: function(val) {
        this.orientation = val;
    }
}), AST.form.FilterForm = function(c) {
    AST.form.Form.prototype.constructor.call(this, c);
}, $.extend(AST.form.FilterForm.prototype, AST.form.Form.prototype, {
    render: function() {
        return AST.form.Form.prototype.render.call(this), this.getWrapperEl().addClass("filter"), 
        this.getWrapperEl().prepend(new AST.Element({
            tagName: "h2",
            content: "Filter",
            attributes: {
                style: "width: 100%"
            }
        }).render()), this.getWrapperEl()[0];
    }
}), AST.form.mixin = {
    CaptureClickEvent: {
        _disableFor: 500,
        captureClickEvent: !0,
        getDisableFor: function() {
            return this._disableFor;
        },
        setDisableFor: function(ms) {
            this._disableFor = ms;
        },
        isCaptureClickEvent: function() {
            return this.captureClickEvent;
        },
        setCaptureClickEvent: function(capture) {
            this.captureClickEvent = capture;
        },
        bindListener: function(event, listener) {
            var eventListener = ("click" === event && this.isCaptureClickEvent() ? function() {
                var el = $(this.getEl());
                el.prop("disabled", !0), listener.apply(this, arguments), setTimeout(el.prop.bind(el, "disabled", !1), this._disableFor);
            } : listener).bind(this);
            return $(this.el).on(event, eventListener), eventListener;
        },
        bindListeners: function() {
            var eventListeners = {};
            $.each(this.getListeners(), function(event, listener) {
                eventListeners[event] = this.bindListener(event, listener);
            }.bind(this)), this.unbindListeners = function() {
                $.each(eventListeners, function(event, listener) {
                    $(this.el).off(event, listener);
                }.bind(this));
            }.bind(this);
        },
        unbindListeners: function() {
            $.each(this.getListeners(), function(event, listener) {
                $(this.el).off(event, listener);
            }.bind(this));
        },
        rebindListeners: function() {
            this.unbindListeners(), this.bindListeners();
        }
    },
    renderWithLabel: {
        _label: "",
        _labelPosition: "left",
        labelEl: null,
        required: !1,
        initLabel: function(c) {
            this.setLabel((c = c || {}).label || this.getLabel()), this.setLabelPosition(c.labelPosition || this.getLabelPosition()), 
            this.setRequired(c.required || this.getRequired());
        },
        render: function() {
            var innerClass = this.getAttribute("class") || "";
            return this.wrapper = new AST.Element({
                tagName: "div",
                attributes: {
                    class: "form-input-wrapper label-position-" + this.getLabelPosition() + " " + innerClass
                }
            }).render(), this.labelEl = new AST.form.Label({
                attributes: {
                    for: this.getId()
                },
                content: this.getLabel()
            }).render(), this.el = AST.Element.prototype.render.call(this), this.required && ($(this.labelEl).append(' * <span class="a11y-offscreen-text">required</span>'), 
            this.el.setAttribute("required", !0), this.el.setAttribute("aria-required", !0)), 
            "right" === this.getLabelPosition() ? (this.wrapper.appendChild(this.el), 
            this.wrapper.appendChild(this.labelEl)) : (this.wrapper.appendChild(this.labelEl), 
            this.wrapper.appendChild(this.el)), this.el.addEventListener("focus", function(ev) {
                $(ev.currentTarget).parents(".form-input-wrapper").addClass("focused");
            }), this.el.addEventListener("blur", function(ev) {
                $(ev.currentTarget).parents(".form-input-wrapper").removeClass("focused");
            }), this.wrapper;
        },
        getLabel: function() {
            return this._label;
        },
        setLabel: function(val) {
            this._label = val;
        },
        getLabelPosition: function() {
            return this._labelPosition;
        },
        setLabelPosition: function(val) {
            this._labelPosition = val;
        },
        getRequired: function() {
            return this.required;
        },
        setRequired: function(val) {
            this.required = val;
        }
    },
    twoWayDataBinding: {
        _model: null,
        _modelProperty: null,
        getModel: function() {
            return this._model;
        },
        setModel: function(model) {
            this._model = model;
        },
        getModelProperty: function() {
            return this._modelProperty;
        },
        setModelProperty: function(property) {
            this._modelProperty = property;
        },
        initDataBinding: function(c) {
            var interval;
            this.setModel(c.model || this._model), this.setModelProperty(c.modelProperty || this._modelProperty), 
            null !== this.getModel() && null !== this.getModelProperty() && (this.addListener("change", function() {
                this.getModel().set(this.getModelProperty(), $(this.getEl()).val());
            }), AST.controller.addListener(this.getModel().getId() + "-" + this.getModelProperty(), function(value) {
                $(this.getEl()).val(value);
            }.bind(this), this, this.getEl()), this.setAttribute("value", this.getModel().get(this.getModelProperty())), 
            c = $.Deferred(), interval = setInterval(function(deferred) {
                1 === $("#" + $(this.getEl()).attr("id")).length && (deferred.resolve(), 
                clearInterval(interval));
            }.bind(this, c)), c.then(function() {
                $(this.getEl()).val(this.getModel().get(this.getModelProperty()));
            }.bind(this)), this.addListener("tab-activated", this.attachDataBindings));
        },
        attachDataBindings: function() {
            this.initDataBinding({}), $.each(this.getChildren(), this.attachDataBindings);
        },
        setAttribute: function(key, value) {
            AST.Element.prototype.setAttribute.call(this, key, value), "value" === key && $(this.getEl()).val(value);
        }
    },
    isCheckable: {
        _initChecked: !1,
        getInitChecked: function() {
            return this._initChecked;
        },
        setInitChecked: function(initChecked) {
            this._initChecked = initChecked;
        }
    }
}, AST.form.Label = function(c) {
    c.tagName = "label", AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.form.Label.prototype, AST.Element.prototype), AST.form.Input = function(c) {
    c.tagName = "input", c.attributes = c.attributes || {}, c.attributes.tabindex = c.attributes.tabindex || 0, 
    AST.Element.prototype.constructor.call(this, c), this.initLabel(c), this.initDataBinding(c);
}, $.extend(AST.form.Input.prototype, AST.Element.prototype, AST.form.mixin.renderWithLabel, AST.form.mixin.twoWayDataBinding), 
AST.form.Text = function(c) {
    AST.form.Input.prototype.constructor.call(this, c), this.setAttribute("type", "text");
}, $.extend(AST.form.Text.prototype, AST.form.Input.prototype), AST.form.Password = function(c) {
    AST.form.Input.prototype.constructor.call(this, c), this.setAttribute("type", "password");
}, $.extend(AST.form.Password.prototype, AST.form.Input.prototype), AST.form.Hidden = function(c) {
    c.tagName = "input", AST.Element.prototype.constructor.call(this, c), this.setAttribute("type", "hidden"), 
    this.setAttribute("value", c.value || "");
}, $.extend(AST.form.Hidden.prototype, AST.Element.prototype), AST.form.Button = function(c) {
    c.tagName = "button", c.attributes = c.attributes || {}, c.attributes.class = c.attributes.class || "", 
    c.attributes.tabindex = c.attributes.tabindex || 0, this.setCaptureClickEvent(void 0 !== c.captureClickEvent ? c.captureClickEvent : this.isCaptureClickEvent()), 
    AST.Element.prototype.constructor.call(this, c), this.setDisableFor(c.disableFor || this.getDisableFor());
}, $.extend(AST.form.Button.prototype, AST.Element.prototype, AST.form.mixin.CaptureClickEvent), 
AST.form.CancelButton = function(c) {
    c.content = c.content || "Cancel", c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " cancel", 
    AST.form.Button.prototype.constructor.call(this, c);
}, $.extend(AST.form.CancelButton.prototype, AST.form.Button.prototype), AST.form.Submit = function(c) {
    c.tagName = "input", c.attributes = c.attributes || {}, c.attributes.tabindex = c.attributes.tabindex || 0, 
    this.setCaptureClickEvent(void 0 !== c.captureClickEvent ? c.captureClickEvent : this.isCaptureClickEvent()), 
    AST.Element.prototype.constructor.call(this, c), this.setDisableFor(c.disableFor || this.getDisableFor()), 
    this.setAttribute("type", "submit");
}, $.extend(AST.form.Submit.prototype, AST.Element.prototype, AST.form.mixin.CaptureClickEvent, {
    render: function() {
        var el = AST.Element.prototype.render.call(this);
        return this.getAttribute("value") && $(el).attr("value", this.getAttribute("value")), 
        el;
    }
}), AST.form.MenuButton = function(c) {
    (c = c || {}).tagName = "button", c.content = c.content || "", c.attributes = c.attributes || {}, 
    c.attributes.class = (c.attributes.class || "") + " accMenu menu", c.attributes.tabindex = c.attributes.tabindex || 0, 
    c.attributes["data-internal"] = c.attributes["data-internal"] || "", c.attributes["data-src"] = c.attributes["data-src"] || "", 
    c.attributes["data-autoposition"] = c.attributes["data-autoposition"] || 5, 
    c.attributes["data-bootstrapped"] = "false", this.setCaptureClickEvent(void 0 !== c.captureClickEvent ? c.captureClickEvent : this.isCaptureClickEvent()), 
    AST.Element.prototype.constructor.call(this, c), this.setDisableFor(c.disableFor || this.getDisableFor()), 
    this.addListener("popupmenu", this.cascadeEvent.bind(this, "popupmenu")), this.addListener("tab-activated", this.rebootstrapMenuButtons.bind(this)), 
    this.rebindListeners();
}, $.extend(AST.form.MenuButton.prototype, AST.Element.prototype, AST.form.mixin.CaptureClickEvent, {
    render: function() {
        return $.isEmpty(this.getId()) || this.el.setAttribute("id", this.getId()), 
        $.isEmpty(this.getContent()) || (this.el.innerHTML = '<div class="inner-text">' + this.getContent() + "</div>"), 
        $(this.el).append(' <i class="fas fa-caret-down"></i>'), $.each(this._attributes, function(key, value) {
            this.el.setAttribute(key, value);
        }.bind(this)), this.hiddenMenu = new AST.Element({
            tagName: "ol",
            attributes: {
                class: "menu hidden",
                "data-autoposition": this._attributes["data-autoposition"]
            }
        }), $.each(this._children, function(i, child) {
            child instanceof AST.form.MenuButtonItem && this.hiddenMenu.addChild(child);
        }.bind(this)), $("#menus-container").append(this.hiddenMenu.render()), this.el.setAttribute("data-bootstrapped", "false"), 
        this.el.setAttribute("data-internal", "menus-container"), this.el.setAttribute("data-src", this.hiddenMenu.getId()), 
        this.bootstrapMenuButtons(), this.el;
    },
    bootstrapMenuButtons: function() {
        setTimeout(function() {
            AST.Util.bootstrapMenus(), this.setFocusTargetAfterMenuItemClick();
        }.bind(this), 50);
    },
    setFocusTargetAfterMenuItemClick: function() {
        var checkIfAccDcObjectInitialized = setInterval(function() {
            var menuButton = $ACC.reg[this.el.dataset.src];
            menuButton && (clearInterval(checkIfAccDcObjectInitialized), menuButton.runAfter = function(dc) {
                window.runAfter(dc), $.each(this._children, function(menuButton, i, child) {
                    child instanceof AST.form.MenuButtonItem && !child.getFocusMenuButtonOnClick() && ($ACC.unbind(child.getEl(), "menulink"), 
                    $ACC.bind(child.getEl(), "menulink", function(menuButton, menuItemElement, ev) {
                        if (menuButton.fn.bypass = !0, menuButton.handler && "function" == typeof menuButton.handler) return menuButton.handler.apply(menuItemElement, [ ev, menuButton ]);
                    }.bind(this, menuButton, child.getEl())));
                }.bind(this, menuButton));
            }.bind(this));
        }.bind(this), 100);
    },
    rebootstrapMenuButtons: function() {}
}), AST.form.MenuButtonItem = function(c) {
    (c = c || {}).tagName = "a", c.attributes = c.attributes || {}, c.attributes.href = c.attributes.href || "#", 
    c.attributes.class = (c.attributes.class || "") + " link", this.setCaptureClickEvent(void 0 !== c.captureClickEvent ? c.captureClickEvent : this.isCaptureClickEvent()), 
    AST.Element.prototype.constructor.call(this, c), this.setDisableFor(c.disableFor || this.getDisableFor()), 
    this.setFocusMenuButtonOnClick(void 0 !== c.focusMenuButtonOnClick ? c.focusMenuButtonOnClick : this.getFocusMenuButtonOnClick()), 
    this.addListener("popupmenu", function() {
        setTimeout(this.rebindListeners.bind(this), 100);
    }.bind(this));
}, $.extend(AST.form.MenuButtonItem.prototype, AST.Element.prototype, AST.form.mixin.CaptureClickEvent, {
    _focusMenuButtonOnClick: !0,
    render: function() {
        return this.listItemWrapper = new AST.Element({
            tagName: "li"
        }).render(), this.el = AST.Element.prototype.render.call(this), this.el.addEventListener("mouseover", function(e) {
            this.focus();
        }), this.listItemWrapper.appendChild(this.el), this.listItemWrapper;
    },
    getFocusMenuButtonOnClick: function() {
        return this._focusMenuButtonOnClick;
    },
    setFocusMenuButtonOnClick: function(val) {
        this._focusMenuButtonOnClick = val;
    }
}), AST.form.Option = function(c) {
    c.tagName = "option", AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.form.Option.prototype, AST.Element.prototype), AST.form.Select = function(c) {
    c.tagName = "select", c.attributes = c.attributes || {}, c.attributes.tabindex = c.attributes.tabindex || 0, 
    this.setValue(c.value || this._value), this.setOptions(c.options || []), this.setDataMethod(c.dataMethod || this._dataMethod), 
    this.setDataUrl(c.dataUrl || this._dataUrl), this.setParams(c.params || this._params), 
    this.setAutoload(c.autoload || this._autoload), this.setOptionKey(c.optionKey || this._optionKey), 
    this.setOptionRenderer(c.optionRenderer || this._optionRenderer), this.setShowPlaceholderOption(void 0 !== c.showPlaceholderOption ? c.showPlaceholderOption : this._showPlaceholderOption), 
    this.setPlaceholderOption(c.placeHolderOption || new AST.form.Option({
        attributes: {
            value: -1
        },
        content: "Select an option..."
    })), this.setDisableNegativeOptions(c.disableNegativeOptions || this._disableNegativeOptions), 
    AST.Element.prototype.constructor.call(this, c), this.initLabel(c), this.initDataBinding(c);
}, $.extend(AST.form.Select.prototype, AST.Element.prototype, AST.form.mixin.renderWithLabel, AST.form.mixin.twoWayDataBinding, {
    _value: null,
    _params: {},
    _dataMethod: "POST",
    _dataUrl: null,
    _autoload: !1,
    _optionKey: null,
    _showPlaceholderOption: !0,
    _disableNegativeOptions: !1,
    _optionRenderer: function(value) {
        return value;
    },
    load: function() {
        if (!$.isEmpty(this.getDataUrl())) {
            var ajaxCallback = function(data) {
                this.setOptions(data.result), this._renderData();
            }.bind(this);
            switch (this.getDataMethod()) {
              case "GET":
                AST.controller.ajaxGet(AST.Controller.WITH_TOKEN, this.getDataUrl(), this.getParams(), ajaxCallback);
                break;

              case "POST":
                AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, this.getDataUrl(), this.getParams(), ajaxCallback);
            }
        }
    },
    render: function() {
        return AST.form.mixin.renderWithLabel.render.call(this), $(this.el).wrap('<div class="select-wrapper ' + (this.getAttribute("class") || "") + '" />'), 
        $(this.el).parent(".select-wrapper").append('<i class="fas fa-caret-down"></i>'), 
        $.isEmpty(this.getDataUrl()) ? this._renderData() : !0 === this.getAutoload() && this.load(), 
        this.wrapper;
    },
    _renderData: function() {
        $(this.el).empty(), this.getShowPlaceholderOption() && $(this.el).append(this.getPlaceholderOption().render()), 
        $.each(this.getOptions(), function(key, value) {
            var attributes = {
                value: key = null !== this.getOptionKey() ? value[this.getOptionKey()] || key : key
            }, attributes = (key.toString() === this.getValue() + "" && (attributes.selected = !0), 
            new AST.form.Option({
                attributes: attributes,
                content: this._optionRenderer(value)
            }));
            this.getDisableNegativeOptions() && key < 0 && attributes.setAttribute("disabled", "true"), 
            $(this.el).append(attributes.render());
        }.bind(this));
    },
    initDataBinding: function(c) {
        this.setModel(c.model || this._model), this.setModelProperty(c.modelProperty || this._modelProperty), 
        null !== this.getModel() && null !== this.getModelProperty() && (this.addListener("change", function() {
            this.getModel().set(this.getModelProperty(), $(this.getEl()).val());
        }), AST.controller.addListener(this.getModel().getId() + "-" + this.getModelProperty(), function(value) {
            $(this.getEl()).val(value);
        }.bind(this), this, this.getEl()), void 0 !== (c = this.getModel().get(this.getModelProperty())) && this.setValue(c));
    },
    getOptionKey: function() {
        return this._optionKey;
    },
    setOptionKey: function(val) {
        this._optionKey = val;
    },
    getOptions: function() {
        return this._options;
    },
    setOptions: function(options) {
        this._options = options;
    },
    setOption: function(key, value) {
        this._options[key] = value;
    },
    getOption: function(key) {
        return this._options[key];
    },
    removeOption: function(key) {
        delete this._options[key];
    },
    getValue: function() {
        return this._value;
    },
    setValue: function(val) {
        this._value = val, $(this.getEl()).val(val);
    },
    getDataMethod: function() {
        return this._dataMethod;
    },
    setDataMethod: function(val) {
        this._dataMethod = val;
    },
    getDataUrl: function() {
        return this._dataUrl;
    },
    setDataUrl: function(url) {
        this._dataUrl = url;
    },
    getAutoload: function() {
        return this._autoload;
    },
    setAutoload: function(val) {
        this._autoload = val;
    },
    getParams: function() {
        return this._params;
    },
    setParams: function(params) {
        this._params = params;
    },
    getParam: function(key) {
        return this._params[key];
    },
    setParam: function(key, value) {
        this._params[key] = value;
    },
    getOptionRenderer: function() {
        return this._optionRenderer;
    },
    setOptionRenderer: function(func) {
        this._optionRenderer = func;
    },
    getShowPlaceholderOption: function() {
        return this._showPlaceholderOption;
    },
    setShowPlaceholderOption: function(showPlaceholderOption) {
        this._showPlaceholderOption = showPlaceholderOption;
    },
    getPlaceholderOption: function() {
        return this._placeholderOption;
    },
    setPlaceholderOption: function(placeholderOption) {
        this._placeholderOption = placeholderOption;
    },
    getDisableNegativeOptions: function() {
        return this._disableNegativeOptions;
    },
    setDisableNegativeOptions: function(disableNegativeOptions) {
        this._disableNegativeOptions = disableNegativeOptions;
    }
}), AST.form.ComboBox = function(c) {
    AST.form.Select.prototype.constructor.call(this, c), this.setAttribute("size", 10), 
    this.addListener("tab-activated", function() {
        $(this.el).combobox();
    }.bind(this));
}, $.extend(AST.form.ComboBox.prototype, AST.form.Select.prototype, {
    render: function() {
        return AST.form.mixin.renderWithLabel.render.call(this), $(this.el).wrap('<div class="combobox-wrapper ' + (this.getAttribute("class") || "") + '" />'), 
        $(this.el).combobox(), $(this.labelEl).attr("for", $(this.wrapper).find("input").attr("id")), 
        $.isEmpty(this.getDataUrl()) ? this._renderData() : !0 === this.getAutoload() && this.load(), 
        this.wrapper;
    },
    _renderData: function() {
        AST.form.Select.prototype._renderData.call(this), $(this.el).combobox("destroy"), 
        $(this.el).combobox(), this.required && $(this.wrapper).find("input").attr("required", "true").attr("aria-required", "true");
    }
}), AST.form.TextArea = function(c) {
    c.tagName = "textarea", c.attributes = c.attributes || {}, c.attributes.tabindex = c.attributes.tabindex || 0, 
    AST.Element.prototype.constructor.call(this, c), this.initLabel(c), this.initDataBinding(c);
}, $.extend(AST.form.TextArea.prototype, AST.Element.prototype, AST.form.mixin.renderWithLabel, AST.form.mixin.twoWayDataBinding, {
    render: function() {
        return AST.form.mixin.renderWithLabel.render.call(this), $(this.el).each(function() {
            this.setAttribute("style", "height:" + this.scrollHeight + "px;");
        }).on("input", function() {
            this.style.height = "auto", this.style.height = this.scrollHeight + "px";
        }), this.wrapper;
    }
}), AST.form.DisplayText = function(c) {
    c.tagName = "span", c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " display-text", 
    AST.Element.prototype.constructor.call(this, c), this.initLabel(c), this.initDataBinding(c);
}, $.extend(AST.form.DisplayText.prototype, AST.Element.prototype, AST.form.mixin.renderWithLabel, AST.form.mixin.twoWayDataBinding, {
    render: function() {
        return AST.form.mixin.renderWithLabel.render.call(this), this.wrapper;
    },
    setAttribute: function(key, value) {
        AST.Element.prototype.setAttribute.call(this, key, value), "value" === key && $(this.getEl()).html(value);
    }
}), AST.form.Fieldset = function(c) {
    (c = c || {}).tagName = "fieldset", this.setLegend(c.legend || this._legend), 
    AST.Element.prototype.constructor.call(this, c), this.getChildren().unshift(new AST.Element({
        tagName: "legend",
        content: this.getLegend()
    }));
}, $.extend(AST.form.Fieldset.prototype, AST.Element.prototype, {
    _legend: null,
    getLegend: function() {
        return this._legend;
    },
    setLegend: function(val) {
        this._legend = val;
    }
}), AST.form.RadioGroup = function(c) {
    (c = c || {}).tagName = "div", c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " radiogroup", 
    AST.Element.prototype.constructor.call(this, c), this.initLabel(c);
}, $.extend(AST.form.RadioGroup.prototype, AST.Element.prototype, AST.form.mixin.renderWithLabel, {
    render: function() {
        return $.isEmpty(this.getId()) || this.el.setAttribute("id", this.getId()), 
        $.each(this._attributes, function(key, value) {
            this.el.setAttribute(key, value);
        }.bind(this)), $.each(this._children, function(i, child) {
            child.attributes = child.attributes || {}, child.attributes.name = this.getId(), 
            $(this.el).append(child.render());
        }.bind(this)), $.isEmpty(this.getContent()) || (this.appendContent ? $(this.el).append(this.getContent()) : $(this.el).prepend(this.getContent())), 
        this.wrapper = new AST.Element({
            tagName: "div",
            attributes: {
                class: "form-input-wrapper group label-position-" + this.getLabelPosition()
            }
        }).render(), this.labelEl = new AST.form.Label({
            attributes: {
                for: this.getId()
            },
            content: this.getLabel()
        }).render(), this.wrapper.appendChild(this.labelEl), this.wrapper.appendChild(this.el), 
        this.wrapper;
    }
}), AST.form.Radio = function(c) {
    AST.form.Input.prototype.constructor.call(this, c), this.setLabelPosition("right"), 
    this.setAttribute("type", "radio"), this.setAttribute("class", this.getAttribute("class") + " radio force-right");
}, $.extend(AST.form.Radio.prototype, AST.form.Input.prototype, AST.form.mixin.renderWithLabel, AST.form.mixin.twoWayDataBinding, {
    initDataBinding: function(c) {
        this.setModel(c.model || this._model), this.setModelProperty(c.modelProperty || this._modelProperty), 
        null !== this.getModel() && null !== this.getModelProperty() && (this.addListener("click", function() {
            this.getModel().set(this.getModelProperty(), $(this.getEl()).val());
        }), AST.controller.addListener(this.getModel().getId() + "-" + this.getModelProperty(), function(value) {
            $("[name=" + $(this.getEl()).attr("name") + "]").each(function(i, el) {
                $(el).val() === this.value ? $(el).attr("checked", !0) : $(el).attr("checked", !1);
            });
        }.bind(this), this, this.getEl()), this.getAttribute("value") === this.getModel().get(this.getModelProperty()) && this.setAttribute("checked", !0));
    },
    _initChecked: !1,
    getOnState: function() {
        return new AST.Element({
            tagName: "div",
            attributes: {
                class: "fa-layers fa-fw on"
            },
            children: [ new AST.Element({
                tagName: "i",
                attributes: {
                    class: "far fa-circle"
                }
            }), new AST.Element({
                tagName: "i",
                attributes: {
                    class: "fas fa-circle",
                    "data-fa-transform": "shrink-6"
                }
            }) ]
        });
    },
    getOffState: function() {
        return new AST.Element({
            tagName: "div",
            attributes: {
                class: "fa-layers fa-fw off"
            },
            children: [ new AST.Element({
                tagName: "i",
                attributes: {
                    class: "far fa-circle"
                }
            }) ]
        });
    },
    render: function() {
        AST.form.mixin.renderWithLabel.render.call(this), $(this.el).wrap('<div class="checkbox-wrapper radio" />');
        var checkboxWrapper = $(this.el).parent(".checkbox-wrapper.radio");
        return checkboxWrapper.append(this.getOnState().render()), checkboxWrapper.append(this.getOffState().render()), 
        this.wrapper;
    }
}), AST.form.CheckboxGroup = function(c) {
    (c = c || {}).tagName = "div", c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " checkboxgroup", 
    AST.Element.prototype.constructor.call(this, c), this.initLabel(c);
}, $.extend(AST.form.CheckboxGroup.prototype, AST.form.RadioGroup.prototype), AST.form.Checkbox = function(c) {
    (c = c || {}).attributes = c.attributes || {}, this.setInitChecked(void 0 !== c.initChecked ? c.initChecked : this._initChecked), 
    this.getInitChecked() && (c.attributes.checked = !0), AST.form.Input.prototype.constructor.call(this, c), 
    this.setLabelPosition(c.labelPosition || "right"), this.setAttribute("type", "checkbox"), 
    this.setAttribute("class", this.getAttribute("class") + " checkbox force-right");
}, $.extend(AST.form.Checkbox.prototype, AST.form.Input.prototype, AST.form.mixin.renderWithLabel, AST.form.mixin.twoWayDataBinding, AST.form.mixin.isCheckable, {
    _initChecked: !1,
    initDataBinding: function(c) {
        this.setModel(c.model || this._model), this.setModelProperty(c.modelProperty || this._modelProperty), 
        null !== this.getModel() && null !== this.getModelProperty() && (this.addListener("click", function() {
            this.getModel().set(this.getModelProperty(), $(this.getEl()).prop("checked"));
        }), AST.controller.addListener(this.getModel().getId() + "-" + this.getModelProperty(), function(value) {
            value ? $(this.getEl()).prop("checked", !0) : $(this.getEl()).prop("checked", !1);
        }.bind(this), this, this.getEl()), this.getModel().get(this.getModelProperty()) ? $(this.getEl()).prop("checked", !0) : !1 === this.getModel().get(this.getModelProperty()) ? $(this.getEl()).prop("checked", !1) : this.getModel().set(this.getModelProperty(), this.getInitChecked()));
    },
    getOnState: function() {
        return new AST.Element({
            tagName: "div",
            attributes: {
                class: "fa-layers fa-fw on"
            },
            children: [ new AST.Element({
                tagName: "i",
                attributes: {
                    class: "fas fa-check-square"
                }
            }) ]
        });
    },
    getOffState: function() {
        return new AST.Element({
            tagName: "div",
            attributes: {
                class: "fa-layers fa-fw off"
            },
            children: [ new AST.Element({
                tagName: "i",
                attributes: {
                    class: "far fa-square"
                }
            }) ]
        });
    },
    render: function() {
        AST.form.mixin.renderWithLabel.render.call(this), $(this.el).wrap('<div class="checkbox-wrapper" />');
        var checkboxWrapper = $(this.el).parent(".checkbox-wrapper");
        return checkboxWrapper.append(this.getOnState().render()), checkboxWrapper.append(this.getOffState().render()), 
        this.wrapper;
    }
}), AST.form.Toggle = function(c) {
    (c = c || {}).attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " toggle", 
    AST.form.Checkbox.prototype.constructor.call(this, c), this.setOnLabel(c.onLabel || this.getOnLabel()), 
    this.setOffLabel(c.offLabel || this.getOffLabel());
}, $.extend(AST.form.Toggle.prototype, AST.form.Checkbox.prototype, {
    _onLabel: "",
    _offLabel: "",
    getOnLabel: function() {
        return this._onLabel;
    },
    setOnLabel: function(val) {
        this._onLabel = val;
    },
    getOffLabel: function() {
        return this._offLabel;
    },
    setOffLabel: function(val) {
        this._offLabel = val;
    },
    getOnState: function() {
        return new AST.Element({
            tagName: "div",
            attributes: {
                class: "on"
            },
            children: [ new AST.Element({
                tagName: "span",
                content: this.getOnLabel()
            }) ]
        });
    },
    getOffState: function() {
        return new AST.Element({
            tagName: "div",
            attributes: {
                class: "off"
            },
            children: [ new AST.Element({
                tagName: "span",
                content: this.getOffLabel()
            }) ]
        });
    },
    render: function() {
        AST.form.mixin.renderWithLabel.render.call(this), $(this.el).wrap('<div class="toggle-wrapper" />');
        var checkboxWrapper = $(this.el).parent(".toggle-wrapper");
        return checkboxWrapper.append(this.getOnState().render()), checkboxWrapper.append(this.getOffState().render()), 
        this.wrapper;
    }
}), AST.alchemy = {
    isEnabled: function(orgID) {
        return !1 !== AST.controller.isFeatureEnabled("alchemy") && !0 === AST.controller.isFeatureEnabled("alchemy")[parseInt(orgID)];
    },
    getFixTypeDescription: function(fixType) {
        var type = "Unknown";
        switch (fixType) {
          case AST.alchemy.Fix.TYPES.Attribute:
            type = "Attribute: The fix adds, replaces or removes an attribute value as specified.";
            break;

          case AST.alchemy.Fix.TYPES.Tag:
            type = "Tag: The fix creates an element of the specified type, sets its innerHTML value, and places it in the body of the target element.";
            break;

          case AST.alchemy.Fix.TYPES.InnerHTML:
            type = "InnerHTML: The fix modifies the inner contents of a target element.";
            break;

          case AST.alchemy.Fix.TYPES.HTMLTagAttribute:
            type = "HTML Tag Attribute: The fix adds an attribute value as specified if it does not already exist.";
        }
        return type;
    }
}, AST.alchemy.fixes = {}, AST.alchemy.Fix = function(data) {
    AST.Model.prototype.constructor.call(this, data);
}, AST.alchemy.Fix.TYPES = {
    Attribute: 1,
    Tag: 2,
    InnerHTML: 3,
    HTMLTagAttribute: 4,
    exists: function(val) {
        for (var type in AST.alchemy.Fix.TYPES) if (AST.alchemy.Fix.TYPES.hasOwnProperty(type) && AST.alchemy.Fix.TYPES[type] === val) return !0;
        return !1;
    }
}, $.extend(AST.alchemy.Fix.prototype, AST.Model.prototype, {
    getType: function() {
        return this.get("type");
    },
    setType: function(type) {
        this.set("type", type);
    },
    getFix: function() {
        return this.get("fix");
    },
    setFix: function(fix) {
        this.set("fix", fix);
    }
}), AST.alchemy.fixes.Factory = {
    create: function(fix, instanceModel, readOnly) {
        switch (fix.getType()) {
          case AST.alchemy.Fix.TYPES.Attribute:
            return new AST.alchemy.fixes.Attribute(fix, instanceModel, readOnly);

          case AST.alchemy.Fix.TYPES.Tag:
            return new AST.alchemy.fixes.Tag(fix, instanceModel, readOnly);

          case AST.alchemy.Fix.TYPES.InnerHTML:
            return new AST.alchemy.fixes.InnerHTML(fix, instanceModel, readOnly);

          case AST.alchemy.Fix.TYPES.HTMLTagAttribute:
            return new AST.alchemy.fixes.HTMLTagAttribute(fix, instanceModel, readOnly);

          default:
            return new AST.Element({
                tagName: "p",
                content: '<i class="fas fa-exclamation-triangle"></i> This instance cannot be fixed automatically by Alchemy.'
            });
        }
    }
}, AST.alchemy.fixes.Attribute = function(fix, fixModel, readOnly) {
    var c = {
        tagName: "div"
    };
    c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " fix attribute", 
    AST.Element.prototype.constructor.call(this, c), this.readOnly = readOnly, this.setModel(fixModel), 
    this.setChildren(this.getFields(fix));
}, $.extend(AST.alchemy.fixes.Attribute.prototype, AST.Element.prototype, AST.hasDataModelMixin, {
    getFields: function(fix) {
        var attribute, fields = [], attributesToFix = fix.getFix();
        for (attribute in attributesToFix) attributesToFix.hasOwnProperty(attribute) && (!1 === attributesToFix[attribute] ? fields.push(new AST.form.DisplayText({
            label: "<code>" + attribute + "</code>",
            content: "will be removed"
        })) : null !== attributesToFix[attribute] || !0 === this.readOnly ? fields.push(new AST.form.DisplayText({
            label: "<code>" + attribute + "</code>",
            content: attributesToFix[attribute]
        })) : fields.push(new AST.form.Text({
            label: "<code>" + attribute + "</code>",
            value: attributesToFix[attribute],
            model: this.getModel(),
            modelProperty: attribute
        })));
        return fields;
    }
}), AST.alchemy.fixes.HTMLTagAttribute = function(fix, fixModel, readOnly) {
    AST.alchemy.fixes.Attribute.prototype.constructor.call(this, fix, fixModel, readOnly);
}, $.extend(AST.alchemy.fixes.HTMLTagAttribute.prototype, AST.alchemy.fixes.Attribute.prototype, {}), 
AST.alchemy.fixes.Tag = function(fix, fixModel, readOnly) {
    var c = {
        tagName: "div"
    };
    c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " fix tag", 
    AST.Element.prototype.constructor.call(this, c), this.readOnly = readOnly, this.setModel(fixModel), 
    this.setChildren(this.getFields(fix));
}, $.extend(AST.alchemy.fixes.Tag.prototype, AST.Element.prototype, AST.hasDataModelMixin, {
    getFields: function(fix) {
        var selector = fix.getFix().targetCssSelector, tag = fix.getFix().create, fix = (fix.getFix().innerHTML, 
        [ new AST.form.DisplayText({
            label: "Affected Elements",
            content: '<code>$("' + selector + '")</code>'
        }), new AST.form.DisplayText({
            label: "Injected Tag",
            content: "<code>&lt;" + tag + "&gt;</code>"
        }) ]);
        return !0 === this.readOnly ? fix.push(new AST.form.DisplayText({
            label: "Tag Content",
            labelPosition: "top",
            content: this.getModel().get("innerHTML")
        })) : fix.push(new AST.form.TextArea({
            label: "Tag Content",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "innerHTML"
        })), fix;
    }
}), AST.alchemy.fixes.InnerHTML = function(fix, fixModel, readOnly) {
    var c = {
        tagName: "div"
    };
    c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " fix innerHTML", 
    AST.Element.prototype.constructor.call(this, c), this.readOnly = readOnly, this.setModel(fixModel), 
    this.setChildren(this.getFields(fix));
}, $.extend(AST.alchemy.fixes.InnerHTML.prototype, AST.Element.prototype, AST.hasDataModelMixin, {
    getFields: function(fix) {
        return !0 === this.readOnly ? [ new AST.form.DisplayText({
            label: "Tag Content",
            labelPosition: "top",
            content: this.getModel().get("innerHTML")
        }) ] : [ new AST.form.TextArea({
            label: "Tag Content",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "innerHTML"
        }) ];
    }
}), AST.datagrid = {}, AST.datagrid.Column = function(c) {
    c.tagName = "th", this.setDataIndex(c.dataIndex || this._dataIndex), this.setCellType(c.cellType || this._cellType), 
    this.setRenderer(c.renderer || this._renderer.bind(this)), AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.datagrid.Column.prototype, AST.Element.prototype, {
    _dataIndex: null,
    _cellType: "td",
    _renderer: function(rec) {
        for (var value = rec, indexParts = this.getDataIndex().split("."), i = 0; i < indexParts.length; i++) value = value[indexParts[i]];
        return value;
    },
    getDataIndex: function() {
        return this._dataIndex;
    },
    setDataIndex: function(val) {
        this._dataIndex = val;
    },
    getCellType: function() {
        return this._cellType;
    },
    setCellType: function(type) {
        this._cellType = type;
    },
    getRenderer: function() {
        return this._renderer;
    },
    setRenderer: function(func) {
        this._renderer = func;
    }
}), AST.datagrid.mixin = {
    renderWithActionBar: {
        _actions: [],
        initActionBar: function(c) {
            this.setActions((c = c || {})._actions || []);
        },
        render: function() {
            return AST.controller.addListener("handlesearch", this.handleSearch, this, this), 
            this.wrapper = new AST.Element({
                tagName: "div",
                attributes: {
                    class: "grid-wrapper"
                }
            }).render(), this.wrapper.appendChild(new AST.PageActions({
                children: this.getActions()
            }).render()), this.wrapper;
        },
        getActions: function() {
            return this._actions;
        },
        setActions: function(actions) {
            this._actions = actions;
        }
    },
    renderWithPagination: {
        _pageLength: 25,
        _currentPage: 1,
        _recordsTotal: 0,
        _paginationBars: [],
        _paginationEnabled: !1,
        initPagination: function(c) {
            !0 === (c = c || {}).enabled && (this.setPaginationEnabled(!0), this.setPageLength(c.pageLength || this.getPageLength()), 
            this.setCurrentPage(c.currentPage || this.getCurrentPage()), this.updateParamsForPagination(), 
            this.updateAjaxCallback(), this.paginationModel = new AST.Model({
                currentPage: AST.Storage.get("current-page-" + this.getId(), 1)
            }), this.addPageChangeHandler());
        },
        setPageMenu: function(currentPage) {
            for (var paginationBars = this.getPaginationBars(), i = 0; i < paginationBars.length; i++) paginationBars[i].getPaginationNavigation().getPaginationModel().set("currentPage", currentPage);
        },
        addPageChangeHandler: function() {
            AST.controller.addListener(this.paginationModel.getId() + "-currentPage", function(msg) {
                this.setCurrentPage(msg), this.updateParamsForPagination(), this.load();
            }.bind(this), this, this.getEl());
        },
        updateAjaxCallback: function() {
            this.ajaxCallback = function(data) {
                data.paginationSupported ? (this.insertPaginationBars(), this.setRecords(data.result), 
                this.updatePagination(data), this._renderData()) : AST.datagrid.Simple.prototype.ajaxCallback.call(this, data);
            };
        },
        updatePagination: function(responseData) {
            if (this.setCurrentPage(responseData.page / this.getPageLength() + 1 || 1), 
            this.setRecordsTotal(responseData.recordsTotal || this.getRecords.length), 
            this._paginationBars) {
                for (var paginationBars = this.getPaginationBars(), i = 0; i < paginationBars.length; i++) {
                    var paginationBar = paginationBars[i];
                    paginationBar.getPaginationNavigation().update(this.getCurrentPage(), this.calculateNumberOfPages()), 
                    paginationBar.getPaginationDescription().update(this.getStartingRecordIndex(), this.getEndingRecordIndex(), this.getRecordsTotal());
                }
                $("#table-live-region").text("Displaying " + (parseInt(this.getStartingRecordIndex()) + 1) + " to " + this.getEndingRecordIndex() + " of " + this.getRecordsTotal() + " records");
            }
        },
        updateParamsForPagination: function() {
            this.setParam("paginationSupported", !0), this.setParam("length", this.getPageLength()), 
            this.setParam("start", this.getStartingRecordIndex()), this.setParam("order", [ {
                column: "0",
                sortDir: "asc"
            } ]);
        },
        insertPaginationBars: function() {
            var topPaginationBar, bottomPaginationBar;
            0 === this.getPaginationBars().length && ((topPaginationBar = this.createPaginationBar(!0)).setAttribute("class", "pagination top"), 
            (bottomPaginationBar = this.createPaginationBar()).setAttribute("class", "pagination bottom"), 
            this.setPaginationBars([ topPaginationBar, bottomPaginationBar ]), $(topPaginationBar.render()).insertBefore($(this.getEl())), 
            $(bottomPaginationBar.render()).insertAfter($(this.getEl())));
        },
        createPaginationBar: function() {
            var paginationBar = new AST.pagination.PaginationBar({
                paginationModel: this.paginationModel
            });
            return paginationBar.setAttribute("aria-controls", this.getId()), paginationBar;
        },
        getStartingRecordIndex: function() {
            return this.getPageLength() * (this.getCurrentPage() - 1);
        },
        getEndingRecordIndex: function() {
            return this.getStartingRecordIndex() + Math.min(this.getPageLength(), this.getRecords().length);
        },
        calculateNumberOfPages: function() {
            return 0 === this.getRecordsTotal() ? 1 : Math.ceil(this.getRecordsTotal() / this.getPageLength());
        },
        isPaginationEnabled: function() {
            return this._paginationEnabled;
        },
        setPaginationEnabled: function(enabled) {
            this._paginationEnabled = enabled;
        },
        getRecordsTotal: function() {
            return this._recordsTotal;
        },
        setRecordsTotal: function(recordsTotal) {
            this._recordsTotal = recordsTotal;
        },
        getPageLength: function() {
            return this._pageLength;
        },
        setPageLength: function(pageLength) {
            this._pageLength = pageLength;
        },
        getCurrentPage: function() {
            return this._currentPage;
        },
        setCurrentPage: function(currentPage) {
            this._currentPage = currentPage;
        },
        getPaginationBars: function() {
            return this._paginationBars;
        },
        setPaginationBars: function(paginationBars) {
            this._paginationBars = paginationBars;
        }
    }
}, AST.datagrid.Simple = function(c) {
    c.tagName = "table", this.setColumns(c.columns || this._columns), this.setRecords(c.records || this._records), 
    this.setDataUrl(c.dataUrl || this._dataUrl), this.setParams(c.params || this._params), 
    this.setAutoload(c.autoload || this._autoload), this.setDataMapping(c.dataMapping || this._dataMapping), 
    this.setEmptyText(c.emptyText || this.emptyText), this.setRowRenderer(c.rowRenderer || this._rowRenderer), 
    this.setActions(c.actions || this._actions), this.setDataMethod(c.dataMethod || this._dataMethod), 
    AST.Element.prototype.constructor.call(this, c), this.initActionBar(this), this.initPagination(c.pagination);
}, $.extend(AST.datagrid.Simple.prototype, AST.Element.prototype, AST.datagrid.mixin.renderWithActionBar, AST.datagrid.mixin.renderWithPagination, {
    _columns: [],
    _records: [],
    _params: {},
    _dataUrl: null,
    _autoload: !1,
    _actions: [],
    _searchFormId: null,
    _dataMapping: function(data) {
        return data;
    },
    _rowRenderer: function(rec) {
        return $("<tr>");
    },
    _dataMethod: "POST",
    emptyText: "No records found.",
    load: function() {
        if ($.isEmpty(this.getDataUrl())) this._renderData(); else switch (this._renderLoadingMessage(), 
        this.getDataMethod()) {
          case "GET":
            AST.controller.ajaxGet(AST.Controller.WITH_TOKEN, this.getDataUrl(), this.getParams(), this.ajaxCallback.bind(this));
            break;

          case "POST":
            AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, this.getDataUrl(), this.getParams(), this.ajaxCallback.bind(this));
        }
    },
    ajaxCallback: function(data) {
        this.setRecords(data.result), this._renderData();
    },
    render: function() {
        this.el = AST.Element.prototype.render.call(this), $(this.el).wrap('<div class="table-wrapper" />');
        var tableWrapper = $(this.el).parent(".table-wrapper");
        return this._renderTableHeaders(), $.isEmpty(this.getDataUrl()) ? this._renderData() : !0 === this.getAutoload() && this.load(), 
        this.wrapper = AST.datagrid.mixin.renderWithActionBar.render.call(this), 
        this.wrapper.appendChild(tableWrapper[0]), this.wrapper;
    },
    _renderLoadingMessage: function() {
        var el = $(this.el), tbody = $("tbody", el);
        $.isEmpty(tbody) ? (tbody = $("<tbody>"), el.append(tbody)) : tbody.empty(), 
        tbody.append('<tr><td class="no-records" colspan="' + this.getColumns().length + '"><i class="far fa-spinner fa-pulse"></i> Loading...</td></tr>');
    },
    _renderTableHeaders: function() {
        var el = $(this.el), thead = $("thead", el), headerRow = $("<tr>");
        return $.each(this.getColumns(), function(i, column) {
            headerRow.append(column.render());
        }.bind(this)), $.isEmpty(thead) ? el.append($("<thead>").append(headerRow)) : (thead.empty(), 
        thead.append(headerRow)), this.el;
    },
    _renderData: function() {
        var el = $(this.el), tbody = $("tbody", el);
        return $.isEmpty(tbody) ? (tbody = $("<tbody>"), el.append(tbody)) : tbody.empty(), 
        0 === this.getRecords().length ? tbody.append('<tr><td class="no-records" colspan="' + this.getColumns().length + '"><i class="fad fa-empty-set"></i> ' + this.getEmptyText() + "</td></tr>") : $.each(this.getRecords(), function(i, rec) {
            var row = this.getRowRenderer()(rec);
            $.each(this.getColumns(), function(i, column) {
                var renderer = column.getRenderer(), cell = $("<" + column.getCellType() + ">");
                "th" === column.getCellType() && cell.attr("scope", "row"), cell.attr("class", column.getAttribute("class")), 
                cell.html(renderer(rec)), row.append(cell);
            }.bind(this)), tbody.append(row);
        }.bind(this)), this.el;
    },
    handleSearch: function(data, formId) {
        this.isPaginationEnabled() && (this.setCurrentPage(1), this.updateParamsForPagination(), 
        this.setPageMenu(1)), this.getSearchFormId() === formId && (this.setParam("search", data), 
        this.load());
    },
    getDataMapping: function() {
        return this._dataMapping;
    },
    setDataMapping: function(func) {
        this._dataMapping = func;
    },
    getDataUrl: function() {
        return this._dataUrl;
    },
    setDataUrl: function(url) {
        this._dataUrl = url;
    },
    getAutoload: function() {
        return this._autoload;
    },
    setAutoload: function(val) {
        this._autoload = val;
    },
    getColumns: function() {
        return this._columns;
    },
    setColumns: function(columns) {
        this._columns = [], $.each(columns, function(i, column) {
            this.addColumn(column);
        }.bind(this));
    },
    addColumn: function(column) {
        this._columns.push(column);
    },
    removeColumn: function(column) {
        column = this._columns.indexOf(column);
        !1 !== column && this._columns.splice(column, 1);
    },
    getRecords: function() {
        return this._records;
    },
    setRecords: function(records) {
        this._records = [], $.each(records, function(i, record) {
            this.addRecord(record);
        }.bind(this));
    },
    addRecord: function(record) {
        this._records.push(this._dataMapping(record));
    },
    removeRecord: function(record) {
        record = this._records.indexOf(record);
        !1 !== record && this._records.splice(record, 1);
    },
    getParams: function() {
        return this._params;
    },
    setParams: function(params) {
        this._params = params;
    },
    getParam: function(key) {
        return this._params[key];
    },
    setParam: function(key, value) {
        this._params[key] = value;
    },
    getEmptyText: function() {
        return this.emptyText;
    },
    setEmptyText: function(val) {
        this.emptyText = val;
    },
    getRowRenderer: function() {
        return this._rowRenderer;
    },
    setRowRenderer: function(func) {
        this._rowRenderer = func;
    },
    getActions: function() {
        return this._actions;
    },
    setActions: function(actions) {
        for (var i = 0; i < actions.length; i++) actions[i] instanceof AST.search.Search && this.setSearchFormId(actions[i].getId());
        this._actions = actions;
    },
    getDataMethod: function() {
        return this._dataMethod;
    },
    setDataMethod: function(val) {
        this._dataMethod = val;
    },
    getSearchFormId: function() {
        return this._searchFormId;
    },
    setSearchFormId: function(val) {
        this._searchFormId = val;
    }
}), AST.form = AST.form || {}, AST.form.InspectTool = function(c) {
    (c = c || {}).tagName = "div", c.id = c.id || $.uniqueid(), c.attributes = c.attributes || {}, 
    c.attributes.class = (c.attributes.class || "") + " node-capture", AST.Element.prototype.constructor.call(this, c), 
    this.initDataBinding(c), this.setLabel(c.label || null), this.setRequired(c.required || !1), 
    this.field = new AST.form.TextArea({
        label: this._label,
        labelPosition: "top",
        model: this.getModel(),
        modelProperty: this.getModelProperty(),
        required: this.getRequired()
    });
    c = [ this.field, new AST.Element({
        tagName: "div",
        children: [ new AST.form.Button({
            content: '<i class="fas fa-search-plus"></i> Inspect',
            listeners: {
                click: this.handleInspect.bind(this),
                keydown: this.handleInspectKeyboard.bind(this)
            }
        }), new AST.Element({
            tagName: "span",
            content: "Use to capture a node for the Description"
        }) ]
    }) ];
    this.setChildren(c);
}, $.extend(AST.form.InspectTool.prototype, AST.Element.prototype, AST.form.mixin.twoWayDataBinding, AST.postsMessagesMixin, {
    attachDataBindings: function() {
        this.initDataBinding({}), this.field.initDataBinding({});
    },
    getLabel: function() {
        return this._label;
    },
    setLabel: function(val) {
        this._label = val;
    },
    getRequired: function() {
        return this.required;
    },
    setRequired: function(val) {
        this.required = val;
    },
    handleInspect: function(ev) {
        ev.preventDefault(), this.initListener(), new AST.NodeCapture({
            target: ev.currentTarget
        }).launch(!0);
    },
    handleInspectKeyboard: function(ev) {
        ev.keyCode === AST.Util.KeyCodes.ENTER && (ev.preventDefault(), this.initListener(), 
        new AST.NodeCapture({
            target: ev.currentTarget
        }).keyboardLaunch(!0));
    },
    initListener: function() {
        AST.controller.addListener("nodecaptureselection", this.handleInspectSelection, this, this.getEl(), !0);
    },
    handleInspectSelection: function(node, frameId) {
        this.bubbleEvent("inspectednode-" + this.getId(), {
            node: node,
            frameId: frameId
        });
        var markEach = function(node) {
            do {
                var attributesToRemove;
                1 === node.nodeType && (attributesToRemove = [], $.each(node.attributes, function(key, attr) {
                    0 !== attr.name.indexOf("data-ae") && 0 !== attr.name.indexOf("data-la") || this.push(attr.name);
                }.bind(attributesToRemove)), $.each(attributesToRemove, function(key, val) {
                    this.attributes.removeNamedItem(val);
                }.bind(node)), node.shadowRoot && null !== node.shadowRoot.firstElementChild && markEach(node.shadowRoot.firstElementChild), 
                node.hasChildNodes() ? null !== node.firstChild && markEach(node.firstChild) : node.childNodes && 0 < node.childNodes.length && markEach(node.childNodes[0])), 
                node = node.nextSibling;
            } while (node);
        }, frameId = (markEach(node[0]), node[0].outerHTML);
        AST.controller.isSuppressSensitiveDataEnabled() && (frameId = AST.Util.parseTagFromHtml(frameId)), 
        this.getModel().set(this.getModelProperty(), frameId);
    }
}), AST.form = AST.form || {}, AST.form.Thumbnail = function(c) {
    this._readOnly = (c = c || {}).readOnly || !1, delete c.readOnly, c.id = c.id || $.uniqueid(), 
    c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " thumbnail", 
    AST.form.Fieldset.prototype.constructor.call(this, c), this.initDataBinding(c), 
    this.innerModel = new AST.Model(this.getModel().get(this.getModelProperty()) || {
        data: null,
        alt: null
    }), this.preview = new AST.Element({
        tagName: "div",
        attributes: {
            "aria-hidden": !0
        }
    }), this.setThumbnailSource(this.innerModel.get("data"));
    c = [], c = this.isReadOnly() ? [ new AST.Element({
        tagName: "div",
        children: this.getButtons()
    }) ] : (this.bindInnerModelListeners(), this.fileField = new AST.form.Input({
        label: "Thumbnail Image",
        attributes: {
            type: "file",
            accept: ".png,.gif,.jpg,.jpeg"
        },
        listeners: {
            change: this.parseThumbnail.bind(this)
        }
    }), this.altField = new AST.form.Text({
        label: "Alt Text",
        model: this.innerModel,
        modelProperty: "alt"
    }), [ this.fileField, this.altField, new AST.Element({
        tagName: "div",
        children: this.getButtons()
    }) ]);
    this.addChild(new AST.Element({
        tagName: "div",
        children: [ new AST.Element({
            tagName: "div",
            children: c
        }), new AST.Element({
            tagName: "div",
            children: [ this.preview ]
        }) ]
    }));
}, $.extend(AST.form.Thumbnail.prototype, AST.form.Fieldset.prototype, AST.form.mixin.twoWayDataBinding, AST.postsMessagesMixin, {
    isReadOnly: function() {
        return this._readOnly;
    },
    setReadOnly: function(val) {
        this._readOnly = val;
    },
    attachDataBindings: function() {
        this.isReadOnly() || (this.initDataBinding({}), this.bindInnerModelListeners(), 
        $.each([ this.fileField, this.altField ], function(i, field) {
            field.initDataBinding({});
        }));
    },
    bindInnerModelListeners: function() {
        this.isReadOnly() || ([ "alt", "data" ].forEach(function(prop) {
            AST.controller.addListener(this.innerModel.getId() + "-" + prop, function(val) {
                this.getModel().set(this.getModelProperty(), this.innerModel.getData());
            }.bind(this), this, this.getEl(), !1);
        }.bind(this)), AST.controller.addListener(this.innerModel.getId() + "-data", this.setThumbnailSource, this, this.getEl(), !1));
    },
    handleRetakeInspect: function(ev) {
        ev.preventDefault(), this.initListener(), new AST.NodeCapture({
            target: ev.currentTarget
        }).launch(!1);
    },
    handleRetakeInspectKeyboard: function(ev) {
        ev.keyCode === AST.Util.KeyCodes.ENTER && (ev.preventDefault(), this.initListener(), 
        new AST.NodeCapture({
            target: ev.currentTarget
        }).keyboardLaunch(!1));
    },
    getButtons: function() {
        var buttons = [], hasThumbnail = !$.isEmpty(this.innerModel.get("data"));
        return this.isReadOnly() && !hasThumbnail ? [] : (this.isReadOnly() || (!AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("thumbnails") && buttons.push(new AST.form.Button({
            content: '<i class="fas fa-camera-alt"></i>',
            attributes: {
                class: "retake",
                title: "Retake Thumbnail"
            },
            listeners: {
                click: this.handleRetakeInspect.bind(this),
                keydown: this.handleRetakeInspectKeyboard.bind(this)
            }
        })), buttons.push(new AST.form.Button({
            captureClickEvent: !1,
            content: '<i class="fas fa-times"></i>',
            attributes: {
                class: "remove",
                title: "Remove Thumbnail"
            },
            listeners: {
                click: this.removeThumbnail.bind(this)
            }
        })), hasThumbnail || buttons[buttons.length - 1].setAttribute("disabled", !0)), 
        buttons.push(new AST.form.Button({
            content: '<i class="fas fa-search-plus"></i>',
            attributes: {
                class: "zoom",
                title: "Zoom Thumbnail"
            },
            listeners: {
                click: this.zoomThumbnail.bind(this)
            }
        })), hasThumbnail || buttons[buttons.length - 1].setAttribute("disabled", !0), 
        buttons);
    },
    initListener: function() {
        this.isReadOnly() || AST.controller.addListener("nodecaptureselection", this.handleInspectSelection, this, this.getEl(), !0);
    },
    triggerThumbnailCapture: function(node, frameId) {
        this.connectThumbnailCaptureListener(), this._node = node, this.postCommand("page", {
            type: "NODE_POSITION",
            uel: $(node).attr("data-ae_domuel"),
            frameId: frameId
        });
    },
    handleThumbnailCapture: function(ev) {
        try {
            "NODE_POSITION" === ev.data.result.type && (this.disconnectThumbnailCaptureListener(), 
            AST.controller.addListener("CAPTURE_THUMBNAIL_RESPONSE", this.saveScreenshot, this, this.getEl(), !0), 
            this._position = ev.data.result.position, AST.ThumbnailCapture.snap(), 
            AST.Util.maskBody());
        } catch (e) {}
    },
    handleInspectSelection: function(node, frameId) {
        this.triggerThumbnailCapture(node, frameId);
    },
    connectThumbnailCaptureListener: function() {
        this.thumbnailListener = this.handleThumbnailCapture.bind(this), window.addEventListener("message", this.thumbnailListener, !1);
    },
    disconnectThumbnailCaptureListener: function() {
        window.removeEventListener("message", this.thumbnailListener, !1);
    },
    saveScreenshot: function(msg) {
        var position, img;
        msg.result.success ? (void 0 === (position = this._position) && (position = this._node[0].getBoundingClientRect()), 
        (img = document.createElement("img")).onload = function() {
            var height = position.height / devicePixelRatio, width = position.width / devicePixelRatio, canvas = document.createElement("canvas"), context = (canvas.height = height, 
            canvas.width = width, canvas.getContext("2d")), context = (context.msImageSmoothingEnabled = !1, 
            context.mozImageSmoothingEnabled = !1, context.webkitImageSmoothingEnabled = !1, 
            context.imageSmoothingEnabled = !1, context.drawImage(img, position.left / devicePixelRatio, position.top / devicePixelRatio, width, height, 0, 0, width, height), 
            canvas.toDataURL("image/png"));
            this.innerModel.set("data", context), $(this.fileField.getEl()).val(null);
        }.bind(this), img.src = msg.result.dataUrl) : new AST.window.Error({
            title: '<i class="fas fa-key fa-fw"></i> Missing Permissions',
            children: [ new AST.Element({
                tagName: "p",
                content: "Access Assistant does not have permission to take screenshots on the active page."
            }) ],
            buttons: [ new AST.form.CancelButton({
                content: "Ok",
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render();
    },
    parseThumbnail: function(ev) {
        ev.preventDefault();
        var ev = $(this.fileField.getEl())[0].files[0], reader = new FileReader();
        reader.addEventListener("load", function(ev) {
            this.innerModel.set("data", ev.currentTarget.result);
        }.bind(this), !1), void 0 !== ev && reader.readAsDataURL(ev);
    },
    setThumbnailSource: function(dataUrl) {
        dataUrl ? ($(this.preview.getEl()).css("background-image", "url(" + dataUrl + ")").removeClass("empty"), 
        $("button.remove, button.zoom", this.getEl()).removeAttr("disabled")) : ($(this.preview.getEl()).css("background-image", "unset").addClass("empty"), 
        $("button.remove, button.zoom", this.getEl()).attr("disabled", "true"));
    },
    removeThumbnail: function(ev) {
        ev.preventDefault(), this.innerModel.set("data", null);
    },
    zoomThumbnail: function(ev) {
        ev.preventDefault(), this.thumbnailDialog = new AST.window.Popup({
            title: "Thumbnail Preview",
            height: 80,
            width: 80,
            attributes: {
                class: "thumbnail-preview"
            },
            target: ev.currentTarget,
            children: [ new AST.Element({
                tagName: "img",
                attributes: {
                    role: "presentation",
                    alt: this.innerModel.get("alt") || "Thumbnail Preview",
                    src: this.innerModel.get("data")
                }
            }) ]
        }), this.thumbnailDialog.render();
    }
}), AST.Icon = function(c) {
    (c = c || {}).tagName = c.tagName || "i", c.attributes = c.attributes || {}, 
    c.attributes.class = (c.icon || "fas fa-question-square icon-red") + (c.class || ""), 
    AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.Icon.prototype, AST.Element.prototype, {}), AST.list = {}, AST.list.Unordered = function(c) {
    c.tagName = "ul", this.setRecords(c.records || this._records), this.setDataUrl(c.dataUrl || this._dataUrl), 
    this.setParams(c.params || this._params), this.setAutoload(c.autoload || this._autoload), 
    this.setDataMapping(c.dataMapping || this._dataMapping), this.setEmptyText(c.emptyText || this.emptyText), 
    this.setRenderer(c.renderer || this._renderer.bind(this)), AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.list.Unordered.prototype, AST.Element.prototype, {
    _records: [],
    _params: {},
    _dataUrl: null,
    _autoload: !1,
    _dataMapping: function(data) {
        return data;
    },
    _renderer: function(rec) {
        return "&nbsp;";
    },
    emptyText: "No records found.",
    load: function() {
        $.isEmpty(this.getDataUrl()) || AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, this.getDataUrl(), this.getParams(), function(data) {
            this.setRecords(data.result), this._renderData(), AST.controller.fireEvent("listload", this.getDataUrl());
        }.bind(this));
    },
    render: function() {
        return this.el = AST.Element.prototype.render.call(this), $.isEmpty(this.getDataUrl()) ? this._renderData() : !0 === this.getAutoload() && this.load(), 
        this.el;
    },
    _renderData: function() {
        var items, el = $(this.el);
        return el.empty(), 0 === this.getRecords().length ? el.append("<li>" + this.getEmptyText() + "</li>") : (items = [], 
        $.each(this.getRecords(), function(i, rec) {
            var item = $("<li>"), rec = this.getRenderer()(rec);
            if (!1 === rec) return !0;
            item.append('<i class="fas fa-caret-right"></i>&nbsp;', rec), items.push(item);
        }.bind(this)), el.append(items)), this.el;
    },
    getDataMapping: function() {
        return this._dataMapping;
    },
    setDataMapping: function(func) {
        this._dataMapping = func;
    },
    getDataUrl: function() {
        return this._dataUrl;
    },
    setDataUrl: function(url) {
        this._dataUrl = url;
    },
    getAutoload: function() {
        return this._autoload;
    },
    setAutoload: function(val) {
        this._autoload = val;
    },
    getRecords: function() {
        return this._records;
    },
    setRecords: function(records) {
        this._records = [], $.each(records, function(i, record) {
            this.addRecord(record);
        }.bind(this));
    },
    addRecord: function(record) {
        this._records.push(this._dataMapping(record));
    },
    removeRecord: function(record) {
        record = this._records.indexOf(record);
        !1 !== record && this._records.splice(record, 1);
    },
    getParams: function() {
        return this._params;
    },
    setParams: function(params) {
        this._params = params;
    },
    getParam: function(key) {
        return this._params[key];
    },
    setParam: function(key, value) {
        this._params[key] = value;
    },
    getEmptyText: function() {
        return this.emptyText;
    },
    setEmptyText: function(val) {
        this.emptyText = val;
    },
    getRenderer: function() {
        return this._renderer;
    },
    setRenderer: function(func) {
        this._renderer = func;
    }
}), AST.list.Errors = function(c) {
    (c = c || {}).attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " error", 
    c.attributes["aria-live"] = "assertive", c.attributes["aria-atomic"] = "true", 
    AST.list.Unordered.prototype.constructor.call(this, c);
}, $.extend(AST.list.Errors.prototype, AST.list.Unordered.prototype, {
    render: function() {
        return AST.Element.prototype.render.call(this);
    }
}), AST.pagination = {}, AST.pagination.PaginationBar = function(c) {
    (c = c || {}).tagName = "div", c.attributes = {
        role: "navigation",
        class: "pagination"
    }, AST.Element.prototype.constructor.call(this, c), this.setPaginationModel(c.paginationModel), 
    this.init();
}, $.extend(AST.pagination.PaginationBar.prototype, AST.Element.prototype, {
    _paginationModel: 1,
    _paginationNavigation: null,
    _paginationDescription: "",
    init: function() {
        this.setPaginationDescription(new AST.pagination.Description()), this.setPaginationNavigation(new AST.pagination.Navigation({
            paginationModel: this.getPaginationModel()
        })), this.addChild(this.getPaginationDescription()), this.addChild(this.getPaginationNavigation());
    },
    getPaginationNavigation: function() {
        return this._paginationNavigation;
    },
    setPaginationNavigation: function(paginationNavigation) {
        this._paginationNavigation = paginationNavigation;
    },
    getPaginationDescription: function() {
        return this._paginationDescription;
    },
    setPaginationDescription: function(paginationDescription) {
        this._paginationDescription = paginationDescription;
    },
    getCurrentPage: function() {
        return this._currentPage;
    },
    setCurrentPage: function(currentPage) {
        this._currentPage = currentPage;
    },
    getNumberOfPages: function() {
        return this._numberOfPages;
    },
    setNumberOfPages: function(numberOfPages) {
        this._numberOfPages = numberOfPages;
    },
    getPaginationModel: function() {
        return this._paginationModel;
    },
    setPaginationModel: function(paginationModel) {
        this._paginationModel = paginationModel;
    }
}), AST.pagination.Navigation = function(c) {
    (c = c || {}).tagName = "div", c.attributes = {
        class: "btn-group right"
    }, this.setNumberOfPages(c.numberOfPages || 1), this.setCurrentPage(c.currentPage || 1), 
    this.setPaginationModel(c.paginationModel), AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.pagination.Navigation.prototype, AST.Element.prototype, {
    prevButton: null,
    nextButton: null,
    label: null,
    dropdown: null,
    _currentPage: 1,
    _numberOfPages: 1,
    update: function(currentPage, numberOfPages) {
        if (numberOfPages !== this.getNumberOfPages()) {
            this.setNumberOfPages(numberOfPages);
            for (var options = [], i = 0; i < this.getNumberOfPages(); i++) options.push({
                key: i + 1,
                value: i + 1
            });
            this.dropdown.setOptions(options), this.dropdown.setValue(this.getCurrentPage()), 
            this.numberOfPagesLabel.setContent(" of " + this.getNumberOfPages()), 
            this.numberOfPagesLabel.render(), this.dropdown._renderData();
        }
        this.setCurrentPage(currentPage), this.updateButtons(), this.render();
    },
    render: function() {
        if ($.isEmpty(this.dropdown)) {
            this.prevButton = new AST.Element({
                tagName: "button",
                attributes: {
                    class: "prev",
                    title: "Go to page " + (this.getCurrentPage() - 1),
                    disabled: "disabled"
                },
                listeners: {
                    click: this.handlePrevStep.bind(this)
                },
                content: '<i class="fas fa-arrow-alt-left"></i>'
            }), this.addChild(this.prevButton), this.dropdown = new AST.form.Select({
                label: "Page",
                labelPosition: "left",
                showPlaceholderOption: !1,
                title: "Current Page",
                optionKey: "key",
                optionRenderer: function(data) {
                    return data.value;
                },
                model: this.getPaginationModel(),
                modelProperty: "currentPage"
            }), this.numberOfPagesLabel = new AST.Element({
                tagName: "span",
                content: " of " + this.getNumberOfPages()
            });
            for (var dropdownContainer = new AST.Element({
                tagName: "div",
                attributes: {
                    class: "label"
                },
                children: [ this.dropdown, this.numberOfPagesLabel ]
            }), options = (this.addChild(dropdownContainer), []), i = 0; i < this.getNumberOfPages(); i++) options.push({
                key: i + 1,
                value: i + 1
            });
            this.dropdown.setOptions(options), this.dropdown.setValue(this.getCurrentPage()), 
            this.numberOfPagesLabel.setContent(" of " + this.getNumberOfPages()), 
            this.nextButton = new AST.Element({
                tagName: "button",
                attributes: {
                    class: "next",
                    title: "Go to page " + (this.getCurrentPage() + 1)
                },
                listeners: {
                    click: this.handleNextStep.bind(this)
                },
                content: '<i class="fas fa-arrow-alt-right"></i>'
            }), this.addChild(this.nextButton), this.el = AST.Element.prototype.render.call(this);
        }
        return this.el;
    },
    updateButtons: function() {
        var prevButton = $(this.prevButton.getEl()), nextButton = $(this.nextButton.getEl());
        prevButton.attr("title", "Go to page " + (this.getCurrentPage() - 1)), nextButton.attr("title", "Go to page " + (this.getCurrentPage() + 1)), 
        this.toggleNavButton($(this.prevButton.getEl()), 1 === this.getCurrentPage()), 
        this.toggleNavButton($(this.nextButton.getEl()), this.getCurrentPage() === this.getNumberOfPages());
    },
    toggleNavButton: function(button, shouldDisable) {
        !0 === shouldDisable ? button.attr("disabled", "disabled") : button.removeAttr("disabled");
    },
    handlePrevStep: function(ev) {
        ev.preventDefault();
        ev = parseInt(this.getPaginationModel().get("currentPage"));
        1 < ev && this.getPaginationModel().set("currentPage", ev - 1);
    },
    handleNextStep: function(ev) {
        ev.preventDefault();
        ev = parseInt(this.getPaginationModel().get("currentPage"));
        ev < this.getNumberOfPages() && this.getPaginationModel().set("currentPage", ev + 1);
    },
    getButtons: function() {
        return this._buttons;
    },
    setButtons: function(buttons) {
        this._buttons = buttons;
    },
    getCurrentPage: function() {
        return this._currentPage;
    },
    setCurrentPage: function(currentPage) {
        this._currentPage = currentPage;
    },
    getNumberOfPages: function() {
        return this._numberOfPages;
    },
    setNumberOfPages: function(numberOfPages) {
        this._numberOfPages = numberOfPages;
    },
    getPaginationModel: function() {
        return this._paginationModel;
    },
    setPaginationModel: function(paginationModel) {
        this._paginationModel = paginationModel;
    }
}), AST.pagination.Description = function(c) {
    (c = c || {}).tagName = "div", c.attributes = {
        class: "pagination-description"
    }, AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.pagination.Description.prototype, AST.Element.prototype, {
    _start: 0,
    _end: 0,
    _total: 0,
    render: function() {
        this.el = AST.Element.prototype.render.call(this);
        var spanConfig = {
            tagName: "span",
            content: this._getDisplayedRecordsText()
        }, spanConfig = new AST.Element(spanConfig).render();
        return this.el.appendChild(spanConfig), this.el;
    },
    update: function(start, end, total) {
        this.setStart(start), this.setEnd(end), this.setTotal(total), this.render();
    },
    _getDisplayedRecordsText: function() {
        var recordsTotal = this.getTotal();
        if (0 === recordsTotal || recordsTotal < 0) return "Displaying 0 records";
        if (1 === recordsTotal) return "Displaying 1 record";
        recordsTotal = recordsTotal.toString();
        return "Displaying " + (this.getStart() + 1).toString() + " to " + this.getEnd().toString() + " of " + recordsTotal + " records";
    },
    getStart: function() {
        return this._start;
    },
    setStart: function(start) {
        this._start = start;
    },
    getEnd: function() {
        return this._end;
    },
    setEnd: function(end) {
        this._end = end;
    },
    getTotal: function() {
        return this._total;
    },
    setTotal: function(total) {
        this._total = total;
    }
}), AST.panels = {}, AST.panels.Panel = function(c) {
    this.setToggleDescribedBy((c = c || {}).toggleDescribedBy || !1), this.setTitle(c.title || this.getTitle()), 
    this.setCollapsible(c.collapsible || this.isCollapsible()), c.tagName = "div", 
    c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " panel" + (this.isCollapsible() ? " collapsible" : "");
    var content = c.content || [], children = (delete c.content, c.children || []);
    delete c.children, AST.Element.prototype.constructor.call(this, c), this.addChild(this.createHeader()), 
    this.addChild(this.createContent(children, content));
}, $.extend(AST.panels.Panel.prototype, AST.Element.prototype, AST.hasTitleMixin, {
    header: void 0,
    collapsible: !1,
    toggleDescribedBy: "",
    getToggleDescribedBy: function() {
        return this.toggleDescribedBy;
    },
    setToggleDescribedBy: function(val) {
        this.toggleDescribedBy = val;
    },
    createHeader: function() {
        return $.isArray(this.getTitle()) ? this.setHeader(new AST.Element({
            id: this.getId() + "-title",
            tagName: "h3",
            children: this.getTitle()
        })) : this.getTitle() instanceof AST.Element ? this.setHeader(new AST.Element({
            id: this.getId() + "-title",
            tagName: "h3",
            children: [ this.getTitle() ]
        })) : "string" == typeof this.getTitle() ? this.setHeader(new AST.Element({
            id: this.getId() + "-title",
            tagName: "h3",
            children: [ new AST.Element({
                tagName: "span",
                content: this.getTitle()
            }) ]
        })) : this.setHeader(new AST.Element({
            id: this.getId() + "-title",
            tagName: "h3",
            content: ""
        })), this.isCollapsible() && this.getHeader().addChild(new AST.Element({
            id: this.getId() + "-link",
            tagName: "a",
            content: '<i class="fas fa-caret-up" ></i><span class="a11y-offscreen-text">Collapse</span>',
            attributes: {
                href: "#",
                title: "Collapse",
                "aria-expanded": "true",
                "aria-controls": this.getId() + "-table",
                "aria-describedby": this.getToggleDescribedBy() || this.getId() + "-title"
            },
            listeners: {
                click: this.toggle.bind(this)
            }
        })), this.getHeader();
    },
    createContent: function(children, content) {
        return new AST.Element({
            tagName: "div",
            id: this.getId() + "-content",
            attributes: {
                role: "region",
                class: "content"
            },
            content: content,
            children: children
        });
    },
    getHeader: function() {
        return this.header;
    },
    setHeader: function(val) {
        this.header = val;
    },
    isCollapsible: function() {
        return this.collapsible;
    },
    setCollapsible: function(val) {
        this.collapsible = val;
    },
    toggle: function(ev) {
        ev.preventDefault();
        var ev = $("#" + this.getId() + "-link"), tableEl = $("#" + this.getId() + "-content"), expanded = !0, title = "Collapse";
        tableEl.is(":visible") ? (tableEl.hide(), expanded = !1, title = "Expand") : tableEl.show(), 
        ev.attr("aria-expanded", expanded), ev.attr("title", title), ev.find(".a11y-offscreen-text").html(title), 
        ev.find("svg").toggleClass("fa-rotate-180");
    }
}), AST.panels.GridPanel = function(c) {
    AST.panels.Panel.prototype.constructor.call(this, c), this.setAttribute("class", (this.getAttribute("class") || "") + " grid");
}, $.extend(AST.panels.GridPanel.prototype, AST.panels.Panel.prototype, {
    createContent: function(children, content) {
        children = children[0];
        return children.setId(this.getId() + "-content"), children.setAttribute("class", (children.getAttribute("class") || "") + " content"), 
        "function" == typeof children.getEl && "TABLE" === children.getEl().tagName || children.setAttribute("role", "region"), 
        children;
    }
}), (AST = AST || {}).search = {}, AST.search.Search = function(c) {
    c.tagName = "div", AST.Element.prototype.constructor.call(this, c), this.setPlaceholder(c.placeholder || " Enter Search Term");
}, $.extend(AST.search.Search.prototype, AST.Element.prototype, {
    _placeholder: "",
    _searchField: null,
    render: function() {
        this._searchField = new AST.form.Text({
            label: this.getPlaceholder(),
            attributes: {
                class: "search-input"
            }
        });
        var searchForm = new AST.form.Form({
            attributes: {
                class: "search-form"
            },
            children: [ this._searchField ],
            buttons: [ new AST.form.Button({
                attributes: {
                    title: "Clear",
                    class: "clear-search"
                },
                listeners: {
                    click: this.clearSearch.bind(this)
                },
                content: '<i class="fas fa-times-circle"></i><span class="a11y-offscreen-text">Clear Search</span>'
            }), new AST.form.Button({
                content: '<i class="fas fa-search"></i><span class="a11y-offscreen-text">Search</span>',
                attributes: {
                    class: "search-button"
                },
                listeners: {
                    click: this.handleSearch.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSearch.bind(this)
            }
        });
        return searchForm.setErrorEl(" "), searchForm.setOrientation("horizontal"), 
        searchForm.render();
    },
    handleSearch: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("handlesearch", [ $(this._searchField.getEl()).val(), this.getId() ]);
    },
    clearSearch: function(ev) {
        ev.preventDefault();
        ev = $(this._searchField.getEl());
        ev.val("").focus(), AST.controller.fireEvent("handlesearch", [ ev.val(), this.getId() ]);
    },
    getWrapperEl: function() {
        return this._wrapperEl;
    },
    setWrapperEl: function(el) {
        this._wrapperEl = el;
    },
    getPlaceholder: function() {
        return this._placeHolder;
    },
    setPlaceholder: function(placeholder) {
        this._placeHolder = placeholder;
    }
}), AST.tabs = {}, AST.tabs.Panel = function(c) {
    (c = c || {}).tagName = "div", c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " tab-panel", 
    c.children = c.children || [], AST.Element.prototype.constructor.call(this, c);
}, $.extend(AST.tabs.Panel.prototype, AST.Element.prototype, {
    render: function() {
        return $.isEmpty(this.getId()) || this.el.setAttribute("id", this.getId()), 
        $.each(this.getAttributes(), function(key, value) {
            this.el.setAttribute(key, value);
        }.bind(this)), this.navigation = new AST.Element({
            tagName: "div",
            attributes: {
                role: "tablist",
                class: "tabs-navigation"
            }
        }), this.container = new AST.Element({
            tagName: "div",
            id: this.getId() + "-container",
            attributes: {
                class: "tabs-container"
            }
        }), $.each(this.getChildren(), function(i, child) {
            var attributes;
            child instanceof AST.tabs.Tab && (attributes = {
                role: "tab",
                class: "accTab unbound",
                "data-group": this.getId(),
                "data-internal": child.getId(),
                "data-insert": this.getId() + "-container"
            }, 0 === i && (attributes["data-defaultopen"] = !0), this.navigation.addChild(new AST.Element({
                tagName: "a",
                id: child.getId() + "-link",
                attributes: attributes,
                content: child.getTitle()
            })), this.container.addChild(child));
        }.bind(this)), this.navigation.setParent(this), this.container.setParent(this), 
        $(this.el).append(this.navigation.render()), $(this.el).append(this.container.render()), 
        setTimeout(this.decorateTabs.bind(this), 100), this.el;
    },
    decorateTabs: function() {
        $ACC.bootstrap();
    }
}), AST.tabs.Tab = function(c) {
    (c = c || {}).tagName = "div", c.attributes = c.attributes || {}, c.attributes.class = (c.attributes.class || "") + " tab", 
    AST.Element.prototype.constructor.call(this, c), this.setTitle(c.title || this.getTitle()), 
    AST.controller.addListener("tab-active-" + this.getId(), function() {
        this.cascadeEvent("tab-activated");
    }.bind(this));
}, $.extend(AST.tabs.Tab.prototype, AST.Element.prototype, AST.hasTitleMixin, {
    render: function() {
        return this.el = AST.Element.prototype.render.call(this), this.el;
    }
}), AST.window = {}, AST.window.Popup = function(c) {
    this.setTitle(c.title || this.getTitle()), this.setHeaderButtons(c.headerButtons || []), 
    this.setHeight(c.height || this.getHeight()), this.setWidth(c.width || this.getWidth()), 
    this.setTarget(c.target || this.getTarget()), c.listeners = c.listeners || {}, 
    c.listeners.closewindow = this.close.bind(this), AST.form.Form.prototype.constructor.call(this, c);
}, $.extend(AST.window.Popup.prototype, AST.form.Form.prototype, AST.hasTitleMixin, {
    header: null,
    headerButtons: [],
    height: 0,
    width: 0,
    target: null,
    getAttributes: function(isModal) {
        var units, attributes = {
            role: "dialog",
            class: "popup",
            tabindex: -1,
            "aria-modal": !0,
            "aria-labelledby": this.getId() + "-header"
        }, style = "";
        return null !== this.getWidth() && (units = 100 < this.getWidth() ? "px" : "%", 
        style = (style += 0 < this.getWidth() ? "width: " + this.getWidth() + units + ";" : "") + "left: calc(50% - " + this.getWidth() / 2 + units + "); right: auto;"), 
        null !== this.getHeight() && (units = 100 < this.getHeight() ? "px" : "%", 
        style = (style += 0 < this.getHeight() ? "height: " + this.getHeight() + units + ";" : "") + "top: calc(50% - " + this.getHeight() / 2 + units + "); bottom: auto;"), 
        "" !== style && (attributes.style = style), attributes;
    },
    getHeader: function(isModal) {
        var title;
        return null === this.header && (title = new AST.Element({
            tagName: "h1",
            id: this.getId() + "-header",
            content: this.title
        }), isModal || this.headerButtons.push(new AST.Element({
            tagName: "button",
            id: this.getId() + "-close",
            attributes: {
                class: "popup-close",
                title: "Close Popup"
            },
            listeners: {
                click: this.close.bind(this)
            },
            content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Close Popup</span>'
        })), this.header = new AST.Element({
            tagName: "header",
            children: [ title, new AST.Element({
                tagName: "div",
                attributes: {
                    class: "buttons"
                },
                children: this.getHeaderButtons()
            }) ]
        })), this.header;
    },
    render: function(isModal) {
        return isModal = void 0 !== isModal && isModal, this.el = AST.form.Form.prototype.render.call(this), 
        this.dialog = new AST.Element({
            tagName: "section",
            id: this.getId() + "-window",
            attributes: this.getAttributes(isModal),
            listeners: {
                keydown: this.handleEscapeKey.bind(this)
            }
        }).render(), this.dialog.appendChild(this.getHeader(isModal).render()), 
        this.dialog.appendChild(this.el), AST.Util.maskBody(), $("#windows-container").append(this.dialog), 
        this.addFocusTrap(), this.dialog;
    },
    addFocusTrap: function(dontFocusModal) {
        dontFocusModal = dontFocusModal || !1;
        var firstEl, focusables = $(":tabbable", this.dialog);
        $(".has-capture", this.dialog).off("keydown"), firstEl = $(focusables[0]), 
        focusables = $(focusables[focusables.length - 1]), firstEl.addClass("has-capture"), 
        firstEl.on("keydown", function(target, ev) {
            ev.keyCode === AST.Util.KeyCodes.TAB && ev.shiftKey && (ev.preventDefault(), 
            target.focus());
        }.bind(this, focusables)), focusables.addClass("has-capture"), focusables.on("keydown", function(target, ev) {
            ev.keyCode !== AST.Util.KeyCodes.TAB || ev.shiftKey || (ev.preventDefault(), 
            target.focus());
        }.bind(this, firstEl)), dontFocusModal || $(this.dialog).focus();
    },
    handleEscapeKey: function(ev) {
        ev.keyCode === AST.Util.KeyCodes.ESC && this.close();
    },
    close: function(callback) {
        void 0 !== callback && "function" == typeof callback || (callback = function() {}), 
        AST.controller.fireEvent("windowclose", this.getId()), $(this.dialog).remove(), 
        0 === $("[role=dialog]", "#windows-container").length && AST.Util.unmaskBody(), 
        callback(), this.focusTarget();
    },
    focusTarget: function() {
        try {
            $(this.getTarget()).focus();
        } catch (e) {}
    },
    getHeight: function() {
        return this.height;
    },
    setHeight: function(val) {
        this.height = val;
    },
    getWidth: function() {
        return this.width;
    },
    setWidth: function(val) {
        this.width = val;
    },
    getTarget: function() {
        return this.target;
    },
    setTarget: function(el) {
        this.target = el;
    },
    getHeaderButtons: function() {
        return this.headerButtons;
    },
    setHeaderButtons: function(buttons) {
        this.headerButtons = buttons;
    }
}), AST.window.Modal = function(c) {
    AST.window.Popup.prototype.constructor.call(this, c);
}, $.extend(AST.window.Modal.prototype, AST.window.Popup.prototype, {
    render: function(isModal) {
        return this.el = AST.window.Popup.prototype.render.call(this, isModal = void 0 === isModal || isModal), 
        this.el;
    }
}), AST.window.Error = function(c) {
    AST.window.Popup.prototype.constructor.call(this, c);
}, $.extend(AST.window.Error.prototype, AST.window.Popup.prototype, {
    render: function(isModal) {
        return this.el = AST.window.Popup.prototype.render.call(this, isModal = void 0 === isModal || isModal), 
        this.el;
    },
    getAttributes: function(isModal) {
        isModal = AST.window.Popup.prototype.getAttributes.call(this, isModal);
        return isModal.class += " error", isModal;
    }
}), AST.window.Warning = function(c) {
    AST.window.Popup.prototype.constructor.call(this, c);
}, $.extend(AST.window.Warning.prototype, AST.window.Popup.prototype, {
    render: function(isModal) {
        this.el = AST.window.Popup.prototype.render.call(this, isModal = void 0 === isModal || isModal);
    },
    getAttributes: function(isModal) {
        isModal = AST.window.Popup.prototype.getAttributes.call(this, isModal);
        return isModal.class += " warning", isModal;
    }
}), AST.window.Success = function(c) {
    AST.window.Popup.prototype.constructor.call(this, c);
}, $.extend(AST.window.Success.prototype, AST.window.Popup.prototype, {
    render: function(isModal) {
        this.el = AST.window.Popup.prototype.render.call(this, isModal = void 0 === isModal || isModal);
    },
    getAttributes: function(isModal) {
        isModal = AST.window.Popup.prototype.getAttributes.call(this, isModal);
        return isModal.class += " success", isModal;
    }
}), AST.wizard = {}, AST.wizard.Wizard = function(c) {
    delete (c = c || {}).children, $.each(c.steps, function(i, step) {
        step instanceof AST.wizard.Step || c.steps.splice(i, 1);
    }), this.setSteps(c.steps || this.steps), AST.window.Popup.prototype.constructor.call(this, c), 
    this.navModel = new AST.Model({
        currentStep: AST.Storage.get("wizard-step-" + this.getId(), 1)
    });
}, $.extend(AST.wizard.Wizard.prototype, AST.window.Popup.prototype, {
    navigation: void 0,
    navigationLiveRegion: void 0,
    container: void 0,
    navModel: null,
    steps: [],
    getSteps: function() {
        return this.steps;
    },
    setSteps: function(steps) {
        this.steps = steps;
    },
    getCurrentStep: function() {
        return this.navModel.get("currentStep");
    },
    render: function(isModal) {
        var attributes = this.getAttributes(isModal = void 0 !== isModal && isModal);
        return attributes.class += " wizard", this.dialog = new AST.Element({
            tagName: "section",
            id: this.getId(),
            attributes: attributes,
            listeners: {
                keydown: this.handleEscapeKey.bind(this)
            },
            children: [ this.getHeader(isModal), this.getStepNavigation(), this.getStepContainer() ]
        }).render(), this.setWrapperEl($(this.dialog)), AST.Util.maskBody(), $("#windows-container").append(this.dialog), 
        this.drawStep(this.getCurrentStep()), this.addFocusTrap(), this.dialog;
    },
    getStepNavigation: function() {
        if ($.isEmpty(this.navigation) && (this.navigation = new AST.Element({
            tagName: "div",
            attributes: {
                class: "steps-navigation"
            }
        }), 0 < this.getSteps().length)) {
            for (var navigationControls = new AST.Element({
                tagName: "div",
                attributes: {
                    class: "navigation-controls"
                }
            }), options = (navigationControls.addChild(new AST.Element({
                tagName: "button",
                attributes: {
                    class: "prev",
                    title: "Previous",
                    disabled: "disabled"
                },
                listeners: {
                    click: this.handlePrevStep.bind(this)
                },
                content: '<i class="fas fa-arrow-alt-left"></i>'
            })), []), steps = this.getSteps(), i = 0; i < steps.length; i++) options.push({
                key: i + 1,
                value: i + 1,
                text: (i + 1).toString() + " - " + steps[i].title
            });
            var stepDropDown = new AST.form.ComboBox({
                label: "Step",
                labelPosition: "left",
                showPlaceholderOption: !1,
                options: options,
                optionKey: "key",
                optionRenderer: function(data) {
                    return data.text;
                },
                value: this.getCurrentStep(),
                model: this.navModel,
                modelProperty: "currentStep"
            });
            AST.controller.addListener(this.navModel.getId() + "-currentStep", this.drawStep.bind(this), this, this.getEl()), 
            navigationControls.addChild(new AST.Element({
                tagName: "span",
                attributes: {
                    class: "label"
                },
                children: [ stepDropDown, new AST.Element({
                    tagName: "span",
                    content: " of " + this.getSteps().length
                }) ]
            })), navigationControls.addChild(new AST.Element({
                tagName: "button",
                attributes: {
                    class: "next",
                    title: "Next"
                },
                listeners: {
                    click: this.handleNextStep.bind(this)
                },
                content: '<i class="fas fa-arrow-alt-right"></i>'
            })), this.navigationLiveRegion = new AST.Element({
                tagName: "span",
                content: "",
                attributes: {
                    class: "a11y-offscreen-text",
                    "aria-live": "polite"
                }
            }), this.navigation.addChild(new AST.Element({
                tagName: "div",
                attributes: {
                    class: "step-title"
                },
                children: [ new AST.Element({
                    tagName: "h2",
                    content: ""
                }), new AST.Element({
                    tagName: "h3",
                    content: ""
                }), navigationControls, this.navigationLiveRegion ]
            }));
        }
        return this.navigation;
    },
    getStepContainer: function() {
        return $.isEmpty(this.container) && (this.container = new AST.Element({
            tagName: "div",
            id: this.getId() + "-container",
            attributes: {
                class: "steps-container"
            },
            children: this.getSteps()
        })), this.container;
    },
    drawStep: function(step) {
        step = parseInt(step), this.navModel.set("currentStep", step), AST.Storage.set("wizard-step-" + this.getId(), step), 
        $("> .step-title > h2", this.navigation.getEl()).html(this.getSteps()[step - 1].getTitle()), 
        $("> .step-title > h3", this.navigation.getEl()).html(this.getSteps()[step - 1].getSubtitle()), 
        $(this.navigationLiveRegion.getEl()).text("Jumped to step " + step + ": " + this.getSteps()[step - 1].getTitle() + ". Content below"), 
        1 === step && $("#" + this.navigation.getId() + " .next").focus(), step === this.getSteps().length && $("#" + this.navigation.getId() + " .prev").focus(), 
        this.toggleNavButton($("#" + this.navigation.getId() + " .prev"), 1 === step), 
        this.toggleNavButton($("#" + this.navigation.getId() + " .next"), step === this.getSteps().length), 
        $("> *", this.container.getEl()).removeClass("active"), $("> :nth-child(" + step + ")", this.container.getEl()).addClass("active"), 
        this.fireEvent("step", step), setTimeout(function() {
            $(this.getStepContainer().getEl()).scrollTop(0);
            var currentFocus = $(":focus", this.getEl()).first();
            this.addFocusTrap(!0), currentFocus && currentFocus.focus();
        }.bind(this), 100), setTimeout(function() {
            var combobox = $(".steps-navigation input[role=combobox]");
            combobox.val(step), combobox.is(":focus") && combobox.select();
        }, 0);
    },
    toggleNavButton: function(button, shouldDisable) {
        !0 === shouldDisable ? button.attr("disabled", "disabled") : button.removeAttr("disabled");
    },
    handlePrevStep: function(ev) {
        ev.preventDefault(), 1 < this.getCurrentStep() && this.drawStep(this.getCurrentStep() - 1);
    },
    handleNextStep: function(ev) {
        ev.preventDefault(), this.getCurrentStep() < this.getSteps().length && this.drawStep(this.getCurrentStep() + 1);
    }
}), AST.wizard.Step = function(c) {
    (c = c || {}).tagName = "div", AST.Element.prototype.constructor.call(this, c), 
    this.setTitle(c.title || this.getTitle()), this.setSubtitle(c.subtitle || this.getSubtitle());
}, $.extend(AST.wizard.Step.prototype, AST.Element.prototype, AST.hasTitleMixin, {
    _subtitle: "",
    getSubtitle: function() {
        return this._subtitle;
    },
    setSubtitle: function(val) {
        this._subtitle = val;
    }
}), AST.Compatibility = {
    handleCompatibilityPopup: function(target) {
        new AST.window.Popup({
            title: '<i class="fas fa-question-circle"></i> Compatibility',
            height: 240,
            width: 480,
            target: target,
            attributes: {
                class: "compat-popup"
            },
            children: [ new AST.Element({
                tagName: "p",
                attributes: {
                    class: "instructions"
                },
                content: "Please note that some browser extensions may alter your page, resulting in unreliable test results. Your browser does not share information about other extensions that are installed, so Access Assistant cannot determine if there are any extensions modifying the page in a way that affects your test results. <br/><br/>We recommend disabling other extensions before you begin testing to ensure reliable test results."
            }) ]
        }).render(!1);
    }
}, AST.menu = AST.menu || {}, AST.menu.Main = function() {
    AST.Element.prototype.constructor.call(this, {
        tagName: "ul"
    }), this.viewAssets = this.getNavElement('<i class="fas fa-folder-open"></i><br/>View Assets', "appstart"), 
    this.quickTest = this.getNavElement('<i class="fas fa-tachometer"></i><br/>Quick<br/>Test', "quicktest"), 
    this.previewModes = this.getNavElement('<i class="fas fa-mouse-pointer" data-fa-transform="right-1 down-1 shrink-8" data-fa-mask="fas fa-badge"></i><br/>Preview Modes', "previewmodes"), 
    this.managePermissions = this.getNavElement('<i class="fas fa-key"></i><br/>Manage<br/>Permissions', "managepermissions"), 
    this.setChildren([ this.viewAssets, this.quickTest, this.previewModes ]), AST.Util.isChrome() && this.addChild(this.managePermissions), 
    AST.controller.addListener("featuresloaded", this.refresh.bind(this), this, this.getEl());
}, $.extend(AST.menu.Main.prototype, AST.Element.prototype, {
    refresh: function() {
        $.each(this.getChildren(), function(i, child) {
            $(child.getEl()).hide();
        }), AST.controller.isLoggedIn() && $(this.viewAssets.getEl()).show(), AST.Util.isChrome() && $(this.managePermissions.getEl()).show(), 
        $(this.quickTest.getEl()).show(), $(this.previewModes.getEl()).show();
    },
    getNavElement: function(label, event) {
        return new AST.Element({
            tagName: "li",
            attributes: {
                style: "display: none"
            },
            children: [ new AST.Element({
                tagName: "a",
                attributes: {
                    href: "#"
                },
                content: label,
                listeners: {
                    click: function(eventToFire, ev) {
                        ev.preventDefault(), AST.controller.fireEvent(eventToFire, ev.currentTarget);
                    }.bind(this, event)
                }
            }) ]
        });
    }
}), AST.Controller = function(c) {
    this.setEndPointUrl((c = c || {}).url || this.endPointUrl);
}, AST.Controller.WITH_TOKEN = !0, AST.Controller.WITHOUT_TOKEN = !1, $.extend(AST.Controller.prototype, AST.postsMessagesMixin, {
    mainMenu: null,
    listeners: [],
    endPointUrl: null,
    commsCallbacks: {},
    loggedIn: !1,
    ampIsReachable: !1,
    features: {},
    init: function() {
        this.initializeStorage(), this.initializeUI(), this.initializeCompanionListeners(), 
        this.initializeWindowMessaging(), this.initializeAMPSupportedFeatures();
    },
    initializeAMPSupportedFeatures: function() {
        var handleCheck = function(data, status, xhr) {
            this.setAmpReachable("success" === status), this.isAmpReachable() ? (this.setFeatures(data), 
            this.setFeatureEnabled("thumbnails", !0)) : this.setFeatures({}), this.fireEvent("featuresloaded");
        }.bind(this);
        this.ajaxPost(AST.Controller.WITHOUT_TOKEN, "/api/assistant/features", {}, handleCheck, handleCheck), 
        AST.Util.isChrome() && (this.addListener("ACTIVE_TAB_CHANGE", function(msg) {
            this.setFeatureEnabled("thumbnails", !msg.result.override && msg.result.initialTabId === msg.result.activeTabId);
        }.bind(this)), this.postCommand("background", {
            type: "CHECK_TAB"
        }));
    },
    initializeCompanionListeners: function() {
        AST.controller.addListener("FROM_EXTERNAL", function(msg) {
            try {
                switch (msg.result.payload.action) {
                  case "connect":
                    AST.Storage.set("companionExtensionId", msg.result.extensionId), 
                    this.postCommand("background", {
                        type: "TO_EXTERNAL",
                        action: "connected",
                        extension: msg.result.extensionId,
                        data: {}
                    });
                    break;

                  case "last-data":
                    var data = AST.Storage.get("last-data");
                    $.isEmpty(data.action) || this.postCommand("background", {
                        type: "TO_EXTERNAL",
                        action: data.action,
                        extension: msg.result.extensionId,
                        data: data.data
                    });
                    break;

                  case "user-info":
                    this.postCommand("background", {
                        type: "TO_EXTERNAL",
                        action: "user-info-response",
                        extension: msg.result.extensionId,
                        data: AST.Storage.get("user-info")
                    });
                    break;

                  case "bp-lookup":
                    var sendData = {
                        bestPracticeID: msg.result.payload.data.bpId
                    };
                    AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/bestpractices/view", sendData, function(data, status, xhr) {
                        this.postCommand("background", {
                            type: "TO_EXTERNAL",
                            action: "bp-response",
                            extension: msg.result.extensionId,
                            data: data.result
                        });
                    }.bind(this), function(data, status, xhr) {
                        AST.logger.log(data, status, xhr);
                    });
                    break;

                  case "test-lookup":
                    AST.controller.ajaxGet(AST.Controller.WITH_TOKEN, "/api/assistant/test/" + msg.result.payload.data.testId, {}, function(data, status, xhr) {
                        this.postCommand("background", {
                            type: "TO_EXTERNAL",
                            action: "test-response",
                            extension: msg.result.extensionId,
                            data: data.result
                        });
                    }.bind(this), function(data, status, xhr) {
                        AST.logger.log(data, status, xhr);
                    });
                }
            } catch (e) {
                AST.logger.log(e);
            }
        }.bind(this));
    },
    notifyCompanionExtension: function(action, data) {
        this.postCommand("background", {
            type: "TO_EXTERNAL",
            action: action,
            extension: AST.Storage.get("companionExtensionId"),
            data: data
        });
    },
    initializeUI: function() {
        this.getMainMenu(), $("body:not(.community) > header > h1").attr("tabindex", 0).click(this.fireEvent.bind(this, "appstart")), 
        window.onresize = function(ev) {
            try {
                var currentSize = AST.Storage.get("window-size");
                null !== currentSize && currentSize.height === window.innerHeight && currentSize.width === window.innerWidth || AST.Storage.set("window-size", {
                    height: window.innerHeight,
                    width: window.innerWidth
                });
            } catch (e) {}
        }, setInterval(function() {
            var currentPosition = AST.Storage.get("window-position");
            null !== currentPosition && currentPosition.x === window.screenX && currentPosition.y === window.screenY || AST.Storage.set("window-position", {
                x: window.screenX,
                y: window.screenY
            });
        }, 500);
        var feedbackContainer = new AST.Element({
            tagName: "li",
            attributes: {
                class: "feedback"
            }
        });
        $("#application-info").append(feedbackContainer.render()), $("#compat-info > a").on("click", AST.Compatibility.handleCompatibilityPopup.bind(AST.Compatibility)), 
        AST.controller.addListener("featuresloaded", function(container) {
            AST.controller.isFeatureEnabled("feedback") && $(container.getEl()).html(new AST.Element({
                tagName: "a",
                content: '<i class="fas fa-comment"> </i> Give Us Your Feedback <span class="a11y-offscreen-text">(Opens new window)</span>',
                attributes: {
                    href: "#"
                },
                listeners: {
                    click: AST.controller.feedback.bind(AST.controller)
                }
            }).render());
        }.bind(window, feedbackContainer), window, feedbackContainer);
    },
    initializeWindowMessaging: function() {
        window.onmessage = function(event) {
            (event = event || {}).data = event.data || {}, "ast" === event.data.destination && (void 0 !== event.data.COMID ? AST.controller.handleComms(event.data.COMID, JSON.stringify(event.data)) : event.data.result && AST.controller.fireEvent(event.data.result.type, event.data));
        }, AST.controller.addListener("IFRAMES_BLOCKED", function(payload) {
            this.iframeWarningContainer && this.iframeWarningContainer.getEl() || (this.iframeWarningContainer = new AST.Element({
                tagName: "div"
            })), this.iframeWarningContainer.setChildren([ new AST.Element({
                tagName: "p",
                content: 'The iframes with the following "src" attributes blocked Assistant from access due to their CORS restrictions. Their content will not be included in results.'
            }), new AST.list.Unordered({
                records: payload.result.origins,
                renderer: function(rec) {
                    return rec.origin + " (" + rec.code + ")";
                },
                attributes: {
                    class: "blocked-iframes-list"
                }
            }) ]), this.iframeWarningModal && this.iframeWarningModal.getEl() || (this.iframeWarningModal = new AST.window.Warning({
                title: '<i class="fas fa-ban"></i> Blocked iframes',
                height: 240,
                width: 360,
                children: [ this.iframeWarningContainer ],
                buttons: [ new AST.form.Button({
                    content: "Ok",
                    listeners: {
                        click: function(ev) {
                            ev.preventDefault(), this.bubbleEvent("closewindow");
                        }
                    }
                }) ]
            }), $(this.iframeWarningModal.getEl()).bind("destroyed", function() {
                this.iframeWarningContainer = null, this.iframeWarningModal = null;
            }.bind(this)), setTimeout(this.iframeWarningModal.render.bind(this.iframeWarningModal, !0), 500));
        }.bind(this));
    },
    initializeStorage: function() {
        AST.Storage.initialize();
    },
    setPageTitle: function(title) {
        window.document.title = "Access Assistant - " + title;
    },
    defaultFailureCallback: function(data, status, xhr) {
        AST.logger.log("Default Failure Callback", arguments), AST.logger.trace(), 
        401 === data.code ? this.handleSessionTimeout() : new AST.window.Warning({
            title: '<i class="fas fa-exclamation-triangle"></i> Error',
            height: 170,
            width: 360,
            children: [ new AST.Element({
                tagName: "p",
                content: "An unknown error has occurred."
            }) ],
            buttons: [ new AST.form.CancelButton({
                content: "Ok",
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render();
    },
    handleSessionTimeout: function() {
        new AST.window.Modal({
            title: '<i class="fas fa-clock"></i> Session Timeout',
            height: 170,
            width: 360,
            children: [ new AST.Element({
                tagName: "p",
                content: "Your AMP session has timed out.  Please login again."
            }) ],
            buttons: [ new AST.form.CancelButton({
                content: "Ok",
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow"), AST.controller.fireEvent("logoff");
                    }
                }
            }) ]
        }).render();
    },
    ajaxGet: function(withToken, url, data, successCallback, failureCallback) {
        this._ajaxRequest(withToken, url, "GET", data, successCallback, failureCallback);
    },
    ajaxPost: function(withToken, url, data, successCallback, failureCallback) {
        this._ajaxRequest(withToken, url, "POST", data, successCallback, failureCallback);
    },
    ajaxPut: function(withToken, url, data, successCallback, failureCallback) {
        this._ajaxRequest(withToken, url, "PUT", data, successCallback, failureCallback);
    },
    ajaxDelete: function(withToken, url, data, successCallback, failureCallback) {
        this._ajaxRequest(withToken, url, "DELETE", data, successCallback, failureCallback);
    },
    _ajaxRequest: function(isPublic, url, method, data, successCallback, failureCallback) {
        method = method || "POST", failureCallback = void 0 !== failureCallback ? failureCallback : this.defaultFailureCallback, 
        null === this.getEndPointUrl(isPublic = void 0 !== isPublic && isPublic) ? failureCallback({
            success: !1,
            message: "Endpoint undefined."
        }, 404) : ($.extend(data || {}, {
            token: AST.Storage.get("token"),
            COMID: $.uniqueid()
        }), successCallback = function(callback, data, status, xhr) {
            void 0 !== data.token && AST.Storage.set("token", data.token), void 0 !== data.expires && AST.tokenWatcher.setExpirationTime(1e3 * data.expires), 
            callback(data, status, xhr);
        }.bind(this, successCallback), failureCallback = function(callback, data, status, xhr) {
            401 === data.code ? this.handleSessionTimeout() : callback(data, status, xhr);
        }.bind(this, failureCallback), this.commsCallbacks[data.COMID] = {
            success: successCallback,
            failure: failureCallback
        }, successCallback = {
            COMID: data.COMID,
            source: "ast",
            destination: "background",
            command: {
                type: "SEND_REQUEST",
                url: this.getEndPointUrl(isPublic) + url,
                method: method,
                data: data
            }
        }, window.postMessage(successCallback, window.origin));
    },
    handleComms: function(comid, data) {
        try {
            if (data = JSON.parse(data), !comid) return AST.logger.log("Could not find UUID in network response", data), 
            void this.defaultFailureCallback();
            if (!this.commsCallbacks[comid]) return AST.logger.log("Could not find success callback function for network response", data), 
            void this.defaultFailureCallback();
            void 0 === data.error ? this.commsCallbacks[comid].success(data, "success") : this.commsCallbacks[comid].failure(data, "failure");
        } catch (e) {
            !0 === AST.Storage.get("debug") && (AST.logger.log("DEBUG", e), AST.logger.trace()), 
            void 0 !== this.commsCallbacks[comid] && "function" == typeof this.commsCallbacks[comid].failure && this.commsCallbacks[comid].failure(data, "failure: " + e);
        }
        delete this.commsCallbacks[comid];
    },
    fireEvent: function(event, args, scope) {
        $.isArray(args) || (args = [ args ]), $.each(this.listeners[event], function(i, listener) {
            listener.callback.apply(scope || listener.scope || window, args), listener.runOnce && this.removeListener(event, i);
        }.bind(this));
    },
    addListener: function(event, callback, scope, boundTo, runOnce) {
        runOnce = void 0 !== runOnce && runOnce;
        var callbackId = $.uniqueid();
        return this.listeners[event] = this.listeners[event] || {}, this.listeners[event][callbackId] = {
            callback: callback,
            scope: scope,
            runOnce: runOnce
        }, void 0 !== boundTo && $(boundTo).bind("destroyed", function(event, callbackId) {
            this.removeListener.call(this, event, callbackId);
        }.bind(this, event, callbackId)), callbackId;
    },
    removeListener: function(event, callbackId) {
        $.isEmpty(this.listeners[event]) || delete this.listeners[event][callbackId];
    },
    removeListeners: function(event) {
        delete this.listeners[event];
    },
    getEndPointUrl: function(isPublic) {
        return (isPublic = void 0 !== isPublic && isPublic) && null === this.endPointUrl ? "https://amp.levelaccess.net" : this.endPointUrl;
    },
    setEndPointUrl: function(url) {
        this.endPointUrl = null !== url ? "https://" + url : null;
    },
    getMainMenu: function() {
        return null === this.mainMenu && (this.mainMenu = new AST.menu.Main(), $("header > nav").append(this.mainMenu.render())), 
        this.mainMenu;
    },
    isLoggedIn: function() {
        return this.loggedIn;
    },
    setLoggedIn: function(val) {
        this.loggedIn = val;
    },
    isAmpReachable: function() {
        return this.ampIsReachable;
    },
    setAmpReachable: function(val) {
        this.ampIsReachable = val;
    },
    setFeatures: function(features) {
        this.features = features;
    },
    getFeatures: function() {
        return this.features;
    },
    isFeatureEnabled: function(feature) {
        return this.getFeatures()[feature] || !1;
    },
    getFeature: function(feature) {
        return this.getFeatures()[feature] || void 0;
    },
    setFeatureEnabled: function(feature, enabled) {
        this.features[feature] = enabled;
    },
    isSuppressSensitiveDataEnabled: function() {
        try {
            return AST.Storage.get("activeAsset", new AST.Model()).get("suppressSensitiveData") ? AST.controller.isFeatureEnabled("suppressSensitiveData") : !1;
        } catch (e) {
            return AST.controller.isFeatureEnabled("suppressSensitiveData");
        }
    },
    feedback: function(ev) {
        try {
            ev.preventDefault();
        } catch (e) {}
        ev = "AST";
        "PRO" !== AST.VERSION && (ev = "ASTC"), this.isFeatureEnabled("feedback") && window.open(this.getEndPointUrl(!0) + "/feedback?source=" + ev);
    },
    renderPage: function(content, title) {
        $("main").empty().append(content.render()), $("main h1").first().attr("tabindex", -1).focus(), 
        this.setPageTitle(title);
    }
}), AST.controller = new AST.Controller(), AST.controller.setEndPointUrl("amp.levelaccess.net"), 
setTimeout(AST.controller.init.bind(AST.controller), 500), AST.NodeCapture = function(c) {
    this.setFilters((c = c || {}).filters || []), AST.window.Modal.prototype.constructor.call(this, c);
}, $.extend(AST.NodeCapture.prototype, AST.window.Modal.prototype, AST.postsMessagesMixin, {
    filters: [],
    frameId: null,
    nodeToFocusInSelector: null,
    launch: function() {
        this.start();
    },
    keyboardLaunch: function() {
        this.connectNodeSelectListener(), this.postCommand("page", {
            type: "NODE_CAPTURE_BODY"
        });
    },
    getFrameId: function() {
        return this.frameId;
    },
    setFrameId: function(frameId) {
        this.frameId = frameId;
    },
    getFilters: function() {
        return this.filters;
    },
    setFilters: function(filters) {
        this.filters = filters;
    },
    getNodeToFocusInSelector: function() {
        return this.nodeToFocusInSelector;
    },
    setNodeToFocusInSelector: function(node) {
        this.nodeToFocusInSelector = node;
    },
    handleFilterClick: function(filters, ev) {
        switch ($(ev.currentTarget).prop("checked")) {
          case !0:
            this.postCommand("page", {
                type: "FILTER_ELEMENTS",
                filters: filters
            });
            break;

          case !1:
            this.postCommand("page", {
                type: "UNFILTER_ELEMENTS",
                filters: filters
            });
        }
    },
    start: function() {
        this.connectNodeSelectListener();
        var children = [ new AST.Element({
            tagName: "h1",
            attributes: {
                style: "text-align: center; padding: 2em; font-size: 2em"
            },
            content: '<i class="fas fa-code"></i> Choose a node in the other window'
        }) ];
        if (AST.controller.isFeatureEnabled("elementFiltering") && 0 < this.getFilters().length) {
            for (var toggles = [ new AST.Element({
                tagName: "p",
                attributes: {
                    class: "instructions"
                },
                content: "Select the elements that should be hidden on the page to make it easier to select the relevant node for testing."
            }) ], i = 0; i < this.getFilters().length; i++) {
                var filter = this.getFilters()[i];
                toggles.push(new AST.form.Toggle({
                    label: filter.name,
                    onLabel: "Hide",
                    offLabel: "Show",
                    listeners: {
                        click: this.handleFilterClick.bind(this, filter.filters)
                    }
                }));
            }
            children.push(new AST.form.Fieldset({
                legend: "Filter Elements",
                children: toggles
            }));
        }
        this.modalBlocker = new AST.window.Popup({
            id: "select-node",
            title: "Select Node",
            target: this.getTarget(),
            height: 90,
            width: 90,
            attributes: {
                class: "blocker"
            },
            children: children
        }), AST.controller.addListener("windowclose", function(id) {
            id === this.modalBlocker.getId() && (this.disconnectNodeSelectListener(), 
            this.postCommand("page", {
                type: "STOP_NODE_HIGHLIGHTING"
            }), this.postCommand("page", {
                type: "UNFILTER_ALL_ELEMENTS"
            }));
        }.bind(this), this, this.modalBlocker.getEl(), !0), this.modalBlocker.render(), 
        this.postCommand("page", {
            type: "START_NODE_HIGHLIGHTING"
        });
    },
    connectNodeSelectListener: function() {
        this.resultsListener = this.handleNodeSelected.bind(this), window.addEventListener("message", this.resultsListener, !1);
    },
    disconnectNodeSelectListener: function() {
        window.removeEventListener("message", this.resultsListener, !1);
    },
    handleNodeSelected: function(event) {
        try {
            var srcHtml;
            "NODE_SELECTION" === event.data.result.type && (this.postCommand("background", {
                type: "ACTIVATE_AST"
            }), this.disconnectNodeSelectListener(), this.setFrameId(event.data.result.frameId), 
            srcHtml = (srcHtml = (srcHtml = JSON.parse(event.data.result.node)).replace(/<\s*body(.*?)>/gi, '<div data-was="body"$1>')).replace(/<\/\s*body(.*?)>/gi, "</div$1>"), 
            this.handleCapture($(srcHtml)));
        } catch (e) {}
    },
    handleCapture: function(node) {
        void 0 !== this.modalBlocker && this.modalBlocker.close(), this.inspectModal = new AST.window.Popup({
            tagName: "div",
            title: "Confirm Node Selection",
            height: 90,
            width: 90,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                attributes: {
                    class: "instructions"
                },
                content: "Confirm your node selection below or select a child node to refine your node selection."
            }), new AST.PageActions({
                children: [ new AST.search.Search({
                    id: "node-capture-search",
                    placeholder: " Search HTML"
                }) ]
            }), new AST.Element({
                tagName: "div",
                attributes: {
                    class: "inspect-tool"
                },
                children: [ this.prettyPrintHtml(node, 0) ]
            }) ]
        }), AST.controller.addListener("handlesearch", this.handleSearchHTML, this, this.inspectModal.getEl()), 
        AST.controller.addListener("windowclose", function(id) {
            id === this.inspectModal.getId() && (this.postCommand("page", {
                type: "STOP_NODE_HIGHLIGHTING"
            }), this.postCommand("page", {
                type: "UNFILTER_ALL_ELEMENTS"
            }));
        }.bind(this), this, this.inspectModal.getEl(), !0), this.inspectModal.render(), 
        setTimeout(this.focusNodeInSelector.bind(this), 500), setTimeout(this.loadSearchableAttributes.bind(this), 500);
    },
    focusNodeInSelector: function() {
        if (null !== this.getNodeToFocusInSelector() && null !== this.getNodeToFocusInSelector().getEl()) {
            var node = $(this.getNodeToFocusInSelector().getEl())[0];
            try {
                node.scrollIntoView(), node.focus();
            } catch (e) {}
        }
    },
    loadSearchableAttributes: function() {
        $(".searchable-node").each(function(i, node) {
            $(node).attr("data-content", $("code", node)[0].innerText);
        });
    },
    handleNodeSelection: function(node, ev) {
        ev.preventDefault(), this.inspectModal.close(), AST.controller.fireEvent("nodecaptureselection", [ node, this.getFrameId() ]);
    },
    prettyPrintHtml: function(node, indent) {
        var pre = new AST.Element({
            tagName: "pre",
            attributes: {}
        });
        return this.recursivePrettyPrintHtml(pre, node, indent, null), pre;
    },
    appendChild: function(outer, inner) {
        outer.addChild(inner);
    },
    recursivePrettyPrintHtml: function(pre, node, indent, parentId) {
        var space, tag, close, id = $.uniqueid(), isCapturedNode = "true" === $(node).attr("data-la-node-captured"), linkWrapper = new AST.Element({
            id: id + "-wrapper",
            tagName: "a",
            attributes: {
                href: "#",
                tabIndex: 0,
                class: (isCapturedNode ? "selected" : "") + " searchable-node",
                "data-id": id
            },
            listeners: {
                click: this.handleNodeSelection.bind(this, node)
            }
        }), code = new AST.Element({
            tagName: "code",
            attributes: {
                class: "start indent-" + indent
            }
        });
        switch (node[0].nodeType) {
          case Node.ELEMENT_NODE:
            var tagName = node.prop("tagName").toLowerCase();
            "body" === node.attr("data-was") && (tagName = "body"), open = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: "<"
            }), this.appendChild(code, open), tag = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "tagName"
                },
                content: tagName
            }), this.appendChild(code, tag), 0 < node[0].attributes.length && (space = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "space"
                },
                content: " "
            }), this.appendChild(code, space));
            for (var j = 0, k = node[0].attributes.length; j < k; j++) {
                var attrName, attr = node[0].attributes[j];
                0 !== attr.nodeName.indexOf("data-was") && 0 !== attr.nodeName.indexOf("data-ae") && 0 !== attr.nodeName.indexOf("data-la-node-captured") && (attrName = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attributeName"
                    },
                    content: attr.nodeName
                }), this.appendChild(code, attrName), attrName = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attrQuote"
                    },
                    content: '="'
                }), this.appendChild(code, attrName), attrName = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attributeValue"
                    },
                    content: attr.nodeValue
                }), this.appendChild(code, attrName), attr = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "attrQuote"
                    },
                    content: '"'
                }), this.appendChild(code, attr), j + 1 !== k && (space = new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "space"
                    },
                    content: " "
                }), this.appendChild(code, space)));
            }
            close = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: ">"
            }), this.appendChild(code, close), isCapturedNode && this.appendChild(linkWrapper, new AST.Element({
                tagName: "i",
                attributes: {
                    class: "fas fa-hand-point-right"
                }
            })), this.appendChild(linkWrapper, code), this.appendChild(pre, linkWrapper), 
            tagName && "html" !== tagName && node.contents().each(function(i, child) {
                this.recursivePrettyPrintHtml(pre, $(child), indent + 1, id);
            }.bind(this));
            var closeContainer = new AST.Element({
                id: id + "-close",
                tagName: "code",
                attributes: {
                    class: "end indent-" + indent + " searchable-node-close"
                }
            }), open = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: "</"
            });
            this.appendChild(closeContainer, open), tag = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "tagName"
                },
                content: tagName
            }), this.appendChild(closeContainer, tag), close = new AST.Element({
                tagName: "span",
                attributes: {
                    class: "open"
                },
                content: ">"
            }), this.appendChild(closeContainer, close), this.appendChild(pre, closeContainer);
            break;

          case Node.TEXT_NODE:
            0 < node.text().trim().length && (open = new AST.Element({
                id: parentId + "-text",
                tagName: "span",
                attributes: {
                    class: "searchable-node-text txt indent-" + indent
                },
                content: node.text().trim()
            }), this.appendChild(pre, open));
        }
        return isCapturedNode && this.setNodeToFocusInSelector(linkWrapper), code;
    },
    handleSearchHTML: function(search, formId) {
        "node-capture-search" === formId && ($(".searchable-node, .searchable-node-close, .searchable-node-text").removeClass("dim"), 
        0 !== search.length && ($(".searchable-node").each(function(i, node) {
            node = $(node);
            -1 === node.attr("data-content").indexOf(search) && (node.addClass("dim").attr("tabindex", -1), 
            $("#" + node.attr("data-id") + "-close").addClass("dim"), $("#" + node.attr("data-id") + "-text").addClass("dim"));
        }), 0 < (formId = $(".searchable-node:not(.dim)")).length && (formId[0].scrollIntoView(), 
        formId[0].focus())));
    }
}), AST.ThumbnailCapture = {
    snap: function() {
        window.postMessage({
            source: "ast",
            destination: "background",
            command: {
                type: "CAPTURE_THUMBNAIL",
                screenshot: !0,
                devicePixelRatio: window.devicePixelRatio
            }
        }, "*");
    }
}, $(document).ready(function() {
    $ACC.bootstrap(), AST.controller.addListener("error", function(data, status, xhr) {
        $("#windows-container").html(""), AST.controller.defaultFailureCallback(data, status, xhr);
    });
}), AST.Pages = AST.Pages || {}, AST.Pages.elementFilter = AST.Pages.elementFilter || {}, 
AST.Pages.elementFilter.mixin = AST.Pages.elementFilter.mixin || {}, AST.Pages.elementFilter.mixin.testBeforeSave = {
    handleTest: function(ev) {
        ev.preventDefault(), this.validate() && (this.postCommand("page", {
            type: "FILTER_ELEMENTS",
            filters: this.getModel().get("filters")
        }), setTimeout(this.timeoutTest.bind(this), 2e3));
    },
    timeoutTest: function() {
        this.postCommand("page", {
            type: "UNFILTER_ALL_ELEMENTS"
        });
    },
    getTestButton: function() {
        return new AST.form.Button({
            content: "Test",
            disableFor: 2e3,
            listeners: {
                click: this.handleTest.bind(this)
            }
        });
    }
}, $.extend(AST.Pages.elementFilter.mixin.testBeforeSave, AST.postsMessagesMixin), 
AST.Pages.elementFilter = AST.Pages.elementFilter || {}, AST.Pages.elementFilter.Delete = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.elementFilter.Delete.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault(), el.bubbleEvent("closewindow"), AST.controller.ajaxDelete(AST.Controller.WITH_TOKEN, "/api/assistant/asset/" + AST.Storage.get("activeAsset", new AST.Model()).get("projectID") + "/elementFilter/" + this.getModel().get("id"), {}, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("reloadfilterlist");
        }.bind(this, el));
    },
    launch: function() {
        this.getModal().render();
    },
    getModal: function() {
        var deleteButton = new AST.form.Button({
            content: "Delete"
        });
        return deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Delete Element Filter?',
            height: 170,
            width: 360,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: 'Are you sure you want to delete element filter "<em>' + this.getModel().get("name") + '</em>"?'
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        });
    }
}), AST.Pages.elementFilter = AST.Pages.elementFilter || {}, AST.Pages.elementFilter.Edit = function(data, target) {
    this.initModel(data), this.setTarget(target), this.getModel().set("projectID", AST.Storage.get("activeAsset", new AST.Model()).get("projectID"));
}, $.extend(AST.Pages.elementFilter.Edit.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.Pages.elementFilter.mixin.testBeforeSave, {
    handleSave: function(ev) {
        ev.preventDefault();
        ev = this.getData();
        this.validate() && AST.controller.ajaxPut(AST.Controller.WITH_TOKEN, "/api/assistant/asset/" + AST.Storage.get("activeAsset", new AST.Model()).get("projectID") + "/elementFilter/" + ev.id, ev, function(data, status, xhr) {
            "success" !== status ? alert("Error") : (this.modal.close(), AST.controller.fireEvent("reloadfilterlist"));
        }.bind(this), void 0, "PUT");
    },
    validate: function() {
        try {
            return document.querySelector(this.getModel().get("filters")), !0;
        } catch (e) {}
        return this.modal.handleErrors([ new AST.Element({
            tagName: "li",
            content: "CSS Selectors are invalid"
        }) ]), !1;
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.modal.close();
    },
    launch: function() {
        var permissionsRadios = [ new AST.form.Radio({
            label: "Only Me",
            model: this.getModel(),
            modelProperty: "shared",
            attributes: {
                name: "permissions-selector",
                value: 0
            }
        }), new AST.form.Radio({
            label: "Everyone",
            model: this.getModel(),
            modelProperty: "shared",
            attributes: {
                name: "permissions-selector",
                value: 1
            }
        }) ];
        (this.getModel().get("shared") ? permissionsRadios[1] : permissionsRadios[0]).setAttribute("checked"), 
        this.modal = new AST.window.Modal({
            title: "Edit Element Filter",
            height: 420,
            width: 400,
            target: this.getTarget(),
            listeners: {
                submit: this.handleSave.bind(this)
            },
            children: [ new AST.Element({
                tagName: "h1",
                content: "Edit Element Filter"
            }), new AST.form.Text({
                label: "Name",
                model: this.getModel(),
                modelProperty: "name"
            }), new AST.form.RadioGroup({
                label: "Permissions",
                children: permissionsRadios
            }), new AST.form.TextArea({
                label: "CSS Selectors",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "filters"
            }), this.getTestButton() ],
            buttons: [ new AST.form.Button({
                content: "Save",
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ]
        }), this.modal.render();
    }
}), AST.Pages.elementFilter = AST.Pages.elementFilter || {}, AST.Pages.elementFilter.List = function() {}, 
$.extend(AST.Pages.elementFilter.List.prototype, {
    handleNew: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("filternew");
    },
    handleView: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("filterview", data);
    },
    handleEdit: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("filteredit", data);
    },
    handleDelete: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("filterdelete", data);
    },
    launch: function() {
        var children = [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), AST.controller.fireEvent("assetview", AST.Storage.get("activeAsset", new AST.Model()).getData());
                }
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h1",
            content: "Filters for " + AST.Storage.get("activeAsset", new AST.Model()).get("name")
        }) ], reqPerms = [ AST.Login.permissions.STANDARD_USER, AST.Login.permissions.ORGANIZATION_ADMINISTRATOR, AST.Login.permissions.SYSTEM_ADMINISTRATOR, AST.Login.permissions.ROOT_ADMINISTRATOR ], actions = [], reqPerms = (AST.Login.hasPermission(reqPerms) && actions.push(new AST.form.Button({
            listeners: {
                click: this.handleNew.bind(this)
            },
            content: '<i class="fas fa-plus-circle"></i> <span class="a11y-offscreen-text">Create New </span>  Element Filter'
        })), new AST.datagrid.Simple({
            columns: [ new AST.datagrid.Column({
                dataIndex: "name",
                content: "Name",
                renderer: function(rec) {
                    var handler = this.handleEdit.bind(this, rec);
                    return rec.isOwner || (handler = this.handleView.bind(this, rec)), 
                    new AST.Element({
                        tagName: "a",
                        attributes: {
                            href: "#"
                        },
                        listeners: {
                            click: handler
                        },
                        content: rec.name
                    }).render();
                }.bind(this)
            }), new AST.datagrid.Column({
                dataIndex: "filters",
                content: "CSS Selectors"
            }), new AST.datagrid.Column({
                dataIndex: "shared",
                content: "Permissions",
                renderer: function(rec) {
                    return rec.shared ? "Everyone" : "Only Me";
                }
            }), new AST.datagrid.Column({
                content: "Actions",
                attributes: {
                    class: "actions"
                },
                renderer: function(rec) {
                    if (!rec.isOwner) return "&nbsp;";
                    var buttons = [ new AST.form.Button({
                        listeners: {
                            click: this.handleEdit.bind(this, rec)
                        },
                        attributes: {
                            title: "Edit"
                        },
                        content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + rec.name + "</span>"
                    }) ];
                    return AST.controller.isFeatureEnabled("limitDelete") && !AST.Login.isSysAdmin(AST.Storage.get("activeAsset").get("organizationID")) || buttons.push(new AST.form.Button({
                        listeners: {
                            click: this.handleDelete.bind(this, rec)
                        },
                        attributes: {
                            title: "Delete"
                        },
                        content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Delete ' + rec.name + "</span>"
                    })), new AST.Element({
                        tagName: "div",
                        children: buttons
                    }).render();
                }.bind(this)
            }) ],
            dataUrl: "/api/assistant/asset/" + AST.Storage.get("activeAsset", new AST.Model()).get("projectID") + "/elementFilter",
            dataMethod: "GET",
            autoload: !0,
            actions: actions,
            dataMapping: function(data) {
                return data.id = data.filter_id, data.projectID = data.project_id, 
                data.shared = 1 === parseInt(data.shared), data.isOwner = 1 === parseInt(data.isOwner), 
                data;
            }
        })), actions = (AST.controller.addListener("reloadfilterlist", reqPerms.load, reqPerms, reqPerms.getEl()), 
        children.push(reqPerms), new AST.Element({
            tagName: "section",
            attributes: {
                class: "home-screen"
            },
            children: children
        }));
        AST.controller.renderPage(actions, "Element Filters");
    }
}), AST.Pages.elementFilter = AST.Pages.elementFilter || {}, AST.Pages.elementFilter.New = function(target) {
    this.initModel(), this.setTarget(target), this.getModel().set("projectID", AST.Storage.get("activeAsset", new AST.Model()).get("projectID"));
}, $.extend(AST.Pages.elementFilter.New.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.Pages.elementFilter.mixin.testBeforeSave, {
    handleSave: function(ev) {
        ev.preventDefault();
        ev = this.getData();
        this.validate() && AST.controller.ajaxPut(AST.Controller.WITH_TOKEN, "/api/assistant/asset/" + AST.Storage.get("activeAsset", new AST.Model()).get("projectID") + "/elementFilter", ev, function(data, status, xhr) {
            "success" !== status ? alert("Error") : (this.modal.close(), AST.controller.fireEvent("reloadfilterlist"));
        }.bind(this), void 0, "PUT");
    },
    validate: function() {
        var errors = [];
        if ($.isEmpty(this.getModel().get("name")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Name is required"
        })), $.isEmpty(this.getModel().get("filters"))) errors.push(new AST.Element({
            tagName: "li",
            content: "CSS Selectors are required"
        })); else try {
            document.querySelector(this.getModel().get("filters"));
        } catch (e) {
            errors.push(new AST.Element({
                tagName: "li",
                content: "CSS Selectors are invalid"
            }));
        }
        return 0 === errors.length || (this.modal.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.modal.close();
    },
    launch: function() {
        var permissionsRadios = [ new AST.form.Radio({
            label: "Only Me",
            model: this.getModel(),
            modelProperty: "shared",
            attributes: {
                name: "permissions-selector",
                value: 0
            }
        }), new AST.form.Radio({
            label: "Everyone",
            model: this.getModel(),
            modelProperty: "shared",
            attributes: {
                name: "permissions-selector",
                value: 1
            }
        }) ];
        (this.getModel().get("shared") ? permissionsRadios[1] : permissionsRadios[0]).setAttribute("checked"), 
        this.modal = new AST.window.Modal({
            title: "Create New Element Filter",
            height: 400,
            width: 600,
            target: this.getTarget(),
            listeners: {
                submit: this.handleSave.bind(this)
            },
            children: [ new AST.form.Text({
                label: "Name",
                model: this.getModel(),
                modelProperty: "name"
            }), new AST.form.RadioGroup({
                label: "Permissions",
                children: permissionsRadios
            }), new AST.form.TextArea({
                label: "CSS Selectors",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "filters"
            }), this.getTestButton() ],
            buttons: [ new AST.form.Button({
                content: "Save",
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ]
        }), this.modal.render();
    }
}), AST.Pages.elementFilter = AST.Pages.elementFilter || {}, AST.Pages.elementFilter.View = function(data, target) {
    this.initModel(data), this.setTarget(target), this.getModel().set("projectID", AST.Storage.get("activeAsset", new AST.Model()).get("projectID"));
    data = AST.Storage.get("element-filters", []);
    this.getModel().set("filters", data[this.getModel().get("projectID")] || "");
}, $.extend(AST.Pages.elementFilter.View.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    launch: function() {
        this.modal = new AST.window.Modal({
            title: "View Element Filter",
            height: 400,
            width: 400,
            target: this.getTarget(),
            listeners: {
                submit: this.handleSave.bind(this)
            },
            children: [ new AST.Element({
                tagName: "h1",
                content: "View Element Filter"
            }), new AST.form.DisplayText({
                label: "Name",
                content: this.getModel().get("name")
            }), new AST.form.DisplayText({
                label: "Permissions",
                content: this.getModel().get("shared") ? "Everyone" : "Only Me"
            }), new AST.form.DisplayText({
                label: "CSS Selectors",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "filters"
            }) ]
        }), this.modal.render();
    }
}), AST.Pages.report = AST.Pages.report || {}, AST.Pages.report.View = function(data) {
    this.initModel(data), this.getModel().initExternalListener("report"), AST.Storage.set("activeReport", this.getModel());
    function noop() {}
    AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/reports/logView", {}, noop, noop);
}, $.extend(AST.Pages.report.View.prototype, AST.hasDataModelMixin, {
    handleAddPage: function(ev) {
        ev.preventDefault();
        ev = {
            reportID: this.getModel().get("id")
        };
        AST.controller.fireEvent("modulenew", ev);
    },
    handleAddNode: function(ev) {
        ev.preventDefault();
        ev = {
            reportID: this.getModel().get("id")
        };
        AST.controller.fireEvent("modulenode", ev);
    },
    handleAddPattern: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("patternnew", [ {}, ev.currentTarget ]);
    },
    launch: function() {
        this.draw();
    },
    draw: function() {
        var patternsPanel, tabPanel, children = [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), AST.controller.fireEvent("assetview", AST.Storage.get("activeAsset", new AST.Model()).getData());
                }.bind(this)
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h1",
            content: "Report: " + this.getModel().get("name")
        }), new AST.Element({
            tagName: "h2",
            content: "Asset: " + AST.Storage.get("activeAsset", new AST.Model()).get("name")
        }), new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: "Open existing modules to continue testing or add a module to test a new page or node."
        }) ], actions = (this.getModel().get("isWritable") && (actions = [ new AST.Element({
            tagName: "div",
            attributes: {
                class: "btn-group"
            },
            children: [ new AST.Element({
                tagName: "span",
                content: "Add Module: "
            }), new AST.form.Button({
                listeners: {
                    click: this.handleAddPage.bind(this)
                },
                content: '<i class="fas fa-sticky-note"></i> Current Page'
            }), new AST.form.Button({
                listeners: {
                    click: this.handleAddNode.bind(this)
                },
                content: '<i class="fas fa-code"></i> Capture Node'
            }) ]
        }) ], AST.controller.isFeatureEnabled("legacyPatterns") && actions.push(new AST.form.Button({
            listeners: {
                click: this.handleAddPattern.bind(this)
            },
            content: '<i class="fas fa-plus-circle"></i> <span class="a11y-offscreen-text">Create New </span> Pattern'
        })), children.push(new AST.PageActions({
            children: actions
        }))), AST.controller.isFeatureEnabled("legacyPatterns") ? (patternsPanel = this.getPatternsPanel(), 
        tabPanel = new AST.tabs.Panel({
            children: [ new AST.tabs.Tab({
                title: "Modules",
                children: [ this.getModulesTable() ]
            }), new AST.tabs.Tab({
                title: "Patterns",
                children: [ patternsPanel ]
            }) ]
        }), $.each(tabPanel.getChildren(), function(i, tab) {
            AST.controller.addListener("tab-active-" + tab.getId(), function() {
                "Patterns" === tab.getTitle() && AST.controller.fireEvent("reloadpatternlist"), 
                tab.render();
            }, tab, tabPanel.getEl());
        }), AST.controller.addListener("reloadpatternlist", function() {
            this.getPatternInstances(patternsPanel);
        }, this, tabPanel.getEl()), children.push(tabPanel)) : children.push(this.getModulesTable()), 
        new AST.Element({
            tagName: "section",
            attributes: {
                class: "report-view"
            },
            children: children
        }));
        AST.controller.renderPage(actions, "View Report");
    },
    getModulesTable: function() {
        var actions = [], actions = (AST.controller.isFeatureEnabled("moduleSearch") && actions.push(new AST.search.Search({
            id: "modules-list-search",
            placeholder: " Search Modules"
        })), new AST.Pages.report.View.ModulesDatagrid({
            model: this.getModel(),
            params: {
                reportID: this.getModel().get("id"),
                isWritable: this.getModel().get("isWritable")
            },
            pagination: {
                enabled: !0,
                pageLength: 25
            },
            actions: actions
        }));
        return AST.controller.addListener("reloadmodulelist", actions.load, actions, actions.getEl()), 
        actions;
    },
    getPatternsPanel: function() {
        var panel = new AST.Element({
            tagName: "ul",
            attributes: {
                class: "instance-list"
            }
        });
        return this.getPatternInstances(panel), panel;
    },
    getPatternInstances: function(panel) {
        panel.setChildren([]);
        var activeReport = AST.Storage.get("activeReport", new AST.Model()), successHandler = function(data) {
            this.bps = data.result.bps, $.each(data.result.patterns, function(i, data) {
                panel.addChild(this.getPattern(data));
            }.bind(this)), panel.render();
        }.bind(this), errorHandler = function(data) {
            data && data.result && data.result.error && "true" === data.result.error && (panel.addChild(new AST.Element({
                tagName: "li",
                content: data.result.message,
                attributes: {
                    class: "no-data"
                }
            })), panel.render());
        }.bind(this);
        AST.controller.ajaxGet(AST.Controller.WITH_TOKEN, "/api/assistant/reports/" + activeReport.get("id") + "/pattern", {}, successHandler, errorHandler);
    },
    getPattern: function(data) {
        try {
            var innerContainer = this._renderPatternGrid(data), titleElements = [ new AST.Element({
                tagName: "span",
                content: data.label
            }) ];
            return titleElements.push(new AST.Element({
                tagName: "span",
                attributes: {
                    class: "instance-count"
                },
                content: "Modules: " + data.modules.length
            })), titleElements.push(new AST.Element({
                tagName: "span",
                attributes: {
                    class: "instance-count"
                },
                content: '<i class="fas fa-bug" title="Best Practices"></i> ' + data.members.length
            })), titleElements.push(new AST.form.Button({
                content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + data.label + "</span>",
                attributes: {
                    title: "Edit " + data.label
                },
                listeners: {
                    click: this.handleEditPattern.bind(this, data)
                }
            })), titleElements.push(new AST.form.Button({
                content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Delete ' + data.label + "</span>",
                attributes: {
                    title: "Delete " + data.label
                },
                listeners: {
                    click: this.handleDeletePattern.bind(this, data)
                }
            })), new AST.Element({
                tagName: "li",
                children: [ new AST.panels.GridPanel({
                    collapsible: !0,
                    title: titleElements,
                    children: [ innerContainer ]
                }) ]
            });
        } catch (e) {
            AST.logger.log(e);
        }
    },
    _renderPatternGrid: function(data) {
        return new AST.Element({
            tagName: "div",
            attributes: {
                role: "region",
                class: "content"
            },
            children: [ new AST.datagrid.Simple({
                columns: [ new AST.datagrid.Column({
                    dataIndex: "bp_name",
                    content: "Best Practice",
                    attributes: {
                        class: "width-50"
                    },
                    renderer: function(bps, rec) {
                        return new AST.Element({
                            tagName: "a",
                            content: this.bps[rec.violation_id],
                            attributes: {
                                href: "#"
                            },
                            listeners: {
                                click: function(data, ev) {
                                    ev.preventDefault(), AST.controller.fireEvent("bpview", [ rec, ev.target ]);
                                }.bind(this, data)
                            }
                        }).render();
                    }.bind(this, data.violations)
                }), new AST.datagrid.Column({
                    dataIndex: "element",
                    content: "Description",
                    attributes: {
                        class: "width-50"
                    },
                    renderer: function(rec) {
                        return AST.Util.encodeHTML(rec.element);
                    }
                }) ],
                records: data.members
            }) ]
        });
    },
    handleEditPattern: function(data, ev) {
        ev.preventDefault(), data.moduleID = data.id, AST.controller.fireEvent("patternedit", [ data, ev.currentTarget ]);
    },
    handleDeletePattern: function(data, ev) {
        ev.preventDefault(), data.moduleID = data.id, AST.controller.fireEvent("patterndelete", [ data, ev.currentTarget ]);
    }
}), AST.Pages.report = AST.Pages.report || {}, AST.Pages.report.Delete = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.report.Delete.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault(), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/reports/delete", {
            reportID: this.getModel().get("id")
        }, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("reloadassetlist");
        }.bind(this, el));
    },
    launch: function() {
        var deleteButton = new AST.form.Button({
            content: "Delete"
        });
        deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Delete Report?',
            height: 175,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "This action will delete the report and all modules and testing data saved in it. Continue?"
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render();
    }
}), AST.Pages.report = AST.Pages.report || {}, AST.Pages.report.Edit = function(data, target) {
    this.initModel(data), this.getModel().initExternalListener("report"), this.setTarget(target);
}, $.extend(AST.Pages.report.Edit.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleSave: function(el, ev) {
        ev.preventDefault(), this.validate() && (ev = {
            reportID: this.getModel().get("id"),
            projectID: this.getModel().get("projectID"),
            name: this.getModel().get("name")
        }, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/reports/edit", ev, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("reloadassetlist");
        }.bind(this, el)));
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("name")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Report Name is required"
        })), 0 === errors.length || (this.modal.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.bubbleEvent("closewindow");
    },
    launch: function() {
        var saveButton = new AST.form.Button({
            content: "Save"
        });
        saveButton.addListener("click", this.handleSave.bind(this, saveButton)), 
        this.modal = new AST.window.Modal({
            title: '<i class="fas fa-pencil-alt"></i> Edit Report',
            height: 200,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.form.Text({
                id: "reportName",
                label: "Report Name",
                model: this.getModel(),
                modelProperty: "name",
                required: !0
            }) ],
            buttons: [ saveButton, new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this, saveButton)
            }
        }), this.modal.render();
    }
}), AST.Pages.report = AST.Pages.report || {}, AST.Pages.report.New = function(data) {
    this.initModel(data);
}, $.extend(AST.Pages.report.New.prototype, AST.hasDataModelMixin, {
    handleSave: function(ev) {
        ev.preventDefault(), this.validate() && (ev = {
            reportID: 0,
            projectID: AST.Storage.get("activeAsset", new AST.Model()).get("projectID"),
            name: this.getModel().get("reportName")
        }, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/reports/edit", ev, function(data, status, xhr) {
            "success" === status && (status = {
                id: data.result.report_id,
                name: data.result.application_name,
                projectID: AST.Storage.get("activeAsset", new AST.Model()).get("projectID"),
                isWritable: !0
            }, AST.controller.fireEvent("reportview", status));
        }.bind(this)));
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("reportName")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Report Name is required"
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("assetview", this.getData());
    },
    launch: function() {
        this.form = new AST.form.Form({
            children: [ new AST.Element({
                tagName: "h1",
                content: "Create New Report"
            }), new AST.form.Text({
                id: "report",
                label: "Report Name",
                model: this.getModel(),
                modelProperty: "reportName",
                required: !0
            }) ],
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Save"
                },
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this)
            }
        }), AST.controller.renderPage(this.form, "Create New Report");
    }
}), AST.Pages.report = AST.Pages.report || {}, AST.Pages.report.View = AST.Pages.report.View || {}, 
AST.Pages.report.View.ModulesDatagrid = function(c) {
    this.setModel(c.model || new AST.Model()), c.columns = [ new AST.datagrid.Column({
        content: "Module",
        renderer: function(rec) {
            var ieVars = $.extend({}, rec, this.getModel(), this.getModel().getData(), {
                reportID: this.getModel().get("id"),
                reportName: this.getModel().get("name"),
                moduleID: String(rec.id),
                testingComplete: String(4 === rec.moduleState)
            });
            return delete ieVars.data, new AST.Element({
                tagName: "a",
                attributes: {
                    href: "#",
                    "data-la-module-data": JSON.stringify(ieVars)
                },
                listeners: {
                    click: this.handleViewModule.bind(this, rec)
                },
                content: rec.moduleName
            }).render();
        }.bind(this)
    }), new AST.datagrid.Column({
        content: "Testing Status",
        attributes: {
            class: "capitalize"
        },
        renderer: function(rec) {
            var icon = "", status = "", tooltip = "", tooltip = rec.moduleState < 4 ? (status = "Needs Manual Testing", 
            icon = "fa-ellipsis-h-alt icon-gray", "Select to change status to Complete.") : (status = "Complete", 
            icon = "fa-check icon-green", "Select to change status to In Progress.");
            return new AST.Element({
                tagName: "a",
                attributes: {
                    href: "#",
                    title: tooltip,
                    class: "action-link"
                },
                listeners: {
                    click: this.handleStatusChange.bind(this, rec)
                },
                content: '<i class="fas ' + icon + '"></i> ' + status
            }).render();
        }.bind(this)
    }) ], AST.controller.isFeatureEnabled("moduleSearch") && c.columns.push(new AST.datagrid.Column({
        content: "Tester",
        dataIndex: "tester"
    })), c.columns.push(new AST.datagrid.Column({
        content: "Actions",
        attributes: {
            class: "actions"
        },
        renderer: function(rec) {
            var buttons;
            return this.getModel().get("isWritable") ? (buttons = [ new AST.form.Button({
                listeners: {
                    click: this.handleEdit.bind(this, rec)
                },
                attributes: {
                    title: "Edit"
                },
                content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + rec.moduleName + "</span>"
            }) ], AST.controller.isFeatureEnabled("limitDelete") && !AST.Login.isSysAdmin(AST.Storage.get("activeAsset").get("organizationID")) || buttons.push(new AST.form.Button({
                listeners: {
                    click: this.handleDelete.bind(this, rec)
                },
                attributes: {
                    title: "Delete"
                },
                content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Delete ' + rec.moduleName + "</span>"
            })), new AST.Element({
                tagName: "div",
                children: buttons
            }).render()) : "";
        }.bind(this)
    })), c.dataUrl = "/api/assistant/modules/list", c.autoload = c.autoload || !0, 
    AST.datagrid.Simple.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.report.View.ModulesDatagrid.prototype, AST.datagrid.Simple.prototype, AST.hasDataModelMixin, {
    handleEdit: function(data, ev) {
        ev.preventDefault(), (data = this.mapData(data)).moduleID = data.id, AST.controller.fireEvent("moduleedit", data);
    },
    handleDelete: function(data, ev) {
        ev.preventDefault(), (data = this.mapData(data)).moduleID = data.id, AST.controller.fireEvent("moduledelete", [ data, ev.currentTarget ]);
    },
    handleStatusChange: function(data, ev) {
        ev.preventDefault(), (data = this.mapData(data)).moduleID = data.id, data.testingComplete = data.moduleState < 4, 
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/edit", data, function() {
            this.load();
        }.bind(this));
    },
    handleViewModule: function(data, ev) {
        ev.preventDefault(), (data = this.mapData(data)).moduleID = data.id, data.testingComplete = 4 === data.moduleState, 
        data.isWritable = this.getModel().get("isWritable"), AST.controller.fireEvent("moduleview", data);
    },
    mapData: function(data) {
        return data.reportID = this.getModel().get("id"), data.projectID = this.getModel().get("projectID"), 
        data.organizationID = this.getModel().get("organizationID"), data.reportName = this.getModel().get("name"), 
        data.projectName = this.getModel().get("projectName"), data.isWritable = this.getModel().get("isWritable"), 
        data;
    }
}), AST.module = AST.module || {}, AST.module.testingDialogs = {
    displayLoadingDialog: function() {
        this.loadingDialog = new AST.window.Modal({
            title: "Loading",
            height: 120,
            width: 300,
            children: [ new AST.Element({
                tagName: "h2",
                content: '<i class="fas fa-circle-notch fa-spin"></i> Loading page information...'
            }) ]
        }), this.loadingDialog.render(!0);
    },
    displaySavingDialog: function() {
        this.savingDialog = new AST.window.Modal({
            title: "Saving",
            height: 120,
            width: 300,
            children: [ new AST.Element({
                tagName: "h2",
                content: '<i class="fas fa-circle-notch fa-spin"></i> Saving module...'
            }) ]
        }), this.savingDialog.render(!0);
    },
    displayThumbnailDialog: function() {
        this.thumbnailDialog = new AST.window.Modal({
            title: "Saving",
            height: 120,
            width: 300,
            children: [ new AST.Element({
                tagName: "h2",
                content: '<i class="fas fa-circle-notch fa-spin"></i> Saving thumbnail...'
            }) ]
        }), this.thumbnailDialog.render(!0);
    },
    displayRetestDialog: function(ev) {
        ev.preventDefault(), this.retestDialog = new AST.window.Modal({
            title: "Retest Module",
            height: 220,
            width: 360,
            target: ev.target,
            children: [ new AST.Element({
                tagName: "p",
                content: "Choose whether to add to existing results or overwrite them completely. You can also choose whether to test iframe content."
            }), new AST.form.Checkbox({
                label: "Test iframe Content",
                model: this.getModel(),
                modelProperty: "testIframes",
                attributes: {
                    name: "testIframes",
                    value: "true"
                },
                initChecked: !1
            }) ],
            buttons: [ new AST.form.Button({
                content: "Add",
                listeners: {
                    click: function() {
                        this.handleRetest(!0), this.retestDialog.close();
                    }.bind(this)
                }
            }), new AST.form.Button({
                content: "Overwrite",
                listeners: {
                    click: function() {
                        this.handleRetest(!1), this.retestDialog.close();
                    }.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.retestDialog.close();
                    }.bind(this)
                }
            }) ]
        }), this.retestDialog.render(!0);
    },
    displayRetestingDialog: function() {
        this.retestingDialog = new AST.window.Modal({
            title: "Retesting",
            height: 120,
            width: 300,
            children: [ new AST.Element({
                tagName: "h2",
                content: '<i class="fas fa-circle-notch fa-spin"></i> Retesting module...'
            }) ]
        }), this.retestingDialog.render(!0);
    }
}, AST.module = AST.module || {}, AST.module.elementFilterMixin = {
    _availableFilters: [],
    initFiltersInModel: function() {
        var filters = {};
        AST.controller.isFeatureEnabled("elementFiltering") && (void 0 === this.getModel().get("filters") ? this.getModel().set("filters", filters) : Array.isArray(this.getModel().get("filters")) && ($.each(this.getModel().get("filters"), function(key, value) {
            filters[value] = !0;
        }), this.getModel().set("filters", filters)));
    },
    loadAvailableFilters: function(callback) {
        var projectId, internalCallback;
        AST.controller.isFeatureEnabled("elementFiltering") ? (projectId = AST.Storage.get("activeAsset", new AST.Model()).get("projectID"), 
        internalCallback = function(callback, data) {
            this._availableFilters = data.result, callback();
        }.bind(this, callback), AST.controller.ajaxGet(!0, "/api/assistant/asset/" + projectId + "/elementFilter", {}, internalCallback)) : callback();
    },
    filterElements: function(filters) {
        AST.controller.isFeatureEnabled("elementFiltering") && $.each(this._availableFilters, function(key, filter) {
            !0 === filters[filter.filter_id] && this.postCommand("page", {
                type: "FILTER_ELEMENTS",
                filters: filter.filters
            });
        }.bind(this));
    },
    unfilterElements: function() {
        AST.controller.isFeatureEnabled("elementFiltering") && this.postCommand("page", {
            type: "UNFILTER_ALL_ELEMENTS"
        });
    },
    getFilterCheckboxes: function(legend, label, instructions) {
        if (AST.controller.isFeatureEnabled("elementFiltering") && 0 < this._availableFilters.length) {
            for (var filters = [], i = 0; i < this._availableFilters.length; i++) {
                var filter = this._availableFilters[i];
                filters.push(new AST.form.Checkbox({
                    label: filter.name,
                    model: this.getModel(),
                    modelProperty: "filters." + filter.filter_id,
                    attributes: {
                        name: "filters",
                        value: filter.filter_id
                    },
                    initChecked: this.getModel().get("filters." + filter.filter_id)
                }));
            }
            return new AST.form.Fieldset({
                legend: legend,
                children: [ new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: instructions
                }), new AST.form.CheckboxGroup({
                    label: label,
                    labelPosition: "left",
                    children: filters
                }) ]
            });
        }
    }
}, AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.View = function(data) {
    this.initModel(data), this.getModel().initExternalListener("module"), this.initFiltersInModel(), 
    this.initTabGroupModels(), AST.Storage.set("activeModule", this.getModel());
    function noop() {}
    AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/logView", {}, noop, noop), 
    this.connect();
}, $.extend(AST.Pages.module.View.prototype, AST.hasDataModelMixin, AST.postsMessagesMixin, AST.module.elementFilterMixin, AST.module.testingDialogs, {
    _testingModes: [],
    confirmedViolationsContainer: null,
    handleRetest: function(wantsAdditional) {
        this.getModel().set("wantsAdditional", wantsAdditional), this.filterElements(this.getModel().get("filters")), 
        0 === this.getModel().get("path").indexOf("[NODE]") ? this.handleRetestNode() : (this.displayRetestingDialog(), 
        this.postPromise("page", {
            type: "DOCUMENT_CAPTURE",
            testTypes: [ AST.Util.TestTypes.AUTOMATIC, AST.Util.TestTypes.GUIDED_AUTOMATIC ],
            testIframes: this.getModel().get("testIframes")
        }).then(function(response) {
            response = response.result.results;
            this.saveRetestResults(response);
        }.bind(this)).catch(function(error) {
            this.handleFailedRetest();
        }));
    },
    handleRetestNode: function() {
        var pieces = this.getModel().get("path").split("[NODE][");
        if (2 === pieces.length) return this.displayRetestingDialog(), this.connectCaptureListener(!0), 
        pieces = (pieces = AST.Util.decodeHTML(pieces[1].substr(0, pieces[1].length - 1))).replace(/\\{1,}'/g, "'"), 
        void this.postCommand("page", {
            type: "NODE_CAPTURE",
            frameId: this.getModel().get("moduleLocation"),
            uel: pieces,
            testTypes: [ AST.Util.TestTypes.AUTOMATIC, AST.Util.TestTypes.GUIDED_AUTOMATIC ]
        });
        this.handleFailedRetest();
    },
    connectCaptureListener: function(isNodeCapture) {
        isNodeCapture && (this.failedResultsListener = setTimeout(this.handleFailedRetest.bind(this), 1e4)), 
        this.resultsListener = this.handleCaptureResults.bind(this), window.addEventListener("message", this.resultsListener, !1);
    },
    disconnectCaptureListener: function() {
        void 0 !== this.failedResultsListener && (clearTimeout(this.failedResultsListener), 
        this.failedResultsListener = void 0), window.removeEventListener("message", this.resultsListener, !1);
    },
    saveRetestResults: function(results, nodePosition = null) {
        var data = {
            reportID: this.getModel().get("reportID"),
            moduleID: this.getModel().get("moduleID"),
            moduleLocation: this.getModel().get("moduleLocation"),
            moduleName: this.getModel().get("moduleName"),
            path: this.getModel().get("path").substr(0, 1024),
            browser: AST.Util.getBrowserName(),
            wantsAdditional: this.getModel().get("wantsAdditional"),
            records: {},
            filters: this.getModel().get("filters")
        };
        $.each($.parseJSON(results), AST.Util.mapEngineResult.bind(this, data)), 
        this.uploadModule(data, nodePosition);
    },
    handleCaptureResults: function(event) {
        try {
            var results, nodePosition;
            "NODE_CAPTURE" === event.data.result.type && (this.disconnectCaptureListener(), 
            this.unfilterElements(), results = event.data.result.results, nodePosition = event.data.result.position || null, 
            this.saveRetestResults(results, nodePosition));
        } catch (e) {
            AST.logger.log(e);
        }
    },
    handleFailedRetest: function() {
        this.disconnectCaptureListener(), this.unfilterElements();
        var modal = new AST.window.Warning({
            title: '<i class="fas fa-exclamation-triangle"></i> Unable to Retest',
            height: 200,
            width: 360,
            children: [ new AST.Element({
                tagName: "p",
                content: "This module cannot be retested automatically."
            }) ],
            buttons: [ new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        });
        this.retestingDialog && this.retestingDialog.close(), this.thumbnailDialog && this.thumbnailDialog.close(), 
        modal.render();
    },
    handleFilter: function(container, status) {
        var data = this.getData(), instanceFilters = data.instanceFilters[status.toString()], data = $.extend({}, data, instanceFilters);
        data.instanceStatus = status, data.apiVersion = 2, delete data.instanceFilters, 
        delete data.selection, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/bestpractices/list", data, this.drawResults.bind(this, container, status), function() {}), 
        $(".action-wrapper", container.getEl().parentElement).replaceWith(this.getActionBar(container, status).render()), 
        setTimeout(function() {
            AST.Util.bootstrapMenus();
        }.bind(this), 50);
    },
    uploadModule: function(data, position) {
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/upload", data, function(data, status, xhr) {
            "success" !== status ? alert("Error") : (this.getModel().set("moduleID", data.result), 
            this.captureScreenshot(position));
        }.bind(this));
    },
    captureScreenshot: function(position) {
        this.retestingDialog.close(), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("thumbnails") ? (this.displayThumbnailDialog(), 
        position ? AST.controller.addListener("CAPTURE_THUMBNAIL_RESPONSE", this.saveNodeScreenshot.bind(this, position), this, this.confirmedViolationsContainer.getEl()) : AST.controller.addListener("CAPTURE_THUMBNAIL_RESPONSE", function(msg) {
            var callback;
            msg.result.success ? (msg = {
                moduleID: this.getModel().get("moduleID"),
                data: msg.result.dataUrl
            }, callback = this.handleScreenshotComplete.bind(this), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/screenshot", msg, callback, callback)) : this.handleScreenshotComplete();
        }.bind(this), this, this.confirmedViolationsContainer.getEl()), AST.ThumbnailCapture.snap()) : this.launch();
    },
    handleScreenshotComplete: function() {
        this.thumbnailDialog.close(), this.launch();
    },
    saveNodeScreenshot: function(position, msg) {
        var node;
        msg.result.success ? (node = $(this.getModel().get("node")), void 0 === position && (position = node[0].getBoundingClientRect()), 
        node = {
            moduleID: this.getModel().get("moduleID"),
            data: msg.result.dataUrl,
            top: position.top,
            left: position.left,
            width: position.width,
            height: position.height
        }, msg = this.handleScreenshotComplete.bind(this), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/screenshot", node, msg, msg)) : this.handleScreenshotComplete();
    },
    getButtonBar: function() {
        return this.getModel().get("isWritable") ? new AST.PageActions({
            children: [ new AST.Element({
                tagName: "div",
                attributes: {
                    class: "btn-group"
                },
                children: [ new AST.Element({
                    tagName: "span",
                    content: "Status"
                }), this.getStatus(), this.getManualTestButton(), this.getStatusButton() ]
            }), new AST.form.Button({
                content: "Retest",
                listeners: {
                    click: this.displayRetestDialog.bind(this)
                }
            }) ]
        }) : null;
    },
    connect: function() {
        var url = this.getModel().get("moduleLocation");
        0 === url.indexOf("[") && (url = url.split("][")[0].replace("[", "")), this.postCommand("background", {
            type: "CONNECT",
            url: url
        });
    },
    loadTestingModes: function(callback) {
        var internalCallback;
        AST.controller.isFeatureEnabled("testingModes") ? (internalCallback = function(callback, data) {
            this._testingModes = data.result, callback();
        }.bind(this, callback), AST.controller.ajaxGet(!0, "/api/assistant/testingMode", {}, internalCallback)) : callback();
    },
    launch: function() {
        this.loadAvailableFilters(this.loadTestingModes.bind(this, this.draw.bind(this)));
    },
    draw: function() {
        var activeAsset = AST.Storage.get("activeAsset", new AST.Model()), activeReport = AST.Storage.get("activeReport", new AST.Model()), activeAsset = (activeAsset instanceof AST.Model || (activeAsset = new AST.Model(activeAsset.data), 
        AST.Storage.set("activeAsset", activeAsset)), activeReport instanceof AST.Model || (activeReport = new AST.Model(activeReport.data), 
        AST.Storage.set("activeReport", activeReport)), new AST.Element({
            tagName: "section",
            attributes: {
                class: "home-screen"
            },
            children: [ new AST.form.Button({
                attributes: {
                    class: "page-back-btn",
                    title: "Back"
                },
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), AST.controller.fireEvent("reportview", AST.Storage.get("activeReport", new AST.Model()).getData());
                    }.bind(this)
                },
                content: AST.Util.getBackButton("Back")
            }), new AST.Element({
                tagName: "h1",
                content: "<strong>Module:</strong> " + this.getModel().get("moduleName")
            }), new AST.Element({
                tagName: "h2",
                content: "<strong>Asset:</strong> " + activeAsset.get("name")
            }), new AST.Element({
                tagName: "h2",
                content: "<strong>Report:</strong> " + activeReport.get("name")
            }) ]
        }));
        this.getModel().get("isWritable") && activeAsset.getChildren().push(this.getButtonBar()), 
        this.confirmedViolationsContainer = new AST.Element({
            tagName: "ul",
            attributes: {
                class: "instance-list"
            }
        }), this.needsReviewContainer = new AST.Element({
            tagName: "ul",
            attributes: {
                class: "instance-list"
            }
        }), this.passedContainer = new AST.Element({
            tagName: "ul",
            attributes: {
                class: "instance-list"
            }
        }), this.tabPanel = new AST.tabs.Panel({}), this.tabPanel.addChild(this.loadTabAndAddListener("Confirmed Violations (0)", this.confirmedViolationsContainer, AST.Util.InstanceStatus.FAIL)), 
        this.tabPanel.addChild(this.loadTabAndAddListener("Needs Review (0)", this.needsReviewContainer, AST.Util.InstanceStatus.REVIEW)), 
        this.tabPanel.addChild(this.loadTabAndAddListener("Passed (0)", this.passedContainer, AST.Util.InstanceStatus.PASSED)), 
        activeAsset.getChildren().push(this.tabPanel), AST.controller.renderPage(activeAsset, "View Module"), 
        AST.controller.addListener("reloadinstancelist", function() {
            $.each(this.tabPanel.getChildren(), function(i, tab) {
                AST.controller.fireEvent("tab-active-" + tab.getId());
            }), this.getModel().notifyExternalDataListener();
        }, this, this.tabPanel.getEl());
    },
    loadTabAndAddListener: function(title, container, status) {
        var children = [], actionBar = this.getActionBar(container, status), actionBar = (null !== actionBar && children.push(actionBar), 
        children.push(new AST.Element({
            tagName: "div",
            attributes: {
                class: "tab-live-region",
                style: "text-align: right",
                "aria-live": "polite"
            }
        })), children.push(container), new AST.tabs.Tab({
            title: title,
            children: children
        }));
        return AST.controller.addListener("tab-active-" + container.getParent().getId(), this.handleFilter.bind(this, container, status), this, this.tabPanel.getEl()), 
        AST.controller.fireEvent("tab-active-" + container.getParent().getId()), 
        actionBar;
    },
    drawResults: function(container, status, data) {
        if (this.initTabSelectionModel(status, !1), this.setData(this.getData()), 
        $(container.getEl()).empty(), data && data.result && data.result.error && "true" === data.result.error) return status = new AST.Element({
            tagName: "li",
            content: data.result.message,
            attributes: {
                class: "no-data"
            }
        }), $(container.getEl()).append(status.render()), this.updateTabTitle(container, 0), 
        void this.updateTabLiveRegion(container, 0);
        var count = 0;
        $.each(data.result, function(i, data) {
            AST.controller.isFeatureEnabled("instancesGroupedByTest") ? count += data.instancesCount : count += data.instances.length;
        }), this.updateTabTitle(container, count), this.updateTabLiveRegion(container, count), 
        $.each(data.result, this._renderBP.bind(this, container));
        try {
            $("#instance-" + this.getModel().get("newInstanceID")).focus();
        } catch (e) {}
    },
    updateTabTitle: function(container, count) {
        container = $("#" + container.getParent().getId() + "-link");
        container.html(container.html().replace(/\([0-9]+\)/, "(" + count + ")")), 
        container.attr("aria-label", container.html());
    },
    updateTabLiveRegion: function(container, count) {
        $("#" + container.getParent().getId() + " .tab-live-region").html(count + " results found");
    },
    getStatus: function() {
        var status = "Complete";
        return this.getModel().get("moduleState") < 4 && (status = "Needs Manual Testing"), 
        this.statusContainer = new AST.Element({
            tagName: "span",
            attributes: {
                class: "display-text"
            },
            content: status
        }), this.statusContainer;
    },
    reloadStatus: function() {
        $(this.statusContainer.getEl()).replaceWith(this.getStatus().render());
    },
    getStatusButton: function() {
        var status = "", status = 3 < this.getModel().get("moduleState") ? "Mark Incomplete" : "Mark Complete";
        return this.statusButton = new AST.form.Button({
            listeners: {
                click: this.handleStatusChange.bind(this)
            },
            content: status
        }), this.statusButton;
    },
    reloadStatusButton: function() {
        $(this.statusButton.getEl()).replaceWith(this.getStatusButton().render());
    },
    getManualTestButton: function() {
        var childButtons;
        if (0 < this._testingModes.length) return childButtons = [], $.each(this._testingModes, function(k, mode) {
            var testMenuButton = new AST.form.MenuButtonItem({
                content: mode.name,
                focusMenuButtonOnClick: !1
            });
            testMenuButton.getEl().onclick = function(ev) {
                ev.preventDefault(), AST.controller.fireEvent("manualtestwizard", mode.id);
            }, childButtons.push(testMenuButton);
        }.bind(this)), (allTestMenuItem = new AST.form.MenuButtonItem({
            content: "All Tests"
        })).getEl().onclick = function(ev) {
            ev.preventDefault(), AST.controller.fireEvent("manualstep1", this);
        }, childButtons.push(allTestMenuItem), new AST.form.MenuButton({
            content: "Manual Test",
            attributes: {
                "data-autoposition": 12
            },
            children: childButtons
        });
        var allTestMenuItem = new AST.form.Button({
            content: '<span class="a11y-offscreen-text">Run</span> Manual Test'
        });
        return allTestMenuItem.getEl().onclick = function(ev) {
            ev.preventDefault(), AST.controller.fireEvent("manualstep1", this);
        }, allTestMenuItem;
    },
    handleStatusChange: function(ev) {
        ev.preventDefault();
        ev = this.getData() || {
            moduleState: 0
        };
        ev.testingComplete = ev.moduleState < 4, ev.testingComplete ? this.getModel().set("moduleState", 4) : this.getModel().set("moduleState", 1), 
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/edit", ev, function() {
            this.reloadStatus(), this.reloadStatusButton();
        }.bind(this));
    },
    _renderBP: function(container, i, data) {
        var innerContainer, instanceCount = 0, instanceCount = AST.controller.isFeatureEnabled("instancesGroupedByTest") ? data.instancesCount : data.instances.length, titleElements = (AST.controller.isFeatureEnabled("instancesGroupedByTest") ? (innerContainer = new AST.Element({
            tagName: "div"
        }), $.each(data.instances, function(testId, instances) {
            var testName = data.tests[testId];
            if (0 < instances[0].engine_test_id) try {
                testName = window.LevelAccess_AccessEngine.ast_getTestById(instances[0].engine_test_id).metaText;
            } catch (e) {
                testName = data.tests[testId];
            }
            innerContainer.addChild(new AST.Element({
                tagName: "h4",
                content: testName
            })), innerContainer.addChild(new AST.Pages.module.View.Datagrid({
                bestPractice: new AST.Model(data),
                model: this.getModel(),
                records: instances,
                isWritable: this.getModel().get("isWritable")
            }));
        }.bind(this))) : innerContainer = new AST.Pages.module.View.Datagrid({
            bestPractice: new AST.Model(data),
            model: this.getModel(),
            records: data.instances,
            isWritable: this.getModel().get("isWritable")
        }), [ new AST.Element({
            tagName: "a",
            attributes: {
                href: "#"
            },
            listeners: {
                click: this.handleViewBP.bind(this, data)
            },
            content: data.name
        }) ]), instanceCount = ($.isEmpty(data.severity) || titleElements.push(new AST.Element({
            tagName: "span",
            attributes: {
                class: "severity"
            },
            content: '<i class="fas fa-exclamation-square" title="Severity"></i> ' + data.severity
        })), titleElements.push(new AST.Element({
            tagName: "span",
            attributes: {
                class: "instance-count"
            },
            content: '<i class="fas fa-bug" title="Instances"></i> ' + instanceCount
        })), new AST.Element({
            tagName: "li",
            children: [ new AST.panels.GridPanel({
                collapsible: !0,
                title: titleElements,
                children: [ innerContainer ]
            }) ]
        }));
        $(container.getEl()).append(instanceCount.render());
    },
    getFilterCheckbox: function(label, property, initChecked, status) {
        return new AST.form.Checkbox({
            label: label,
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "instanceFilters." + status.toString() + "." + property,
            attributes: {
                name: property,
                value: property
            },
            initChecked: initChecked
        });
    },
    getBulkActionsButton: function(status) {
        var menuButton = new AST.form.MenuButton({
            content: "Bulk Actions",
            attributes: {
                "data-autoposition": 5
            }
        }), bulkActions = [];
        return AST.controller.isFeatureEnabled("limitDelete") && !AST.Login.isSysAdmin(AST.Storage.get("activeAsset").get("organizationID")) || bulkActions.push({
            text: "Delete Instances",
            event: "instancebulkdelete"
        }), (bulkActions = status === AST.Util.InstanceStatus.REVIEW ? [ {
            text: "Pass Instances",
            event: "instancebulkpass"
        }, {
            text: "Fail Instances",
            event: "instancebulkfail"
        } ].concat(bulkActions) : bulkActions).length ? (bulkActions.forEach(function(action) {
            menuButton.addChild(new AST.form.MenuButtonItem({
                content: action.text,
                focusMenuButtonOnClick: !1,
                listeners: {
                    click: function(status, ev) {
                        ev.preventDefault();
                        var selectionData = this.getModelProperty("selection." + status.toString()), ev = Object.keys(selectionData).reduce(function(array, value) {
                            return selectionData[value] && "select-all" !== value && array.push(value), 
                            array;
                        }, []);
                        ev.length < 1 ? alert("No instances have been selected.") : (status = {
                            instance: ev,
                            reportID: this.getModelProperty("reportID")
                        }, AST.controller.fireEvent(action.event, [ status, menuButton.getEl() ]));
                    }.bind(this, status)
                }
            }));
        }.bind(this)), menuButton) : new AST.Element({
            tagName: "span"
        });
    },
    getBulkActionsCheckbox: function(status) {
        return new AST.form.Checkbox({
            label: "Select All",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "selection." + status.toString() + ".select-all",
            initChecked: this.getModel().get("selection." + status.toString() + ".select-all"),
            attributes: {
                name: "select-all",
                value: "select-all"
            },
            listeners: {
                change: function(event) {
                    for (var checkboxes = Object.keys(this.getModelProperty("selection." + status.toString())), i = 0; i < checkboxes.length; i++) this.setModelProperty("selection." + status.toString() + "." + checkboxes[i].toString(), event.target.checked);
                }.bind(this)
            }
        });
    },
    getActionBar: function(container, status) {
        var actionBar = null;
        return (actionBar = null === (actionBar = this.getModel().get("isWritable") ? new AST.Element({
            tagName: "div",
            attributes: {
                class: "action-wrapper"
            },
            children: [ new AST.Element({
                tagName: "div",
                attributes: {
                    class: "bulk-actions-wrapper"
                },
                children: [ this.getBulkActionsCheckbox(status), this.getBulkActionsButton(status) ]
            }) ]
        }) : actionBar) ? new AST.Element({
            tagName: "div",
            attributes: {
                class: "action-wrapper"
            }
        }) : actionBar).addChild(this.getFilterSection(container, status)), actionBar;
    },
    getFilterSection: function(container, status) {
        var notFixableCheckbox, fixableCheckbox, fixableSelect, filters = [ new AST.form.Select({
            id: "severity",
            label: "Severity",
            labelPosition: "top",
            dataUrl: "/api/severity/list",
            params: {
                reportID: this.getModel().get("reportID")
            },
            autoload: !0,
            optionKey: "value",
            optionRenderer: function(data) {
                return data.label;
            },
            model: this.getModel(),
            modelProperty: "instanceFilters." + status.toString() + ".severity",
            value: this.getModelProperty("instanceFilters." + status.toString() + ".severity"),
            placeHolderOption: new AST.form.Option({
                attributes: {
                    value: -1
                },
                content: "All"
            }),
            attributes: {
                class: "grow"
            }
        }) ];
        return AST.alchemy.isEnabled(AST.Storage.get("activeAsset").get("organizationID")) && status !== AST.Util.InstanceStatus.PASSED && (notFixableCheckbox = this.getFilterCheckbox("Not Fixable", "notFixable", !0, status), 
        fixableCheckbox = this.getFilterCheckbox("Fixable", "fixable", !0, status), 
        fixableSelect = new AST.form.Select({
            id: "filter-type",
            label: "Fix Status",
            labelPosition: "top",
            options: [ {
                id: 0,
                value: "All"
            }, {
                id: 1,
                value: "Fixed"
            }, {
                id: 2,
                value: "Not Fixed"
            } ],
            optionKey: "id",
            optionRenderer: function(data) {
                return data.value;
            },
            showPlaceholderOption: !1,
            model: this.getModel(),
            modelProperty: "instanceFilters." + status.toString() + ".filterType",
            attributes: {
                class: "grow"
            }
        }), AST.controller.addListener(fixableCheckbox.getModel().getId() + "-" + fixableCheckbox.getModelProperty(), function(value) {
            $(fixableSelect.getEl()).prop("disabled", !value);
        }.bind(this), fixableCheckbox, fixableCheckbox.getEl()), filters.push(new AST.form.CheckboxGroup({
            label: "",
            labelPosition: "top",
            children: [ notFixableCheckbox, fixableCheckbox ],
            attributes: {
                class: "filter"
            }
        })), filters.push(fixableSelect)), filters.push(new AST.form.Button({
            content: "Filter",
            listeners: {
                click: this.handleFilter.bind(this, container, status)
            }
        })), new AST.Element({
            tagName: "div",
            attributes: {
                class: "filter-wrapper"
            },
            children: filters
        });
    },
    handleViewBP: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("bpview", [ data, ev.target ]);
    },
    initTabGroupModels: function() {
        var tabsStatuses = [ AST.Util.InstanceStatus.FAIL, AST.Util.InstanceStatus.REVIEW, AST.Util.InstanceStatus.PASSED ];
        this.setModelProperty("selection", {}), this.setModelProperty("instanceFilters", {});
        for (var i = 0; i < tabsStatuses.length; i++) this.setModelProperty("instanceFilters." + tabsStatuses[i].toString(), {}), 
        this.initTabSelectionModel(tabsStatuses[i], !0);
    },
    initTabSelectionModel: function(status, resetSelectAll) {
        var selectAllStatus = !1;
        resetSelectAll || (selectAllStatus = this.getModelProperty("selection." + status.toString() + ".select-all")), 
        this.setModelProperty("selection." + status.toString(), {}), this.setModelProperty("selection." + status.toString() + ".select-all", selectAllStatus);
    }
}), AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.View = AST.Pages.module.View || {}, 
AST.Pages.module.View.Datagrid = function(c) {
    this.setModel((c = c || {}).model || new AST.Model()), this.setBestPractice(c.bestPractice || new AST.Model()), 
    c.columns = this.getColumnDefinition(), c.rowRenderer = AST.Pages.module.View.Datagrid.Renderers.row.bind(this), 
    AST.datagrid.Simple.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.module.View.Datagrid.prototype, AST.datagrid.Simple.prototype, AST.hasDataModelMixin, {
    emptyText: "No violations found.",
    bestPractice: null,
    getBestPractice: function() {
        return this.bestPractice;
    },
    setBestPractice: function(bp) {
        this.bestPractice = bp;
    },
    handleView: function(data, ev) {
        ev.preventDefault();
        var sendData = this.getData();
        sendData.bestPractice = this.getBestPractice().getData(), sendData.instance = data, 
        AST.controller.fireEvent("instanceedit", [ sendData, ev.currentTarget ]);
    },
    handleReview: function(data, ev) {
        ev.preventDefault();
        var sendData = this.getData();
        sendData.bestPractice = this.getBestPractice().getData(), sendData.instance = data, 
        AST.controller.fireEvent("instancereview", [ sendData, ev.currentTarget ]);
    },
    handleEditPattern: function(data, ev) {
        ev.preventDefault(), AST.controller.ajaxGet(AST.Controller.WITH_TOKEN, "/api/assistant/reports/" + AST.Storage.get("activeReport", new AST.Model()).get("id") + "/pattern/" + data.pattern_id, {}, function(responseData, status, xhr) {
            "success" !== status ? alert("Error") : AST.controller.fireEvent("patternedit", [ responseData.result, ev.currentTarget ]);
        }.bind(this), void 0, "GET");
    },
    handleViewPattern: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("patternview", [ data, ev.currentTarget ]);
    },
    handleUnlinkPattern: function(data, ev) {
        ev.preventDefault(), AST.controller.ajaxGet(AST.Controller.WITH_TOKEN, "/api/assistant/reports/" + AST.Storage.get("activeReport", new AST.Model()).get("id") + "/pattern/" + data.pattern_id, {}, function(responseData, status, xhr) {
            "success" !== status ? alert("Error") : (status = {
                pattern: responseData.result,
                moduleID: this.getModel().get("id")
            }, AST.controller.fireEvent("patternunlink", [ status, ev.currentTarget ]));
        }.bind(this), void 0, "GET");
    },
    handleDelete: function(data, ev) {
        ev.preventDefault();
        var sendData = this.getData();
        sendData.bestPractice = this.getBestPractice().getData(), sendData.instance = data, 
        AST.controller.fireEvent("instancedelete", [ sendData, ev.currentTarget ]);
    },
    handleAddPattern: function(data, ev) {
        data.moduleID = data.module_id, data.violationID = data.violation_id, AST.controller.fireEvent("patternnew", [ data, ev.currentTarget ]);
    },
    handleAddToExistingPattern: function(data, ev) {
        data.moduleID = data.module_id, data.violationID = data.violation_id, AST.controller.fireEvent("instanceaddtopattern", [ data, ev.currentTarget ]);
    },
    handleStatusChange: function(data, ev) {
        ev.preventDefault();
    },
    getColumnDefinition: function() {
        var columns = [ new AST.datagrid.Column({
            content: "Status",
            attributes: {
                class: "status"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.status.bind(this)
        }), new AST.datagrid.Column({
            content: "Tag",
            attributes: {
                class: "tag"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.tag
        }), new AST.datagrid.Column({
            cellType: "th",
            content: "Description",
            attributes: {
                class: "detail"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.element
        }), new AST.datagrid.Column({
            content: "Actions",
            attributes: {
                class: "actions"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.actions.bind(this)
        }) ];
        return this.getModel().get("isWritable") && columns.unshift(new AST.datagrid.Column({
            content: "",
            attributes: {
                class: "checkbox"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.checkbox.bind(this)
        })), columns;
    }
}), AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.Delete = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.module.Delete.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault(), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/delete", {
            moduleID: this.getModel().get("id")
        }, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("reloadmodulelist");
        }.bind(this, el));
    },
    launch: function() {
        var deleteButton = new AST.form.Button({
            content: "Delete"
        });
        deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Delete Module?',
            height: 175,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "This action will permanently delete this module and all associated test results. Continue?"
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render();
    }
}), AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.Edit = function(data) {
    this.initModel(data), this.getModel().initExternalListener("module"), this.initFiltersInModel(), 
    this.getModel().set("path", AST.Util.decodeHTML(this.getModel().get("path")));
}, $.extend(AST.Pages.module.Edit.prototype, AST.hasDataModelMixin, AST.module.elementFilterMixin, {
    handleSave: function(ev) {
        ev.preventDefault();
        ev = this.getData();
        ev.moduleID = this.getModel().get("id"), this.validate() && AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/edit", ev, function(data, status, xhr) {
            "success" !== status ? alert("Error") : AST.controller.fireEvent("reportview", AST.Storage.get("activeReport", new AST.Model()).getData());
        }.bind(this));
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("moduleName")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Name is required"
        })), $.isEmpty(this.getModel().get("moduleLocation")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Location is required"
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("reportview", AST.Storage.get("activeReport", new AST.Model()).getData());
    },
    launch: function() {
        this.loadAvailableFilters(this.draw.bind(this));
    },
    draw: function() {
        var pathFieldAttributes = {}, pathFieldAttributes = (0 === this.getModel().get("path").indexOf("[NODE]") && (pathFieldAttributes = {
            disabled: !0,
            "aria-readonly": !0
        }), [ new AST.Element({
            tagName: "h1",
            content: "Edit Module"
        }), new AST.form.DisplayText({
            id: "projectName",
            label: "Asset",
            content: AST.Storage.get("activeAsset", new AST.Model()).get("name")
        }), new AST.form.Text({
            id: "module",
            label: "Name",
            model: this.getModel(),
            modelProperty: "moduleName"
        }), new AST.form.Text({
            id: "moduleLocation",
            label: "Location",
            model: this.getModel(),
            modelProperty: "moduleLocation",
            attributes: {
                readonly: "true"
            }
        }), new AST.form.Text({
            id: "path",
            label: "Path",
            model: this.getModel(),
            modelProperty: "path",
            attributes: pathFieldAttributes
        }) ]);
        0 < this._availableFilters.length && pathFieldAttributes.push(this.getFilterCheckboxes("Ignore Elements", "Ignore", "Select the elements that should be ignored when testing this module.")), 
        this.form = new AST.form.Form({
            children: pathFieldAttributes,
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Save"
                },
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this)
            }
        }), AST.controller.renderPage(this.form, "Edit Module");
    }
}), AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.New = function(data) {
    this.initModel(data), this.initFiltersInModel();
}, $.extend(AST.Pages.module.New.prototype, AST.hasDataModelMixin, AST.postsMessagesMixin, AST.module.elementFilterMixin, AST.module.testingDialogs, {
    handleSave: function(ev) {
        ev.preventDefault(), this.validate() && (this.displaySavingDialog(), this.filterElements(this.getModel().get("filters")), 
        ev = function() {
            this.postPromise("page", {
                type: "DOCUMENT_CAPTURE",
                testTypes: [ AST.Util.TestTypes.AUTOMATIC, AST.Util.TestTypes.GUIDED_AUTOMATIC ],
                testIframes: this.getModel().get("testIframes")
            }).then(function(response) {
                var response = response.result.results, data = (this.unfilterElements(), 
                this.loadingDialog.close(), this.getData());
                data.moduleID = 0, data.browser = AST.Util.getBrowserName(), data.path = data.path.substr(0, 1024), 
                data.records = {}, $.each($.parseJSON(response), AST.Util.mapEngineResult.bind(this, data)), 
                this.uploadModule(data);
            }.bind(this)).catch(function(error) {
                console.error(error);
            });
        }.bind(this), setTimeout(ev, 200));
    },
    uploadModule: function(data) {
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/upload", data, function(data, status, xhr) {
            "success" !== status ? alert("Error") : (this.getModel().set("moduleID", data.result), 
            this.uploadScreenshot());
        }.bind(this));
    },
    uploadScreenshot: function() {
        this.savingDialog.close(), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("thumbnails") ? (this.displayThumbnailDialog(), 
        AST.controller.addListener("CAPTURE_THUMBNAIL_RESPONSE", function(msg) {
            this.handleScreenshotResponse(msg.result);
        }.bind(this), this, this.form.getEl()), AST.ThumbnailCapture.snap()) : this.handleViewModule();
    },
    handleViewModule: function() {
        var data = this.getModel().getData();
        data.isWritable = !0, AST.controller.fireEvent("moduleview", data);
    },
    handleScreenshotComplete: function() {
        this.thumbnailDialog.close(), this.handleViewModule();
    },
    handleScreenshotResponse: function(response) {
        var callback;
        response.success ? (response = {
            moduleID: this.getModel().get("moduleID"),
            data: response.dataUrl
        }, callback = this.handleScreenshotComplete.bind(this), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/screenshot", response, callback, callback)) : this.handleScreenshotComplete();
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("moduleName")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Name is required"
        })), $.isEmpty(this.getModel().get("moduleLocation")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Location is required"
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("reportview", AST.Storage.get("activeReport", new AST.Model()).getData());
    },
    launch: function() {
        this.loadAvailableFilters(this.draw.bind(this));
    },
    draw: function() {
        try {
            this.displayLoadingDialog();
            var messageHandler = function() {
                this.postPromise("page", {
                    type: "DOCUMENT_INFO"
                }).then(function(response) {
                    this.loadingDialog.close(), this.getModel().set("moduleName", response.result.title), 
                    this.getModel().set("moduleLocation", response.result.location), 
                    this.display();
                }.bind(this)).catch(function(error) {
                    console.error("catch", error);
                });
            }.bind(this);
            setTimeout(messageHandler, 200);
        } catch (err) {
            AST.logger.log(err);
        }
    },
    display: function() {
        var fields = [ new AST.Element({
            tagName: "h1",
            content: "Add Module: Capture Page"
        }), new AST.form.DisplayText({
            id: "projectName",
            label: "Asset",
            content: AST.Storage.get("activeAsset", new AST.Model()).get("name")
        }), new AST.form.Text({
            id: "module",
            label: "Name",
            model: this.getModel(),
            modelProperty: "moduleName"
        }), new AST.form.Text({
            id: "moduleLocation",
            label: "Location",
            model: this.getModel(),
            modelProperty: "moduleLocation",
            attributes: {
                readonly: "true"
            }
        }), new AST.form.Text({
            id: "path",
            label: "Path",
            model: this.getModel(),
            modelProperty: "path"
        }), new AST.form.Checkbox({
            label: "Test iframe Content",
            model: this.getModel(),
            modelProperty: "testIframes",
            attributes: {
                name: "testIframes",
                value: "true"
            },
            initChecked: !1
        }) ];
        AST.controller.isFeatureEnabled("elementFiltering") && 0 < this._availableFilters.length && fields.push(this.getFilterCheckboxes("Ignore Elements", "Ignore", "Select the elements that should be ignored when testing this module.")), 
        this.form = new AST.form.Form({
            children: fields,
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Save"
                },
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this)
            }
        }), AST.controller.renderPage(this.form, "Create New Module");
    }
}), AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.Node = function(data) {
    this.initModel(data), this.initFiltersInModel();
}, $.extend(AST.Pages.module.Node.prototype, AST.hasDataModelMixin, AST.postsMessagesMixin, AST.module.elementFilterMixin, AST.module.testingDialogs, AST.nodeCaptureMixin, {
    handleNodeCapture: function(ev) {
        ev.preventDefault(), new AST.NodeCapture({
            target: ev.currentTarget,
            filters: this._availableFilters
        }).launch();
    },
    handleNodeCaptureDOM: function(ev) {
        ev.preventDefault();
        var projectId = AST.Storage.get("activeAsset", new AST.Model()).get("projectID"), currentFilters = AST.Storage.get("element-filters", []);
        new AST.NodeCapture({
            target: ev.currentTarget,
            filters: currentFilters[projectId]
        }).keyboardLaunch();
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("moduleName")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Name is required"
        })), $.isEmpty(this.getModel().get("moduleLocation")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Location is required"
        })), $.isEmpty(this.getModel().get("path")) || $.isEmptyObject(this.getModel().get("node")) ? errors.push(new AST.Element({
            tagName: "li",
            content: "Path and node selection are required"
        })) : "IFRAME" === this.getModel().get("node").tagName && !1 === this.getModel().get("node").hasAttribute("data-la-tb-sec-ok") && errors.push(new AST.Element({
            tagName: "li",
            content: "This iframe cannot be captured for testing. Site security settings prohibit access to the contents of this iframe by externally-hosted scripts."
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleSave: function(ev) {
        if (ev.preventDefault(), this.validate()) {
            this.displaySavingDialog();
            try {
                this.connectCaptureResultsListener(), this.filterElements(this.getModel().get("filters")), 
                this.postCommand("page", {
                    type: "NODE_CAPTURE",
                    frameId: this.getModel().get("moduleLocation"),
                    uel: this.getModel().get("uel"),
                    testTypes: [ AST.Util.TestTypes.AUTOMATIC, AST.Util.TestTypes.GUIDED_AUTOMATIC ]
                });
            } catch (err) {
                AST.logger.log(err);
            }
        }
    },
    handleCaptureResults: function(event) {
        try {
            if ("NODE_CAPTURE" === event.data.result.type) {
                this.disconnectCaptureResultsListener(), this.unfilterElements();
                var d, node = this.getModel().get("node"), dataRef = this.getModel().getData(), data = (dataRef.moduleID = 0, 
                dataRef.browser = AST.Util.getBrowserName(), dataRef.path = dataRef.path.substr(0, 1024), 
                dataRef.node = void 0, {});
                for (d in dataRef) dataRef.hasOwnProperty(d) && (data[d] = dataRef[d]);
                dataRef.node = node, data.records = {};
                var results = event.data.result.results, nodePosition = event.data.result.position;
                $.each($.parseJSON(results), AST.Util.mapEngineResult.bind(this, data)), 
                this.uploadModule(data, nodePosition);
            }
        } catch (e) {}
    },
    uploadModule: function(data, position) {
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/upload", data, function(position, data, status, xhr) {
            "success" !== status ? alert("Error") : (this.getModel().set("moduleID", data.result), 
            setTimeout(function() {
                this.captureScreenshot(position);
            }.bind(this), 500));
        }.bind(this, position));
    },
    captureScreenshot: function(position) {
        this.savingDialog.close(), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("thumbnails") ? (this.displayThumbnailDialog(), 
        AST.controller.addListener("CAPTURE_THUMBNAIL_RESPONSE", this.saveScreenshot.bind(this, position), this, this.form.getEl()), 
        AST.ThumbnailCapture.snap()) : this.handleViewModule();
    },
    handleScreenshotResponse: function(response) {
        var callback;
        response.success ? (response = {
            moduleID: this.getModel().get("moduleID"),
            data: response.dataUrl
        }, callback = this.handleScreenshotComplete.bind(this), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/screenshot", response, callback, callback)) : this.handleScreenshotComplete();
    },
    handleScreenshotComplete: function() {
        this.thumbnailDialog.close(), this.handleViewModule();
    },
    saveScreenshot: function(position, msg) {
        var node;
        msg.result.success ? (node = $(this.getModel().get("node")), void 0 === position && (position = node[0].getBoundingClientRect()), 
        node = {
            moduleID: this.getModel().get("moduleID"),
            data: msg.result.dataUrl,
            top: position.top,
            left: position.left,
            width: position.width,
            height: position.height
        }, msg = this.handleScreenshotComplete.bind(this), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/screenshot", node, msg, msg)) : this.handleScreenshotComplete();
    },
    handleViewModule: function() {
        var data = this.getModel().getData();
        data.node = void 0, data.isWritable = !0, AST.controller.fireEvent("moduleview", data);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("reportview", AST.Storage.get("activeReport", new AST.Model()).getData());
    },
    launch: function() {
        this.loadAvailableFilters(this.draw.bind(this));
    },
    draw: function() {
        try {
            var fields = [ new AST.Element({
                tagName: "h1",
                content: "Add Module: Capture Node"
            }), new AST.form.DisplayText({
                id: "projectName",
                label: "Asset",
                content: AST.Storage.get("activeAsset", new AST.Model()).get("name")
            }), new AST.form.Text({
                id: "module",
                label: "Name",
                model: this.getModel(),
                modelProperty: "moduleName"
            }), new AST.form.Text({
                id: "moduleLocation",
                label: "Location",
                model: this.getModel(),
                modelProperty: "moduleLocation",
                attributes: {
                    readonly: "true"
                }
            }) ], pathField = (AST.controller.isFeatureEnabled("elementFiltering") && 0 < this._availableFilters.length && fields.push(this.getFilterCheckboxes("Ignore Elements", "Ignore", "Select the elements that should be ignored when testing this module.")), 
            new AST.form.Text({
                id: "path",
                label: "Path",
                model: this.getModel(),
                modelProperty: "path",
                attributes: {
                    disabled: !0,
                    "aria-readonly": !0
                }
            }));
            fields.push(new AST.form.Fieldset({
                legend: "Node Selection",
                children: [ new AST.Element({
                    tagName: "div",
                    attributes: {
                        style: "margin-bottom: 1em"
                    },
                    children: [ new AST.form.Button({
                        listeners: {
                            click: this.handleNodeCapture.bind(this),
                            keydown: this.handleNodeCaptureKeyboard.bind(this)
                        },
                        content: '<i class="fas fa-mouse-pointer"></i> Node Selector',
                        attributes: {
                            style: "margin-right: 1em"
                        }
                    }), new AST.form.Button({
                        listeners: {
                            click: this.handleNodeCaptureDOM.bind(this),
                            keydown: this.handleNodeCaptureKeyboard.bind(this)
                        },
                        content: '<i class="fas fa-code"></i> DOM Selector'
                    }) ]
                }), pathField ]
            })), this.form = new AST.form.Form({
                children: fields,
                buttons: [ new AST.form.Submit({
                    attributes: {
                        value: "Save"
                    },
                    listeners: {
                        click: this.handleSave.bind(this)
                    }
                }), new AST.form.CancelButton({
                    listeners: {
                        click: this.handleCancel.bind(this)
                    }
                }) ],
                listeners: {
                    submit: this.handleSave.bind(this)
                }
            }), AST.controller.addListener("nodecaptureselection", this.handleNodeCaptureSelection.bind(this, pathField), this, pathField.getEl()), 
            AST.controller.renderPage(this.form, "Create New Module");
        } catch (e) {
            AST.logger.log(e);
        }
    }
}), AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.View = AST.Pages.module.View || {}, 
AST.Pages.module.View.Datagrid = AST.Pages.module.View.Datagrid || {}, AST.Pages.module.View.Datagrid.Renderers = {
    row: function(rec) {
        var row = $("<tr>");
        return rec.instance_id === this.getModel().get("newInstanceID") && row.addClass("new"), 
        row;
    },
    _getStatusIcon: function(rec) {
        var tooltip, icon, created = "", createdFormattedLocale = "", created = ($.isEmpty(rec.created) || (createdFormattedLocale = " on " + (created = new Date(Date.parse(rec.created.replace(/-/g, "/")))).toLocaleDateString() + " at " + created.toLocaleTimeString()), 
        "");
        switch (parseInt(rec.test_type_id)) {
          case AST.Util.TestTypes.MANUAL:
          case AST.Util.TestTypes.GLOBAL:
          case AST.Util.TestTypes.IMPLIED_GLOBAL:
            tooltip = "Manual. ", icon = "M";
            break;

          case AST.Util.TestTypes.GUIDED_AUTOMATIC:
            tooltip = "Guided Automatic. ", icon = "G";
            break;

          case AST.Util.TestTypes.AUTOMATIC:
            tooltip = "Automatic. ", icon = "A";
        }
        return rec.instance_id === this.getModel().get("newInstanceID") && (created = "new", 
        createdFormattedLocale = " just now"), 0 === parseInt(rec.seat_id) ? tooltip += "System-raised" + createdFormattedLocale : tooltip += "Raised by " + rec.seatLabel + createdFormattedLocale, 
        new AST.Element({
            tagName: "p",
            attributes: {
                class: "fa-layers fa-fw " + created,
                tabindex: 0
            },
            children: [ new AST.Element({
                tagName: "span",
                attributes: {
                    title: tooltip,
                    class: "fa-layers-text"
                },
                content: icon
            }) ]
        });
    },
    _getFixIcon: function(rec) {
        rec = !0 === rec.fixable || 1 === rec.fixable ? null !== rec.fix ? {
            label: "Fixed",
            icon: "fa-check",
            class: "fixed"
        } : {
            label: "Not Fixed",
            icon: "fa-wrench",
            class: "fixable"
        } : {
            label: "Not Fixable",
            icon: "fa-minus",
            class: "unfixable"
        };
        return new AST.Element({
            tagName: "p",
            attributes: {
                class: "fa-layers fa-fw " + rec.class,
                tabindex: 0
            },
            children: [ new AST.Element({
                tagName: "span",
                attributes: {
                    title: rec.label
                },
                children: [ new AST.Element({
                    tagName: "i",
                    attributes: {
                        class: "fas " + rec.icon
                    }
                }) ]
            }) ]
        });
    },
    _getPatternIcon: function(rec) {
        var created = "", createdFormattedLocale = "", created = ($.isEmpty(rec.created) || (createdFormattedLocale = " on " + (created = new Date(Date.parse(rec.created.replace(/-/g, "/")))).toLocaleDateString() + " at " + created.toLocaleTimeString()), 
        "Pattern. "), icon = "P", iconClass = "pattern";
        return rec.global && (created = "Global. ", icon = "G"), rec.instance_id === this.getModel().get("newInstanceID") && (iconClass += " new", 
        createdFormattedLocale = " just now"), 0 === parseInt(rec.seat_id) ? created += "System-raised" + createdFormattedLocale : created += "Raised by " + rec.seatLabel + createdFormattedLocale, 
        new AST.Element({
            tagName: "p",
            attributes: {
                class: "fa-layers fa-fw " + iconClass,
                tabindex: 0
            },
            children: [ new AST.Element({
                tagName: "span",
                attributes: {
                    title: created,
                    class: "fa-layers-text"
                },
                content: icon
            }) ]
        });
    },
    status: function(rec) {
        var icons = [];
        return rec.is_pattern ? icons.push(AST.Pages.module.View.Datagrid.Renderers._getPatternIcon.apply(this, [ rec ])) : (icons.push(AST.Pages.module.View.Datagrid.Renderers._getStatusIcon.apply(this, [ rec ])), 
        AST.alchemy.isEnabled(AST.Storage.get("activeAsset").get("organizationID")) && icons.push(AST.Pages.module.View.Datagrid.Renderers._getFixIcon.apply(this, [ rec ]))), 
        new AST.Element({
            tagName: "div",
            children: icons,
            attributes: {
                class: 1 < icons.length ? "multiple" : ""
            }
        }).render();
    },
    tag: function(rec) {
        return AST.Util.encodeHTML(AST.Util.parseTagFromHtml(rec.element, " "));
    },
    checkbox: function(rec) {
        return rec.is_pattern ? "" : new AST.form.Checkbox({
            name: "instances",
            value: rec.instance_id,
            model: this.getModel(),
            modelProperty: "selection." + rec.test_result.toString() + "." + rec.instance_id.toString(),
            initChecked: this.getModel().get("selection." + rec.test_result.toString() + ".select-all")
        }).render();
    },
    element: function(rec) {
        return "<span>" + rec.element + "</span>";
    },
    actions: function(rec) {
        var end, tagName = "", element = AST.Util.encodeHTML(rec.element);
        if ("&lt;" === element.substr(0, 4) && (end = element.replace("&gt;", " &gt;").indexOf(" "), 
        tagName = element.substring(4, end)), this.getModel().get("isWritable")) return element = [], 
        rec.is_pattern && !AST.controller.isFeatureEnabled("legacyPatterns") ? element.push(new AST.form.Button({
            content: '<i class="fas fa-eye"></i><span class="a11y-offscreen-text">View ' + tagName + "</span>",
            attributes: {
                title: "View"
            },
            listeners: {
                click: this.handleViewPattern.bind(this, rec)
            }
        })) : (end = (rec.is_pattern ? this.handleEditPattern : parseInt(rec.test_result) === AST.Util.InstanceStatus.REVIEW ? this.handleReview : this.handleView).bind(this, rec), 
        element.push(new AST.form.Button({
            content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + tagName + "</span>",
            attributes: {
                title: "Edit"
            },
            listeners: {
                click: end
            }
        }))), parseInt(rec.test_result) === AST.Util.InstanceStatus.REVIEW || !AST.controller.isFeatureEnabled("legacyPatterns") && rec.is_pattern || AST.controller.isFeatureEnabled("limitDelete") && !AST.Login.isSysAdmin(AST.Storage.get("activeAsset").get("organizationID")) || (rec.is_pattern ? element.push(new AST.form.Button({
            content: '<i class="fas fa-unlink"></i><span class="a11y-offscreen-text">Unlink ' + tagName + "</span>",
            attributes: {
                title: "Unlink"
            },
            listeners: {
                click: this.handleUnlinkPattern.bind(this, rec)
            }
        })) : element.push(new AST.form.Button({
            content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Delete ' + tagName + "</span>",
            attributes: {
                title: "Delete"
            },
            listeners: {
                click: this.handleDelete.bind(this, rec)
            }
        }))), AST.controller.isFeatureEnabled("legacyPatterns") && !rec.is_pattern && element.push(new AST.form.MenuButton({
            content: '<div class="fa-layers"><i class="fas fa-circle"></i><span class="fa-layers-text fa-inverse" data-fa-transform="shrink-3">P</span></div><span class="a11y-offscreen-text">Create Pattern from ' + tagName + "</span>",
            attributes: {
                title: "Pattern",
                "data-autoposition": 12
            },
            children: [ new AST.form.MenuButtonItem({
                content: "Create New",
                focusMenuButtonOnClick: !1,
                listeners: {
                    click: this.handleAddPattern.bind(this, rec)
                }
            }), new AST.form.MenuButtonItem({
                content: "Add to Existing",
                focusMenuButtonOnClick: !1,
                listeners: {
                    click: this.handleAddToExistingPattern.bind(this, rec)
                }
            }) ]
        })), new AST.Element({
            tagName: "div",
            children: element
        }).render();
    }
}, AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.ResultsGrid = function(c) {
    c = c || {}, this.initHighlighting(), this.setTestID(c.testID || this.getTestID()), 
    this.setTitle(c.title || this.getTitle()), this.setCallback(c.callback || this.getCallback()), 
    this.initModel(c.data || {}), this.setTarget(c.target || void 0), this.getResults();
}, $.extend(AST.Pages.preview.ResultsGrid.prototype, AST.HighlightsMixin, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.hasTitleMixin, {
    callback: null,
    results: null,
    extraInfo: null,
    testID: null,
    getTestID: function() {
        return this.testID;
    },
    setTestID: function(val) {
        this.testID = val;
    },
    getCallback: function() {
        return this.callback;
    },
    setCallback: function(val) {
        this.callback = val;
    },
    getResults: function() {
        return null === this.results && (this.connectResultsListener(), this.postCommand("page", {
            type: "PREVIEW_MODE",
            mode: this.getTestID()
        })), this.results;
    },
    highlightAll: function(ev) {
        ev.preventDefault(), this.unhighlight(), $.each(this.getResults(), function(i, rec) {
            this.nodeToggle(rec.path, rec.frameId, !1);
        }.bind(this));
    },
    launch: function() {
        var actions;
        null === this.results ? setTimeout(this.launch.bind(this), 100) : (actions = [ this.getHighlightToggleButton(), new AST.form.Button({
            listeners: {
                click: this.highlightAll.bind(this)
            },
            content: "Highlight All " + this.getTitle()
        }) ], actions = [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), this.unhighlight(), this.modal.close();
                }.bind(this)
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h2",
            content: "Mode: " + this.getTitle()
        }), new AST.datagrid.Simple({
            attributes: {
                class: "preview-results"
            },
            emptyText: "No " + this.getTitle().toLowerCase() + " found.",
            records: this.getResults(),
            columns: [ new AST.datagrid.Column({
                content: "Tag",
                renderer: function(rec) {
                    return "&lt;" + rec.tagName + "/&gt;";
                }.bind(this),
                attributes: {
                    class: "width-10"
                }
            }), new AST.datagrid.Column({
                content: "Details",
                renderer: function(rec) {
                    rec = $(rec.content);
                    return $("<div>").append(AST.Util.prettyPrintHtml(rec[0]).render());
                }.bind(this),
                attributes: {
                    class: "width-75 contains-html"
                }
            }), new AST.datagrid.Column({
                content: "Actions",
                attributes: {
                    class: "actions width-15"
                },
                renderer: this.getActionsRenderer.bind(this)
            }) ],
            actions: actions
        }) ], this.modal = new AST.window.Modal({
            title: '<i class="fas fa-mouse-pointer"></i> Preview Modes',
            height: 80,
            width: 80,
            target: this.getTarget(),
            children: actions
        }), this.modal.render());
    },
    getActionsRenderer: function(rec) {
        return new AST.Element({
            tagName: "div",
            children: [ new AST.form.Button({
                listeners: {
                    click: this.handleViewDetail.bind(this, rec)
                },
                attributes: {
                    title: "View"
                },
                content: '<i class="fas fa-eye"></i><span class="a11y-offscreen-text">View</span>'
            }) ]
        }).render();
    },
    handleViewDetail: function(rec, ev) {
        ev.preventDefault(), this.unhighlight(), this.nodeToggle(rec.path, rec.frameId);
    },
    nodeToggle: function(selector, frameId, expanded) {
        expanded = void 0 === expanded || expanded, this.highlight(frameId, selector, null, null, this.getCallback(), expanded);
    },
    connectResultsListener: function() {
        this.resultsListener = this.handleReceiveResults.bind(this), window.addEventListener("message", this.resultsListener, !1);
    },
    disconnectResultsListener: function() {
        window.removeEventListener("message", this.resultsListener, !1);
    },
    handleReceiveResults: function(event) {
        try {
            "PREVIEW_MODE" === event.data.result.type && (this.disconnectResultsListener(), 
            null === this.results && (this.results = []), $.each(JSON.parse(event.data.result.results), function(frameId, i, rec) {
                rec.frameId = frameId, this.results.push(rec);
            }.bind(this, event.data.result.frameId)));
        } catch (e) {}
    }
}), AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Tables = function(c) {
    (c = c || {}).title = "Tables", c.testID = "previewMode_tables", c.callback = "tables", 
    AST.Pages.preview.ResultsGrid.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.preview.Tables.prototype, AST.Pages.preview.ResultsGrid.prototype, {
    getActionsRenderer: function(rec) {
        return new AST.Element({
            tagName: "div",
            children: [ new AST.form.Button({
                listeners: {
                    click: this.handleViewDetail.bind(this, rec)
                },
                attributes: {
                    title: "View"
                },
                content: '<i class="fas fa-eye"></i><span class="a11y-offscreen-text">View</span>'
            }), new AST.form.Button({
                listeners: {
                    click: this.handleOpen.bind(this, rec)
                },
                attributes: {
                    title: "View"
                },
                content: '<i class="fas fa-search-plus"></i><span class="a11y-offscreen-text">Open</span>'
            }) ]
        }).render();
    },
    handleOpen: function(rec, ev) {
        ev.preventDefault(), AST.controller.fireEvent("tabledetail", [ ev.currentTarget, rec ]);
    }
}), AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Tables = AST.Pages.preview.Tables || {}, 
AST.Pages.preview.Tables.Detail = function(c) {
    this.initModel((c = c || {}).data || {}), this.initHighlighting(), this.setTarget(c.target || void 0), 
    this.results = {
        headings: null,
        data: null
    }, this.getResults("headings"), this.getResults("data");
}, $.extend(AST.Pages.preview.Tables.Detail.prototype, AST.HighlightsMixin, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    results: {
        headings: null,
        data: null
    },
    resultsListeners: {
        headings: null,
        data: null
    },
    testID: null,
    title: null,
    launch: function() {
        var children;
        null === this.results.headings || null === this.results.data ? setTimeout(this.launch.bind(this), 100) : (children = [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), this.unhighlight(), this.modal.close();
                }.bind(this)
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h2",
            content: "Mode: Table Detail"
        }), new AST.PageActions({
            children: [ new AST.Element({
                tagName: "div",
                attributes: {
                    class: "flex-space"
                }
            }), this.getHighlightToggleButton() ]
        }), new AST.Element({
            tagName: "h3",
            content: "Table Headings"
        }), this.getGrid("headings"), new AST.Element({
            tagName: "h3",
            content: "Table Data"
        }), this.getGrid("data") ], this.modal = new AST.window.Modal({
            title: '<i class="fas fa-mouse-pointer"></i> Preview Modes',
            height: 80,
            width: 80,
            target: this.getTarget(),
            children: children
        }), this.modal.render(), this.highlightAll());
    },
    handleViewDetail: function(type, rec, ev) {
        this.highlightAll(), this.toggleInstances(rec.frameId, rec.path);
    },
    nodeToggle: function(type, selector, frameId, expanded) {
        var callback, color;
        expanded = void 0 === expanded || expanded;
        switch (type) {
          case "headings":
            callback = "table-headings", color = "red";
            break;

          case "data":
            callback = "table-data", color = "blue";
            break;

          default:
            return callback = void 0, void (color = "green");
        }
        this.highlight(frameId, selector, null, color, callback, expanded, {
            horizontal: 0,
            vertical: 0
        });
    },
    highlightAll: function() {
        this.unhighlight(), $.each(this.getResults("headings"), function(i, rec) {
            this.nodeToggle("headings", rec.path, rec.frameId, !1);
        }.bind(this)), $.each(this.getResults("data"), function(i, rec) {
            this.nodeToggle("data", rec.path, rec.frameId, !1);
        }.bind(this));
    },
    connectResultsListener: function(type) {
        this.resultsListeners[type] = this.handleReceiveResults.bind(this, type), 
        window.addEventListener("message", this.resultsListeners[type], !1);
    },
    disconnectResultsListener: function(type) {
        window.removeEventListener("message", this.resultsListeners[type], !1);
    },
    getResults: function(type) {
        var mode;
        switch (type) {
          case "headings":
            mode = "previewMode_tableHeadings";
            break;

          case "data":
            mode = "previewMode_tableCells";
            break;

          default:
            return;
        }
        return null === this.results[type] && (this.connectResultsListener(type), 
        this.postCommand("page", {
            type: "PREVIEW_MODE",
            mode: mode,
            parentSelector: this.getModelProperty("path")
        })), this.results[type];
    },
    handleReceiveResults: function(type, event) {
        var mode;
        switch (type) {
          case "headings":
            mode = "previewMode_tableHeadings";
            break;

          case "data":
            mode = "previewMode_tableCells";
            break;

          default:
            return;
        }
        try {
            "PREVIEW_MODE" === event.data.result.type && event.data.result.mode === mode && (this.disconnectResultsListener(type), 
            null === this.results[type] && (this.results[type] = []), $.each(JSON.parse(event.data.result.results), function(type, frameId, i, rec) {
                rec.frameId = frameId, this.results[type].push(rec);
            }.bind(this, type, event.data.result.frameId)));
        } catch (e) {}
    },
    getGrid: function(type) {
        var results = this.getResults(type);
        return new AST.datagrid.Simple({
            attributes: {
                class: "preview-results"
            },
            emptyText: "No " + type + " found.",
            records: results,
            columns: [ new AST.datagrid.Column({
                content: "Details",
                renderer: function(rec) {
                    rec = $(rec.content);
                    return $("<div>").append(AST.Util.prettyPrintHtml(rec[0]).render());
                }.bind(this),
                attributes: {
                    class: "width-85 contains-html"
                }
            }), new AST.datagrid.Column({
                content: "Actions",
                attributes: {
                    class: "actions width-15"
                },
                renderer: function(type, rec) {
                    return new AST.Element({
                        tagName: "div",
                        children: [ new AST.form.Button({
                            listeners: {
                                click: this.handleViewDetail.bind(this, type, rec)
                            },
                            attributes: {
                                title: "View"
                            },
                            content: '<i class="fas fa-eye"></i><span class="a11y-offscreen-text">View</span>'
                        }) ]
                    }).render();
                }.bind(this, type)
            }) ]
        });
    }
}), AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.BackgroundImages = function(c) {
    this.initModel((c = c || {}).data || {}), this.setTarget(c.target || void 0), 
    this.getResults();
}, $.extend(AST.Pages.preview.BackgroundImages.prototype, AST.postsMessagesMixin, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    results: null,
    getResults: function() {
        return null === this.results && (this.connectResultsListener(), this.postCommand("page", {
            type: "PREVIEW_MODE",
            mode: "previewMode_backgroundImages"
        })), this.results;
    },
    handleToggle: function(ev) {
        ev.preventDefault(), $.each(this.getResults(), function(i, result) {
            this.postCommand("page", {
                type: "TOGGLE_BACKGROUND_IMAGE",
                frameId: result.frameId,
                selector: result.path
            });
        }.bind(this));
    },
    showImages: function() {
        $.each(this.getResults(), function(i, result) {
            this.postCommand("page", {
                type: "TOGGLE_BACKGROUND_IMAGE",
                frameId: result.frameId,
                selector: result.path,
                mode: "on"
            });
        }.bind(this));
    },
    launch: function() {
        var children;
        null === this.results ? setTimeout(this.launch.bind(this), 100) : (children = [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), this.showImages(), this.modal.close();
                }.bind(this)
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h2",
            content: "Mode: Background Images"
        }), new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: "All CSS background images that convey meaning including those that are within links should provide visual and textual equivalents. It is not directly possible to assign alternative text to background images using an alt attribute prior to CSS 4. For this reason, the meaning conveyed by the background image will not be conveyed to users who cannot see the image. Ensure that meaning is not lost when background images are removed."
        }), new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: "Toggle background images on the page on and off to ensure meaning is not lost when background images are not visible."
        }), new AST.form.Button({
            content: "Toggle Background Images",
            listeners: {
                click: this.handleToggle.bind(this)
            }
        }) ], this.modal = new AST.window.Modal({
            title: '<i class="fas fa-mouse-pointer"></i> Preview Modes',
            height: 80,
            width: 80,
            target: this.getTarget(),
            children: children
        }), this.modal.render());
    },
    connectResultsListener: function() {
        this.resultsListener = this.handleReceiveResults.bind(this), window.addEventListener("message", this.resultsListener, !1);
    },
    disconnectResultsListener: function() {
        window.removeEventListener("message", this.resultsListener, !1);
    },
    handleReceiveResults: function(event) {
        try {
            "PREVIEW_MODE" === event.data.result.type && (this.disconnectResultsListener(), 
            null === this.results && (this.results = []), $.each(JSON.parse(event.data.result.results), function(frameId, i, rec) {
                rec.frameId = frameId, this.results.push(rec);
            }.bind(this, event.data.result.frameId)));
        } catch (e) {}
    }
}), AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Headings = function(c) {
    (c = c || {}).title = "Headings", c.testID = "previewMode_headings", c.callback = "headings", 
    AST.Pages.preview.ResultsGrid.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.preview.Headings.prototype, AST.Pages.preview.ResultsGrid.prototype), 
AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Iframes = function(c) {
    (c = c || {}).title = "iframes", c.testID = "previewMode_iframes", c.callback = "iframes", 
    AST.Pages.preview.ResultsGrid.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.preview.Iframes.prototype, AST.Pages.preview.ResultsGrid.prototype), 
AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Images = function(c) {
    (c = c || {}).title = "Images", c.testID = "previewMode_images", c.callback = "images", 
    AST.Pages.preview.ResultsGrid.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.preview.Images.prototype, AST.Pages.preview.ResultsGrid.prototype), 
AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Lang = function(c) {
    (c = c || {}).title = "Lang Attributes", c.testID = "previewMode_elsWithLangAttribs", 
    c.callback = "lang", AST.Pages.preview.ResultsGrid.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.preview.Lang.prototype, AST.Pages.preview.ResultsGrid.prototype), 
AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Lists = function(c) {
    (c = c || {}).title = "Lists", c.testID = "previewMode_lists", c.callback = "lists", 
    AST.Pages.preview.ResultsGrid.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.preview.Lists.prototype, AST.Pages.preview.ResultsGrid.prototype), 
AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.Modes = function(c) {
    this.initModel((c = c || {}).data || {}), this.setTarget(c.target);
}, $.extend(AST.Pages.preview.Modes.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleMode: function(mode, ev) {
        ev.preventDefault();
        switch (mode) {
          case "toggleCSS":
          case "backgroundImages":
          case "images":
          case "lists":
          case "iframes":
          case "headings":
          case "lang":
          case "tables":
            AST.controller.fireEvent(mode.toLowerCase(), ev.currentTarget);
        }
    },
    launch: function() {
        var container = new AST.Element({
            tagName: "ul",
            attributes: {
                class: "chooser"
            },
            children: [ new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "toggleCSS")
                    },
                    content: '<i class="fad fa-toggle-on fa-fw"></i> Toggle CSS'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: "Toggle CSS on and off on the page to ensure the page is readable without style sheets."
                }) ]
            }), new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "backgroundImages")
                    },
                    content: '<i class="fad fa-images fa-fw"></i> Background Images'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: "Toggle background images on the page on and off to ensure meaning is not lost when background images are not visible."
                }) ]
            }), new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "images")
                    },
                    content: '<i class="fad fa-image fa-fw"></i> Images'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: "Highlight images on the page and evaluate their accessible name to determine whether they are correctly marked up for accessibility."
                }) ]
            }), new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "lists")
                    },
                    content: '<i class="fad fa-clipboard-list fa-fw"></i> Lists'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: "Highlight Lists on the page to ensure all list items are related, option elements in large lists are grouped, and sub-lists are marked up properly."
                }) ]
            }), new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "iframes")
                    },
                    content: '<i class="fad fa-window fa-fw"></i> iframes'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: "Highlight &lt;iframes&gt; on the page to easily identify them at a glance and determine whether or not the iframe has a useful accessible name that accurately conveys the contents of the iframe."
                }) ]
            }), new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "headings")
                    },
                    content: '<i class="fad fa-heading fa-fw"></i> Headings'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: "Highlight headings on the page to review the page structure and ensure that all headings are explicitly stated with proper markup and in correct reading order."
                }) ]
            }), new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "tables")
                    },
                    content: '<i class="fad fa-table fa-fw"></i> Tables'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: "Highlight data tables on the page to verify that tables are properly identified as data or layout depending on the purpose of the table and correctly marked up with table elements, like table, tr, td, th, and the scope attribute."
                }) ]
            }), new AST.Element({
                tagName: "li",
                children: [ new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleMode.bind(this, "lang")
                    },
                    content: '<i class="fad fa-language fa-fw"></i> Lang Attribute'
                }), new AST.Element({
                    tagName: "p",
                    attributes: {
                        class: "instructions"
                    },
                    content: 'Highlight elements with "lang" attribute on the page to ensure that all elements are correctly defined with their natural language.'
                }) ]
            }) ]
        });
        this.modal = new AST.window.Popup({
            title: '<i class="fas fa-mouse-pointer fa-fw"></i> Preview Modes',
            height: 80,
            width: 80,
            target: this.getTarget(),
            children: [ container ]
        }), this.modal.render();
    }
}), AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.ToggleCSS = function(c) {
    this.initModel((c = c || {}).data || {}), this.setTarget(c.target || void 0);
}, $.extend(AST.Pages.preview.ToggleCSS.prototype, AST.hasDataModelMixin, AST.postsMessagesMixin, AST.RememberFocusTargetMixin, {
    _isOff: !1,
    setOff: function(is) {
        this._isOff = is;
    },
    isOff: function() {
        return this._isOff;
    },
    handleToggle: function(ev) {
        ev.preventDefault(), this.isOff() ? this.postCommand("page", {
            type: "TOGGLE_CSS_ON"
        }) : this.postCommand("page", {
            type: "TOGGLE_CSS_OFF"
        }), this.setOff(!this.isOff());
    },
    launch: function() {
        var children = [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), this.postCommand("page", {
                        type: "TOGGLE_CSS_ON"
                    }), this.modal.close();
                }.bind(this)
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h2",
            content: "Mode: Toggle CSS"
        }), new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: "Users can define specific style preferences to accommodate their disability through the creation of customized style sheets. If designers set up their pages to override user-defined style sheets, or in other ways which are unable to be overridden by the user's style sheets, visitors with disabilities may be unable to use those pages. Therefore, it is important that designers ensure that their web pages are readable without style sheets."
        }), new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: "Toggle CSS on and off on the page to ensure the page is readable without style sheets."
        }), new AST.form.Button({
            content: "Toggle CSS",
            listeners: {
                click: this.handleToggle.bind(this)
            }
        }) ];
        this.modal = new AST.window.Modal({
            title: '<i class="fas fa-mouse-pointer"></i> Preview Modes',
            height: 80,
            width: 80,
            target: this.getTarget(),
            children: children
        }), this.modal.render();
    }
}), AST.Pages.manualTest = AST.Pages.manualTest || {}, AST.Pages.manualTest.Wizard = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.manualTest.Wizard.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    _steps: [],
    loadTestingMode: function(callback) {
        var internalCallback;
        AST.controller.isFeatureEnabled("testingModes") ? (internalCallback = function(callback, data) {
            this.getModel().setData(data.result), callback();
        }.bind(this, callback), AST.controller.ajaxGet(!0, "/api/assistant/testingMode/" + this.getModel().get("id"), {}, internalCallback)) : callback();
    },
    loadInstanceCounts: function() {
        var callback = function(data) {
            $.each(data.result, function(bpId, instanceCount) {
                $("#instance-count-" + bpId).html(instanceCount);
            });
        }.bind(this);
        AST.controller.ajaxGet(!0, "/api/assistant/testingMode/module/" + AST.Storage.get("activeModule", new AST.Model()).get("moduleID") + "/instances/count", {}, callback);
    },
    launch: function() {
        this.loadTestingMode(this.render.bind(this));
    },
    render: function() {
        this.wizard = new AST.wizard.Wizard({
            id: "mtw-" + AST.Storage.get("activeModule", new AST.Model()).get("moduleID"),
            title: '<i class="fas fa-clipboard-list"></i> Manual Test - ' + this.getModel().get("name"),
            height: 90,
            width: 75,
            target: this.getTarget()
        });
        var steps = [];
        $.each(this.getModel().get("categories"), function(i, category) {
            var children = [];
            $.each(category.steps, function(i, data) {
                children.push(this._drawStep(data));
            }.bind(this)), steps.push(new AST.wizard.Step({
                title: category.name,
                subtitle: category.steps.length + " tests",
                children: [ new AST.Element({
                    tagName: "ul",
                    children: children
                }) ]
            }));
        }.bind(this)), 0 < steps.length && steps.push(this._drawValidationStep()), 
        this.wizard.setSteps(steps), this.wizard.render(), this.wizard.addListener("close", function() {
            $ACC.bootstrap();
        }), setTimeout(this.loadInstanceCounts.bind(this), 250), AST.controller.addListener("reloadinstancelist", this.loadInstanceCounts.bind(this), this, this.wizard.getEl());
    },
    _drawStep: function(data) {
        return new AST.Element({
            tagName: "li",
            children: [ new AST.panels.Panel({
                toggleDescribedBy: data.violation_id + "-title-span",
                title: [ new AST.Element({
                    tagName: "span",
                    content: data.bp_title,
                    id: data.violation_id + "-title-span"
                }), new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "instance-count"
                    },
                    children: [ new AST.Icon({
                        icon: "fas fa-bug"
                    }), new AST.Element({
                        tagName: "a",
                        attributes: {
                            href: "#",
                            role: "button",
                            "aria-live": "polite"
                        },
                        children: [ new AST.Element({
                            tagName: "span",
                            content: "View Linked Instances: ",
                            attributes: {
                                class: "a11y-offscreen-text"
                            }
                        }), new AST.Element({
                            tagName: "span",
                            id: "instance-count-" + data.violation_id,
                            content: "0"
                        }) ],
                        listeners: {
                            click: this.handleViewInstances.bind(this, data.violation_id)
                        }
                    }) ]
                }), new AST.form.Button({
                    content: '<i class="fas fa-bug"></i> Add <span class="a11y-offscreen-text">Instance</span>',
                    listeners: {
                        click: this.handleAddInstance.bind(this, data.violation_id, data)
                    }
                }) ],
                collapsible: !0,
                children: [ this._drawRelevantRules(data.relevant_rules), new AST.Element({
                    tagName: "div",
                    content: this._convertHeadingTags(data.description)
                }) ]
            }) ]
        });
    },
    _convertHeadingTags: function(html) {
        return html = (html = (html = html.replace(/<(\/*)h5([^>]*)>/gi, "<$1h6$2>")).replace(/<(\/*)h4([^>]*)>/gi, "<$1h5$2>")).replace(/<(\/*)h3([^>]*)>/gi, "<$1h4$2>");
    },
    _drawRelevantRules: function(rules) {
        var ruleNames = [];
        return $.each(rules, function(ruleId, name) {
            ruleNames.push(new AST.Element({
                tagName: "li",
                content: name
            }));
        }), new AST.Element({
            tagName: "div",
            attributes: {
                class: "rules"
            },
            children: [ new AST.Element({
                tagName: "h4",
                content: "Relevant Rule(s): "
            }), new AST.Element({
                tagName: "ul",
                children: ruleNames
            }) ]
        });
    },
    handleViewInstances: function(bpId, ev) {
        ev.preventDefault(), new AST.Pages.manualTest.Wizard.Instances({
            bpId: bpId
        }, ev.currentTarget).launch();
    },
    handleAddInstance: function(bpId, test, ev) {
        ev.preventDefault();
        bpId = {
            moduleID: AST.Storage.get("activeModule", new AST.Model()).get("moduleID"),
            bestPractice: {
                id: bpId
            },
            test: test
        };
        AST.controller.fireEvent("manualaddinstance", [ bpId, ev.currentTarget, !0 ]);
    },
    _drawValidationStep: function() {
        var validationList = new AST.Element({
            tagName: "ul",
            attributes: {
                class: "instance-list"
            }
        });
        return this.wizard.addListener("step", this.loadValidationStep.bind(this, validationList)), 
        AST.controller.addListener("reloadinstancelist", this.loadValidationStep.bind(this, validationList), this, this.wizard.getEl()), 
        new AST.wizard.Step({
            title: "Validate Manual Testing Results",
            children: [ validationList ]
        });
    },
    loadValidationStep: function(container, step) {
        (step = step || this.wizard.getCurrentStep()) === this.wizard.getSteps().length ? AST.controller.ajaxGet(!0, "/api/assistant/testingMode/module/" + AST.Storage.get("activeModule", new AST.Model()).get("moduleID") + "/review", {}, this.drawResults.bind(this, container)) : this.wizard.resetButtons();
    },
    drawResults: function(container, data) {
        if ($(container.getEl()).empty(), data && data.result && data.result.error && "true" === data.result.error) return noData = new AST.Element({
            tagName: "li",
            content: data.result.message,
            attributes: {
                class: "no-data"
            }
        }), void $(container.getEl()).append(noData.render());
        $.each(data.result, this._renderBP.bind(this, container)), this.wizard.setButtons([ new AST.Element({
            tagName: "span",
            content: '<i class="fas fa-fw fa-info-circle icon-blue"></i> Do all testing results appear to be valid?'
        }), new AST.form.Button({
            content: '<i class="fas fa-check"></i> Mark Testing Complete',
            listeners: {
                click: this.handleFinish.bind(this)
            }
        }) ]), this.wizard.renderButtons();
        var noData = $(":focus").first();
        this.wizard.addFocusTrap(!0), noData && noData.focus();
    },
    _renderBP: function(container, i, data) {
        data = new AST.Element({
            tagName: "li",
            children: [ new AST.panels.GridPanel({
                collapsible: !0,
                title: [ new AST.Element({
                    tagName: "span",
                    content: data.name
                }), new AST.Element({
                    tagName: "span",
                    attributes: {
                        class: "instance-count"
                    },
                    content: '<i class="fas fa-bug"></i> <span class="a11y-offscreen-text">Instances: </span>' + data.instances.length
                }) ],
                children: [ new AST.Pages.manualTest.Wizard.Datagrid({
                    bestPractice: new AST.Model(data),
                    model: AST.Storage.get("activeModule", new AST.Model()),
                    records: data.instances,
                    isWritable: this.getModel().get("isWritable")
                }) ]
            }) ]
        });
        $(container.getEl()).append(data.render());
    },
    handleFinish: function(ev) {
        ev.preventDefault();
        ev = AST.Storage.get("activeModule", new AST.Model());
        ev.set("testingComplete", !0), ev.set("moduleState", 4), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/edit", ev.getData(), function() {
            this.wizard.close(), AST.controller.fireEvent("moduleview", AST.Storage.get("activeModule", new AST.Model()).getData());
        }.bind(this));
    }
}), AST.Pages.manualTest.Wizard.Datagrid = function(c) {
    AST.Pages.module.View.Datagrid.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.manualTest.Wizard.Datagrid.prototype, AST.Pages.module.View.Datagrid.prototype, {
    getColumnDefinition: function() {
        return [ new AST.datagrid.Column({
            content: "Status",
            attributes: {
                class: "status"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.status.bind(this)
        }), new AST.datagrid.Column({
            content: "Tag",
            attributes: {
                class: "tag"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.tag
        }), new AST.datagrid.Column({
            content: "Description",
            cellType: "th",
            attributes: {
                class: "detail"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.element
        }), new AST.datagrid.Column({
            content: "Actions",
            attributes: {
                class: "actions"
            },
            renderer: AST.Pages.module.View.Datagrid.Renderers.actions.bind(this)
        }) ];
    }
}), AST.Pages.manualTest.Wizard.Instances = function(data, target) {
    this.initModel(data), this.initFiltersInModel(), this.setTarget(target);
}, $.extend(AST.Pages.manualTest.Wizard.Instances.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.postsMessagesMixin, AST.module.elementFilterMixin, {
    launch: function() {
        this.loadInstancesByBP(this.draw.bind(this));
    },
    draw: function(data) {
        var result = {
            name: "No data found"
        };
        $.each(data.result, function(key, value) {
            return result = value, !1;
        }), this.modal = new AST.window.Popup({
            title: "Review Instances",
            height: 400,
            width: 75,
            target: this.getTarget(),
            attributes: {
                class: "instance-list"
            },
            children: [ new AST.Element({
                tagName: "h2",
                content: result.name
            }), new AST.Pages.manualTest.Wizard.Datagrid({
                bestPractice: new AST.Model(data),
                model: AST.Storage.get("activeModule", new AST.Model()),
                records: result.instances,
                isWritable: AST.Storage.get("activeModule", new AST.Model()).get("isWritable")
            }) ]
        }), this.modal.render();
    },
    loadInstancesByBP: function(callback) {
        var moduleId = AST.Storage.get("activeModule", new AST.Model()).get("moduleID");
        AST.controller.ajaxGet(!0, "/api/assistant/testingMode/module/" + moduleId + "/bp/" + this.getModel().get("bpId") + "/instances", {}, callback);
    }
}), AST.Pages.manualTest = AST.Pages.manualTest || {}, AST.Pages.manualTest.AddInstance = function(data, target, fromModal) {
    data.element = null, data.attribute = null, this.initModel(data), this.getModel().initExternalListener("instance"), 
    this.getModel().set("thumbnail", {}), this.initFiltersInModel(), this.setTarget(target), 
    this.setFromModal(fromModal);
}, $.extend(AST.Pages.manualTest.AddInstance.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.postsMessagesMixin, AST.module.elementFilterMixin, {
    fromModal: !1,
    isFromModal: function() {
        return this.fromModal;
    },
    setFromModal: function(val) {
        this.fromModal = val;
    },
    launch: function() {
        this.loadAvailableFilters(this.draw.bind(this));
    },
    draw: function() {
        var children = [ new AST.Element({
            tagName: "h3",
            content: this.getModel().get("test").name
        }), new AST.Element({
            tagName: "h4",
            content: "Add Instance"
        }) ], nodeCallbackField = new AST.form.InspectTool({
            label: "Description",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "element",
            required: !0
        }), thumbnailField = null;
        !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && (thumbnailField = new AST.form.Thumbnail({
            model: this.getModel(),
            modelProperty: "thumbnail"
        }), children.push(thumbnailField)), AST.controller.isFeatureEnabled("instanceRemediation") ? children.push(new AST.form.Fieldset({
            legend: "Details",
            children: [ new AST.form.TextArea({
                label: "Content Identifier",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "contentIdentifier"
            }), nodeCallbackField, new AST.form.TextArea({
                label: "Note",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "attribute"
            }), new AST.form.TextArea({
                label: "Resources",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "description"
            }) ]
        }), new AST.form.Fieldset({
            legend: "Problem",
            children: [ new AST.form.TextArea({
                label: "User Impact",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "userImpact"
            }), new AST.form.TextArea({
                label: "Steps to Reproduce",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "stepsToReproduce"
            }) ]
        }), new AST.form.Fieldset({
            legend: "Recommended Solution",
            children: [ new AST.form.TextArea({
                label: "Remediation",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "remediation"
            }), new AST.form.TextArea({
                label: "Code Suggestion",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "codeSuggestion"
            }) ]
        })) : children.push(nodeCallbackField, new AST.form.TextArea({
            label: "Note",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "attribute"
        })), this.modal = new AST.window.Popup({
            title: '<i class="fas fa-universal-access"></i> Manual Test',
            height: 90,
            width: 75,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "h1",
                content: "Module: " + AST.Storage.get("activeModule", new AST.Model()).get("moduleName")
            }), new AST.Element({
                tagName: "h2",
                content: "Asset: " + AST.Storage.get("activeAsset", new AST.Model()).get("name")
            }), new AST.Element({
                tagName: "h2",
                content: "Report: " + AST.Storage.get("activeReport", new AST.Model()).get("name")
            }), new AST.Element({
                tagName: "div",
                attributes: {
                    class: "bp-container"
                },
                children: children
            }) ],
            buttons: [ new AST.form.Button({
                content: "Add",
                attributes: {
                    accesskey: "m"
                },
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this)
            }
        }), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && this.modal.addListener("inspectednode-" + nodeCallbackField.getId(), function(thumbnailField, params) {
            thumbnailField.handleInspectSelection(params.node, params.frameId);
        }.bind(this, thumbnailField)), this.modal.render();
    },
    validate: function() {
        var listItem, errors = [];
        return $.isEmpty(this.getModel().get("element")) && ((listItem = new AST.Element({
            tagName: "li",
            content: "Description is required"
        })).setAppendContent(!0), errors.push(listItem)), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && !$.isEmpty(this.getModel().get("thumbnail.data")) && $.isEmpty(this.getModel().get("thumbnail.alt")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Alt Text is required"
        })), 0 === errors.length || (this.modal.handleErrors(errors), !1);
    },
    handleSave: function(ev) {
        ev.preventDefault(), this.validate() && (this.modal.close(), this.isFromModal() || $("#windows-container").empty(), 
        ev = {
            moduleID: this.getModel().get("moduleID"),
            violationID: this.getModel().get("bestPractice").id,
            attribute: this.getModel().get("attribute"),
            element: this.getModel().get("element"),
            testID: this.getModel().get("test").test_id,
            testTypeID: this.getModel().get("test").test_type_id
        }, AST.controller.isFeatureEnabled("instanceRemediation") && (ev.contentIdentifier = this.getModel().get("contentIdentifier"), 
        ev.description = this.getModel().get("description"), ev.userImpact = this.getModel().get("userImpact"), 
        ev.stepsToReproduce = this.getModel().get("stepsToReproduce"), ev.remediation = this.getModel().get("remediation"), 
        ev.codeSuggestion = this.getModel().get("codeSuggestion")), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && (ev.thumbnailAltText = this.getModel().get("thumbnail.alt"), 
        ev.thumbnailDataUrl = this.getModel().get("thumbnail.data")), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/edit", ev, function(data, status, xhr) {
            var sendData = AST.Storage.get("activeModule", new AST.Model()).getData();
            sendData.newInstanceID = data.result.instance_id, this.isFromModal() ? AST.controller.fireEvent("reloadinstancelist") : AST.controller.fireEvent("moduleview", sendData);
        }.bind(this)));
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.modal.close(), this.isFromModal() || AST.controller.fireEvent("manualstep3", [ this.getData(), this.getTarget() ]);
    }
}), AST.Pages.manualTest = AST.Pages.manualTest || {}, AST.Pages.manualTest.Step1 = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.manualTest.Step1.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    emptyText: "No manually-tested Best Practices are enabled for this report or its parent organization.",
    list: null,
    handleSelection: function(rec, ev) {
        ev.preventDefault(), this.modal.close();
        ev = this.getData();
        ev.bestPractice = rec, AST.controller.fireEvent("manualstep2", [ ev, this.getTarget() ]);
    },
    maskModal: function() {
        var container = this.modal.getWrapperEl().parent();
        container.css("z-index", container.css("z-index") - 1), this.loadingDialog = new AST.window.Modal({
            title: "Loading",
            height: 120,
            width: 300,
            children: [ new AST.Element({
                tagName: "h2",
                content: "Loading..."
            }) ]
        }), this.loadingDialog.render(!0);
    },
    unmaskModal: function() {
        this.loadingDialog.close();
        var container = this.modal.getWrapperEl().parent();
        container.css("z-index", container.css("z-index") + 1);
    },
    launch: function() {
        this.list = new AST.list.Unordered({
            dataUrl: "/api/assistant/bestpractices/list",
            attributes: {
                class: "bp-chooser"
            },
            params: {
                reportID: this.getModel().get("reportID"),
                manuals: !0
            },
            autoload: !0,
            renderer: function(rec) {
                return new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    content: rec.name,
                    listeners: {
                        click: this.handleSelection.bind(this, rec)
                    }
                }).render();
            }.bind(this)
        }), this.list.setEmptyText(this.emptyText), this.modal = new AST.window.Popup({
            title: '<i class="fas fa-universal-access"></i> Manual Test',
            height: 90,
            width: 75,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "h1",
                content: "Choose a Best Practice"
            }), this.getFilterForm(), this.list ]
        }), AST.controller.addListener("listload", function(dataUrl) {
            dataUrl === this.list.getDataUrl() && (this.modal.addFocusTrap(), $(this.liveRegion.getEl()).text(this.list.getRecords().length + " best practices found.")), 
            this.unmaskModal();
        }.bind(this), this, this.modal.getEl()), this.modal.render(), this.maskModal();
    },
    getFilterForm: function() {
        var filterModel = new AST.Model(), params = {
            mediaTypeID: 1,
            reportID: AST.Storage.get("activeReport", new AST.Model()).get("id")
        }, params = new AST.form.Select({
            label: "Media Types",
            labelPosition: "top",
            model: filterModel,
            modelProperty: "types",
            attributes: {
                multiple: !0,
                size: 7
            },
            dataUrl: "/api/assistant/mediatypes/list",
            params: params,
            autoload: !0,
            optionKey: "key",
            optionRenderer: function(rec) {
                return rec.title;
            }
        });
        return params.load = function() {
            $.isEmpty(this.getDataUrl()) || AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, this.getDataUrl(), this.getParams(), function(data) {
                this.setOptions(data.result.children), this._renderData();
            }.bind(this));
        }.bind(params), this.liveRegion = new AST.Element({
            tagName: "span",
            attributes: {
                "aria-live": "polite"
            }
        }), new AST.form.FilterForm({
            orientation: "horizontal",
            children: [ new AST.form.Text({
                label: "Search",
                labelPosition: "top",
                model: filterModel,
                modelProperty: "search"
            }), params ],
            listeners: {
                submit: this.handleFilter.bind(this, filterModel)
            },
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Go"
                },
                listeners: {
                    click: this.handleFilter.bind(this, filterModel)
                }
            }), new AST.form.CancelButton({
                content: "Clear",
                listeners: {
                    click: this.handleClearFilter.bind(this, filterModel)
                }
            }), this.liveRegion ]
        });
    },
    handleFilter: function(filterModel, ev) {
        ev.preventDefault(), this.list.setParam("mediaTypes", filterModel.get("types")), 
        this.list.setParam("search", filterModel.get("search")), this.list.load();
    },
    handleClearFilter: function(filterModel, ev) {
        ev.preventDefault(), filterModel.set("types", void 0), filterModel.set("search", void 0), 
        this.handleFilter(filterModel, ev);
    }
}), AST.Pages.manualTest = AST.Pages.manualTest || {}, AST.Pages.manualTest.Step2 = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.manualTest.Step2.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleSelection: function(testData, status, xhr) {
        var data = this.getData();
        0 < testData.result.length ? (data.test = testData.result[0], AST.controller.fireEvent("manualstep3", [ data, this.getTarget() ])) : AST.controller.fireEvent("manualstep1", this.getTarget());
    },
    launch: function() {
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/manualtests/list", {
            bestPracticeID: this.getModel().get("bestPractice").id,
            testTypeFilter: [ AST.Util.TestTypes.MANUAL, AST.Util.TestTypes.GLOBAL, AST.Util.TestTypes.IMPLIED_GLOBAL ]
        }, this.handleSelection.bind(this));
    }
}), AST.Pages.manualTest = AST.Pages.manualTest || {}, AST.Pages.manualTest.Step3 = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.manualTest.Step3.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleAddInstance: function(ev) {
        ev.preventDefault(), this.modal.close(), AST.controller.fireEvent("manualaddinstance", [ this.getData(), this.getTarget(), !1 ]);
    },
    handleBack: function(ev) {
        ev.preventDefault(), this.modal.close();
        ev = this.getData();
        ev.test = void 0, ev.bestPractice = void 0, AST.controller.fireEvent("manualstep1", this.getTarget());
    },
    launch: function() {
        this.modal = new AST.window.Popup({
            title: '<i class="fas fa-universal-access"></i> Manual Test',
            height: 80,
            width: 75,
            target: this.getTarget(),
            children: [ new AST.form.Button({
                attributes: {
                    class: "page-back-btn",
                    title: "Back"
                },
                listeners: {
                    click: this.handleBack.bind(this)
                },
                content: AST.Util.getBackButton("Back")
            }), new AST.Element({
                tagName: "h1",
                content: "Module: " + this.getModel().get("moduleName")
            }), new AST.Element({
                tagName: "h2",
                content: "Asset: " + AST.Storage.get("activeAsset", new AST.Model()).get("name")
            }), new AST.Element({
                tagName: "h2",
                content: "Report: " + AST.Storage.get("activeReport", new AST.Model()).get("name")
            }), new AST.Element({
                tagName: "div",
                attributes: {
                    class: "bp-container"
                },
                children: [ new AST.Element({
                    tagName: "h3",
                    content: this.getModel().get("test").name
                }), new AST.Element({
                    tagName: "div",
                    attributes: {
                        class: "bp-steps"
                    },
                    content: this.getModel().get("test").check_description
                }) ]
            }) ],
            buttons: [ new AST.form.Button({
                content: '<i class="fas fa-plus-circle"></i> Add Instance',
                listeners: {
                    click: this.handleAddInstance.bind(this)
                }
            }) ]
        }), this.modal.render();
    }
}), AST.Pages.macro = AST.Pages.macro || {}, AST.Pages.macro.Delete = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.macro.Delete.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault(), el.bubbleEvent("closewindow"), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/macros/delete", {
            macroID: this.getModel().get("id"),
            projectID: AST.Storage.get("activeAsset", new AST.Model()).get("projectID")
        }, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("reloadmacrolist");
        }.bind(this, el));
    },
    launch: function() {
        var modal = this.getModel().get("isUsed") ? this.getCascadeDeleteModal() : this.getSimpleDeleteModal();
        modal.render();
    },
    getSimpleDeleteModal: function() {
        var deleteButton = new AST.form.Button({
            content: "Delete"
        });
        return deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Delete Macro?',
            height: 170,
            width: 360,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: 'Are you sure you want to delete macro "<em>' + this.getModel().get("name") + '</em>"?<br/>Deleted macros cannot be accessed once deleted.'
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        });
    },
    getCascadeDeleteModal: function() {
        var deleteButton = new AST.form.Button({
            content: "Yes"
        });
        return deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        new AST.window.Warning({
            title: '<i class="fas fa-exclamation-triangle"></i> Delete Macro?',
            height: 170,
            width: 360,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: 'Are you sure you want to delete macro "<em>' + this.getModel().get("name") + '</em>"?<br/>This macro is in use by one or more tests. Deleting it may break those tests. Continue?'
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                content: "No",
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        });
    }
}), AST.Pages.macro = AST.Pages.macro || {}, AST.Pages.macro.Edit = function(data) {
    this.initModel(data), $.isArray(this.getModel().get("steps")) || this.getModel().set("steps", AST.Util.mapObject(data.steps, function(rec) {
        return rec;
    })), this.getModel().set("steps", this.getModel().get("steps").map(function(record) {
        return record.sequence = parseInt(record.sequence), record;
    })), this.sequence = data.steps.length;
}, $.extend(AST.Pages.macro.Edit.prototype, AST.hasDataModelMixin, AST.postsMessagesMixin, {
    sequence: 0,
    launch: function() {
        this.display(!0);
    },
    handleSave: function(ev) {
        ev.preventDefault();
        ev = this.getData();
        ev.steps = this.dataGrid.getRecords(), ev.macroID = ev.id, ev.projectID = AST.Storage.get("activeAsset", new AST.Model()).get("projectID"), 
        this.validate() && AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/macros/edit", ev, function(data, status, xhr) {
            data.result.success ? AST.controller.fireEvent("macrolist") : this.form.handleErrors(data.result.errors.map(function(error) {
                return new AST.Element({
                    tagName: "li",
                    content: error
                });
            }));
        }.bind(this));
    },
    validate: function() {
        var errors = [];
        if (($.isEmpty(this.getModel().get("name")) || 100 < this.getModel().get("name").length) && errors.push(new AST.Element({
            tagName: "li",
            content: "Name is required and must be no more than 100 characters."
        })), $.isEmpty(this.getModel().get("sourceUrl")) || 2083 < this.getModel().get("sourceUrl").length ? errors.push(new AST.Element({
            tagName: "li",
            content: "URL is required and must be no more than 2083 characters."
        })) : AST.Util.isValidUrl(this.getModel().get("sourceUrl"), !0) || (AST.Util.isValidUrl(this.getModel().get("sourceUrl").split("//").pop()) ? errors.push(new AST.Element({
            tagName: "li",
            content: "URL must start with a valid protocol: http://, https://, or file://"
        })) : errors.push(new AST.Element({
            tagName: "li",
            content: 'URL is required and must be a valid url, i.e. "http://amp.levelaccess.net"'
        }))), 0 === this.dataGrid.getRecords().length) errors.push(new AST.Element({
            tagName: "li",
            content: "Macro steps are required. Use recording control to record steps."
        })); else {
            const regex = new RegExp(AST.controller.getFeature("macroUsernameRegex"));
            this.dataGrid.getRecords().forEach(function(record, index) {
                ($.isEmpty(record.selector) || 1024 < record.selector.length) && errors.push(new AST.Element({
                    tagName: "li",
                    content: "Step " + (index + 1) + ": Selector is required and must be no more than 1024 characters."
                })), $.isEmpty(record.type) ? errors.push(new AST.Element({
                    tagName: "li",
                    content: "Step " + (index + 1) + ": Type is invalid."
                })) : record.type !== AST.Util.MacroCommands.CLICK && $.isEmpty(record.value) && errors.push(new AST.Element({
                    tagName: "li",
                    content: "Step " + (index + 1) + ": Value is required."
                })), record.type === AST.Util.MacroCommands.USERNAME && regex && !regex.test(record.value) && errors.push(new AST.Element({
                    tagName: "li",
                    content: "Step " + (index + 1) + ": Username is invalid. Must meet regex: " + regex
                }));
            });
        }
        return 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("macrolist");
    },
    display: function(edit) {
        edit = edit || !1;
        const columns = [ new AST.datagrid.Column({
            dataIndex: "type",
            content: "Type"
        }), new AST.datagrid.Column({
            dataIndex: "selector",
            content: "CSS Selector"
        }), new AST.datagrid.Column({
            dataIndex: "value",
            content: "Value",
            renderer: function(rec) {
                return "password" === rec.type ? "**********" : rec.value;
            }
        }) ];
        AST.controller.isFeatureEnabled("editableMacros") && columns.unshift(new AST.datagrid.Column({
            content: "Actions",
            attributes: {
                class: "actions"
            },
            renderer: function(rec) {
                const buttons = [];
                var blankButton = new AST.form.Button({
                    attributes: {
                        disabled: !0,
                        tabIndex: -1,
                        "aria-hidden": !0
                    },
                    content: "&nbsp;"
                });
                return 1 < this.dataGrid.getRecords().length && (0 < rec.sequence ? buttons.push(new AST.form.Button({
                    listeners: {
                        click: this.handleMoveStep.bind(this, rec, -1)
                    },
                    attributes: {
                        title: "Move Up"
                    },
                    content: '<i class="fas fa-caret-up"></i><span class="a11y-offscreen-text">Move step ' + rec.sequence + " up</span>"
                })) : buttons.push(blankButton), rec.sequence !== this.dataGrid.getRecords().length - 1 ? buttons.push(new AST.form.Button({
                    listeners: {
                        click: this.handleMoveStep.bind(this, rec, 1)
                    },
                    attributes: {
                        title: "Move Down"
                    },
                    content: '<i class="fas fa-caret-down"></i><span class="a11y-offscreen-text">Move step ' + rec.sequence + " down</span>"
                })) : buttons.push(blankButton)), buttons.push(new AST.form.Button({
                    listeners: {
                        click: this.handleDeleteStep.bind(this, rec)
                    },
                    attributes: {
                        title: "Delete"
                    },
                    content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Delete step ' + (rec.sequence + 1) + "</span>"
                })), new AST.Element({
                    tagName: "div",
                    attributes: {
                        style: "width: 6em; text-align: left;"
                    },
                    children: buttons
                }).render();
            }.bind(this)
        })), this.dataGrid = new AST.datagrid.Simple({
            columns: columns,
            records: this.getModel().get("steps"),
            actions: !edit || AST.controller.isFeatureEnabled("editableMacros") ? this.getRecordingControls() : []
        });
        var permissionsRadios = [ new AST.form.Radio({
            label: "Only Me",
            model: this.getModel(),
            modelProperty: "shared",
            attributes: {
                name: "permissions-selector",
                value: 0
            }
        }), new AST.form.Radio({
            label: "Everyone",
            model: this.getModel(),
            modelProperty: "shared",
            attributes: {
                name: "permissions-selector",
                value: 1
            }
        }) ];
        (this.getModel().get("shared") ? permissionsRadios[1] : permissionsRadios[0]).setAttribute("checked"), 
        this.form = new AST.form.Form({
            attributes: {
                class: "buttons-right"
            },
            children: [ new AST.Element({
                tagName: "h1",
                content: (edit ? "Edit " : "Create New ") + "Macro"
            }), new AST.form.Fieldset({
                legend: "Properties",
                children: [ new AST.form.DisplayText({
                    id: "projectName",
                    label: "Asset",
                    content: AST.Storage.get("activeAsset", new AST.Model()).get("name")
                }), new AST.form.Text({
                    label: "URL",
                    model: this.getModel(),
                    modelProperty: "sourceUrl",
                    required: !0
                }), new AST.form.Text({
                    label: "Name",
                    model: this.getModel(),
                    modelProperty: "name",
                    required: !0
                }), new AST.form.RadioGroup({
                    label: "Permissions",
                    children: permissionsRadios
                }) ]
            }), new AST.Element({
                tagName: "h2",
                content: "Macro Steps"
            }), this.dataGrid ],
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Save"
                },
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this)
            }
        }), AST.controller.renderPage(this.form, "Edit Macro");
    },
    getRecordingControls: function() {
        this.recordButton = new AST.form.Button({
            content: '<i class="fas fa-circle"></i> Record',
            attributes: {
                class: "record-button"
            }
        }), this.recordButton.setCaptureClickEvent(!1), this.recordButton.addListener("click", this.toggleRecord.bind(this)), 
        this.pauseButton = new AST.form.Button({
            content: '<i class="fas fa-pause"></i> Pause',
            captureClickEvent: !1,
            attributes: {
                disabled: !0,
                class: "pause-button"
            }
        }), this.pauseButton.addListener("click", this.toggleRecord.bind(this));
        const buttons = [ new AST.Element({
            tagName: "div",
            attributes: {
                class: "flex-space"
            }
        }), new AST.Element({
            tagName: "div",
            attributes: {
                class: "btn-group"
            },
            children: [ new AST.Element({
                tagName: "span",
                content: "Recording Control: "
            }), this.recordButton, this.pauseButton ]
        }) ];
        return AST.controller.isFeatureEnabled("editableMacros") && buttons.unshift(new AST.form.MenuButton({
            content: '<i class="fas fa-plus-circle"></i> <span class="a11y-offscreen-text">Add </span> Step',
            attributes: {
                title: "Add Step"
            },
            children: AST.Util.mapObject(AST.Util.MacroCommands, function(command) {
                return new AST.form.MenuButtonItem({
                    content: command,
                    attributes: {
                        style: "text-transform: capitalize"
                    },
                    listeners: {
                        click: this.handleAddStep.bind(this, command)
                    }
                });
            }.bind(this))
        })), buttons;
    },
    toggleRecord: function(ev) {
        ev.preventDefault();
        ev = $(this.recordButton.getEl());
        ev.hasClass("on") ? (ev.removeClass("on"), ev.attr("disabled", !1), $(this.pauseButton.getEl()).attr("disabled", !0), 
        this.disconnectRecorderListener(), this.postCommand("page", {
            type: "MACRO_RECORDING_STOP"
        })) : (ev.addClass("on"), ev.attr("disabled", !0), $(this.pauseButton.getEl()).attr("disabled", !1), 
        this.connectRecorderListener(), this.postCommand("page", {
            type: "MACRO_RECORDING_START"
        }));
    },
    handleRecorderResult: function(event) {
        try {
            var result;
            "MACRO_RECORDER_LINE" === event.data.result.type && (result = event.data.result, 
            this.dataGrid.addRecord({
                type: result.command,
                selector: result.selector,
                value: result.value,
                sequence: this.dataGrid.getRecords().length
            }), this.dataGrid.load());
        } catch (e) {
            AST.logger.log(e);
        }
    },
    handleDeleteStep: function(rec, ev) {
        ev.preventDefault();
        const records = this.dataGrid.getRecords();
        records.splice(rec.sequence, 1), this.dataGrid.setRecords(records.map(function(record, index) {
            return record.sequence = index, record;
        })), this.dataGrid.load();
    },
    handleMoveStep: function(rec, movement, ev) {
        ev.preventDefault();
        const records = this.dataGrid.getRecords();
        records[rec.sequence + movement].sequence = rec.sequence, records[rec.sequence].sequence = rec.sequence + movement, 
        records.sort(function(a, b) {
            return a.sequence < b.sequence ? -1 : a.sequence > b.sequence ? 1 : 0;
        }), this.dataGrid.setRecords(records), this.dataGrid.load();
    },
    handleAddStep: function(command, event) {
        event.preventDefault();
        var event = new AST.Model({
            command: command,
            selector: "",
            value: ""
        }), children = [ new AST.form.DisplayText({
            id: "command",
            label: "Command",
            content: event.get("command")
        }), new AST.form.Text({
            label: "Selector",
            model: event,
            modelProperty: "selector"
        }) ];
        command === AST.Util.MacroCommands.PASSWORD ? children.push(new AST.form.Password({
            label: "Value",
            model: event,
            modelProperty: "value"
        })) : command !== AST.Util.MacroCommands.CLICK && children.push(new AST.form.Text({
            label: "Value",
            model: event,
            modelProperty: "value"
        })), this.addWin = new AST.window.Modal({
            title: "Add Step",
            width: 360,
            height: command === AST.Util.MacroCommands.CLICK ? 252 : 326,
            children: children,
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Save"
                },
                listeners: {
                    click: this.handleAddStepSave.bind(this, event)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ],
            listeners: {
                submit: this.handleAddStepSave.bind(this, event)
            }
        }), this.addWin.render();
    },
    validateAddStep: function(model) {
        const errors = [], regex = ($.isEmpty(model.get("selector")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Selector is required"
        })), new RegExp(AST.controller.getFeature("macroUsernameRegex")));
        return $.isEmpty(model.get("command")) ? errors.push(new AST.Element({
            tagName: "li",
            content: "Type is invalid."
        })) : model.get("command") !== AST.Util.MacroCommands.CLICK && $.isEmpty(model.get("value")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Value is required."
        })), model.get("command") === AST.Util.MacroCommands.USERNAME && regex && !regex.test(model.get("value")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Username is invalid. Must meet regex: " + regex
        })), 0 === errors.length || (this.addWin.handleErrors(errors), !1);
    },
    handleAddStepSave: function(model, ev) {
        if (ev.preventDefault(), !this.validateAddStep(model)) return !1;
        this.handleRecorderResult({
            data: {
                result: {
                    type: "MACRO_RECORDER_LINE",
                    command: model.get("command"),
                    selector: model.get("selector"),
                    value: model.get("value")
                }
            }
        }), this.addWin.close();
    },
    connectRecorderListener: function() {
        this.resultsListener = this.handleRecorderResult.bind(this), window.addEventListener("message", this.resultsListener, !1);
    },
    disconnectRecorderListener: function() {
        window.removeEventListener("message", this.resultsListener, !1);
    }
}), AST.Pages.macro = AST.Pages.macro || {}, AST.Pages.macro.List = function() {}, 
$.extend(AST.Pages.macro.List.prototype, {
    handleNew: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("macronew");
    },
    handleView: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("macroview", data);
    },
    handleEdit: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("macroedit", data);
    },
    handleDelete: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("macrodelete", data);
    },
    launch: function() {
        var children = [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), AST.controller.fireEvent("assetview", AST.Storage.get("activeAsset", new AST.Model()).getData());
                }
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h1",
            content: "Macros for " + AST.Storage.get("activeAsset", new AST.Model()).get("name")
        }) ], reqPerms = [ AST.Login.permissions.STANDARD_USER, AST.Login.permissions.ORGANIZATION_ADMINISTRATOR, AST.Login.permissions.SYSTEM_ADMINISTRATOR, AST.Login.permissions.ROOT_ADMINISTRATOR ], actions = [], reqPerms = (AST.Login.hasPermission(reqPerms) && actions.push(new AST.form.Button({
            listeners: {
                click: this.handleNew.bind(this)
            },
            content: '<i class="fas fa-plus-circle"></i><span class="a11y-offscreen-text">Create New </span> Macro'
        })), new AST.datagrid.Simple({
            columns: [ new AST.datagrid.Column({
                dataIndex: "name",
                content: "Name",
                renderer: function(rec) {
                    var handler = this.handleEdit.bind(this, rec);
                    return rec.isOwner || (handler = this.handleView.bind(this, rec)), 
                    new AST.Element({
                        tagName: "a",
                        attributes: {
                            href: "#"
                        },
                        listeners: {
                            click: handler
                        },
                        content: rec.name
                    }).render();
                }.bind(this)
            }), new AST.datagrid.Column({
                dataIndex: "sourceUrl",
                content: "URL"
            }), new AST.datagrid.Column({
                dataIndex: "shared",
                content: "Permissions",
                renderer: function(rec) {
                    return rec.shared ? "Everyone" : "Only Me";
                }
            }), new AST.datagrid.Column({
                content: "Actions",
                attributes: {
                    class: "actions"
                },
                renderer: function(rec) {
                    if (!rec.isOwner) return "&nbsp;";
                    var buttons = [ new AST.form.Button({
                        listeners: {
                            click: this.handleEdit.bind(this, rec)
                        },
                        attributes: {
                            title: "Edit"
                        },
                        content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + rec.name + "</span>"
                    }) ];
                    return AST.controller.isFeatureEnabled("limitDelete") && !AST.Login.isSysAdmin(AST.Storage.get("activeAsset").get("organizationID")) || buttons.push(new AST.form.Button({
                        listeners: {
                            click: this.handleDelete.bind(this, rec)
                        },
                        attributes: {
                            title: "Delete"
                        },
                        content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Delete ' + rec.name + "</span>"
                    })), new AST.Element({
                        tagName: "div",
                        children: buttons
                    }).render();
                }.bind(this)
            }) ],
            dataUrl: "/api/assistant/macros/list",
            autoload: !0,
            params: {
                projectID: AST.Storage.get("activeAsset", new AST.Model()).get("projectID")
            },
            actions: actions,
            dataMapping: function(data) {
                return data.id = data.macro_id, data.projectID = data.project_id, 
                data.shared = 1 === parseInt(data.shared), data.isOwner = 1 === parseInt(data.isOwner), 
                data.isUsed = 1 === parseInt(data.isUsed), data;
            }
        })), actions = (AST.controller.addListener("reloadmacrolist", reqPerms.load, reqPerms, reqPerms.getEl()), 
        children.push(reqPerms), new AST.Element({
            tagName: "section",
            attributes: {
                class: "home-screen"
            },
            children: children
        }));
        AST.controller.renderPage(actions, "Macros");
    }
}), AST.Pages.macro = AST.Pages.macro || {}, AST.Pages.macro.New = function() {
    this.initModel({
        shared: 0,
        sourceUrl: "",
        projectID: AST.Storage.get("activeAsset", new AST.Model()).get("projectID"),
        steps: []
    });
}, $.extend(AST.Pages.macro.New.prototype, AST.Pages.macro.Edit.prototype, {
    displayLoadingDialog: function() {
        this.loadingDialog = new AST.window.Modal({
            title: "Loading",
            height: 120,
            width: 300,
            children: [ new AST.Element({
                tagName: "h2",
                content: "Loading page information..."
            }) ]
        }), this.loadingDialog.render(!0);
    },
    launch: function() {
        try {
            this.displayLoadingDialog(), this.postPromise("page", {
                type: "DOCUMENT_INFO"
            }).then(function(response) {
                this.loadingDialog.close(), this.getModel().set("sourceUrl", response.result.location), 
                this.display(!1);
            }.bind(this)).catch(function(error) {
                console.error(error);
            });
        } catch (err) {
            AST.logger.log(err);
        }
    }
}), AST.Pages.macro = AST.Pages.macro || {}, AST.Pages.macro.View = function(data) {
    this.initModel(data);
}, $.extend(AST.Pages.macro.View.prototype, AST.hasDataModelMixin, {
    launch: function() {
        this.dataGrid = new AST.datagrid.Simple({
            columns: [ new AST.datagrid.Column({
                dataIndex: "type",
                content: "Type"
            }), new AST.datagrid.Column({
                dataIndex: "selector",
                content: "CSS Selector"
            }), new AST.datagrid.Column({
                dataIndex: "value",
                content: "Value"
            }) ],
            records: this.getModel().get("steps")
        });
        var container = new AST.form.Form({
            attributes: {
                class: "home-screen"
            },
            children: [ new AST.form.Button({
                attributes: {
                    class: "page-back-btn",
                    title: "Back"
                },
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), AST.controller.fireEvent("macrolist");
                    }
                },
                content: AST.Util.getBackButton("Back")
            }), new AST.Element({
                tagName: "h1",
                content: "View Macro"
            }), new AST.form.Fieldset({
                legend: "Properties",
                children: [ new AST.form.DisplayText({
                    id: "projectName",
                    label: "Asset",
                    content: AST.Storage.get("activeAsset", new AST.Model()).get("name")
                }), new AST.form.DisplayText({
                    label: "Name",
                    content: this.getModel().get("name")
                }), new AST.form.DisplayText({
                    label: "Permissions",
                    content: this.getModel().get("shared") ? "Everyone" : "Only Me"
                }) ]
            }), new AST.Element({
                tagName: "h2",
                content: "Macro Steps"
            }), this.dataGrid ]
        });
        AST.controller.renderPage(container, "View Macro");
    }
}), AST.Pages.quickTest = AST.Pages.quickTest || {}, AST.Pages.quickTest.View = function(data) {
    this.initModel(data);
}, $.extend(AST.Pages.quickTest.View.prototype, AST.hasDataModelMixin, {
    launch: function() {
        var resultInfo = [ new AST.Element({
            tagName: "h2",
            content: "Quick Test Results"
        }), new AST.form.DisplayText({
            label: "Page",
            content: this.getModel().get("title")
        }), new AST.form.DisplayText({
            label: "URL",
            content: this.getModel().get("url")
        }) ], container = (this.getModel().get("path") && resultInfo.push(new AST.form.DisplayText({
            label: "Path",
            content: this.getModel().get("path")
        })), new AST.Element({
            tagName: "ul",
            attributes: {
                class: "instance-list"
            }
        })), resultInfo = (resultInfo.push(container), this.popup = new AST.window.Popup({
            title: "Quick Test Results",
            height: 80,
            width: 80,
            children: resultInfo
        }), this.popup.render(), {
            bestPractices: Object.keys(this.getModel().get("records"))
        });
        AST.controller.isLoggedIn() ? AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/bestpractices/list", resultInfo, this.drawResults.bind(this, container)) : AST.controller.ajaxPost(AST.Controller.WITHOUT_TOKEN, "/api/assistant/bestpractices/list", resultInfo, this.drawResults.bind(this, container));
    },
    drawResults: function(container, data, status, xhr) {
        $(container.getEl()).empty(), data.result.error ? $(container.getEl()).append(data.result.message) : ($.each(data.result, this._renderBP.bind(this, container)), 
        this.popup.addFocusTrap());
    },
    _renderBP: function(container, i, data) {
        data.violation_id = data.violationID, data.instances = this.getModel().get("records")[data.violation_id].instances, 
        bpTitle = AST.controller.isFeatureEnabled("publicBPs") ? new AST.Element({
            tagName: "a",
            attributes: {
                href: "#"
            },
            listeners: {
                click: this.handleViewBP.bind(this, data)
            },
            content: data.name
        }) : new AST.Element({
            tagName: "span",
            content: data.name
        });
        var bpTitle = new AST.Element({
            tagName: "li",
            children: [ new AST.panels.GridPanel({
                title: bpTitle,
                collapsible: !0,
                children: [ new AST.Pages.quickTest.View.Datagrid({
                    records: data.instances
                }) ]
            }) ]
        });
        $(container.getEl()).append(bpTitle.render());
    },
    handleViewBP: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("bpview", [ data, ev.target ]);
    }
}), AST.Pages.quickTest = AST.Pages.quickTest || {}, AST.Pages.quickTest.View = AST.Pages.quickTest.View || {}, 
AST.Pages.quickTest.View.Datagrid = function(c) {
    function getTag(rec) {
        return AST.Util.encodeHTML(AST.Util.parseTagFromHtml(rec.element, " "));
    }
    this.setModel((c = c || {}).model || new AST.Model()), c.columns = [ new AST.datagrid.Column({
        content: "Tag",
        attributes: {
            class: "tag"
        },
        renderer: getTag
    }), new AST.datagrid.Column({
        content: "Description",
        attributes: {
            class: "detail"
        },
        renderer: function(rec) {
            return "<span>" + AST.Util.encodeHTML(rec.element) + "</span>";
        }
    }), new AST.datagrid.Column({
        content: "Actions",
        attributes: {
            class: "actions"
        },
        renderer: function(rec) {
            var tagName = getTag(rec);
            return new AST.Element({
                tagName: "div",
                children: [ new AST.form.Button({
                    content: '<i class="fas fa-eye"></i><span class="a11y-offscreen-text">View ' + tagName + "</span>",
                    attributes: {
                        title: "View " + AST.Util.decodeHTML(tagName)
                    },
                    listeners: {
                        click: this.handleView.bind(this, rec)
                    }
                }) ]
            }).render();
        }.bind(this)
    }) ], AST.datagrid.Simple.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.quickTest.View.Datagrid.prototype, AST.datagrid.Simple.prototype, AST.hasDataModelMixin, {
    emptyText: "No violations found.",
    handleView: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("quicktestinstance", [ data, ev.currentTarget ]);
    }
}), AST.Pages.quickTest = AST.Pages.quickTest || {}, AST.Pages.quickTest.Instance = function(data, target) {
    this.initModel(data), this.initHighlighting(), this.setTarget(target);
}, $.extend(AST.Pages.quickTest.Instance.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.HighlightsMixin, {
    launch: function() {
        this.getModel().set("element", AST.Util.decodeHTML(this.getModel().get("element"))), 
        this.getModel().set("attribute", AST.Util.decodeHTML(this.getModel().get("attribute"))), 
        this.getModel().set("xpath", AST.Util.decodeHTML(this.getModel().get("xpath"))), 
        this.highlight("top", this.getModel().get("xpath"), AST.Util.encodeHTML(this.getModel().get("element"))), 
        this.modal = new AST.window.Modal({
            title: "Quick Test Result",
            height: 80,
            width: 80,
            target: this.getTarget(),
            attributes: {
                class: "bp-view"
            },
            buttons: [ this.getHighlightToggleButton() ],
            children: [ new AST.form.Button({
                attributes: {
                    class: "page-back-btn",
                    title: "Back"
                },
                listeners: {
                    click: this.handleBack.bind(this)
                },
                content: AST.Util.getBackButton("Back")
            }), new AST.Element({
                tagName: "h1",
                content: "Instance Details"
            }), new AST.form.DisplayText({
                label: "Description",
                labelPosition: "top",
                content: AST.Util.encodeHTML(this.getModel().get("element"))
            }), new AST.form.DisplayText({
                label: "Note",
                labelPosition: "top",
                content: this.getModel().get("attribute")
            }) ]
        }), this.modal.render();
    },
    handleBack: function(ev) {
        ev.preventDefault(), this.unhighlight(), this.modal.close();
    }
}), AST.Pages.quickTest = AST.Pages.quickTest || {}, AST.Pages.quickTest.Run = function() {
    this.initModel({
        records: {}
    });
}, $.extend(AST.Pages.quickTest.Run.prototype, AST.hasDataModelMixin, AST.postsMessagesMixin, AST.nodeCaptureMixin, {
    displayLoadingDialog: function() {
        this.loadingDialog = new AST.window.Modal({
            title: "Loading",
            height: 120,
            width: 300,
            children: [ new AST.Element({
                tagName: "h2",
                content: "Loading page information..."
            }) ]
        }), this.loadingDialog.render(!0);
    },
    handleCaptureResults: function(event) {
        try {
            var data, results;
            "NODE_CAPTURE" === event.data.result.type && (this.disconnectCaptureResultsListener(), 
            data = {
                records: {}
            }, results = event.data.result.results, $.each($.parseJSON(results), AST.Util.mapEngineResult.bind(this, data)), 
            this.getModel().set("records", data.records), this.popup.close(), AST.controller.fireEvent("quicktestresults", this.getModel().getData()));
        } catch (e) {}
    },
    launch: function() {
        try {
            this.displayLoadingDialog(), this.postPromise("page", {
                type: "DOCUMENT_INFO"
            }).then(function(response) {
                this.loadingDialog.close(), this.getModel().set("title", response.result.title), 
                this.getModel().set("url", response.result.location), this.display(!1);
            }.bind(this)).catch(function(error) {
                console.error(error);
            });
        } catch (err) {
            AST.logger.log(err);
        }
    },
    display: function() {
        this.popup = new AST.window.Popup({
            title: "Quick Test",
            width: 90,
            children: [ this.buildDocumentFormSection(), new AST.Element({
                tagName: "p",
                attributes: {
                    style: "text-align: center; margin: 1em 0; font-weight: bold"
                },
                content: "OR"
            }), this.buildNodeFormSection() ],
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Run"
                },
                listeners: {
                    click: this.handleRun.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleRun.bind(this)
            }
        }), this.popup.render();
    },
    buildDocumentFormSection: function() {
        return new AST.Element({
            tagName: "div",
            children: [ new AST.Element({
                tagName: "h2",
                content: "Run a Quick Test"
            }), new AST.Element({
                tagName: "fieldset",
                children: [ new AST.Element({
                    tagName: "legend",
                    content: "Test Entire Page"
                }), new AST.form.DisplayText({
                    label: "Page",
                    content: this.getModel().get("title")
                }), new AST.form.DisplayText({
                    label: "URL",
                    content: this.getModel().get("url")
                }), new AST.form.Checkbox({
                    label: "Test iframe Content",
                    model: this.getModel(),
                    modelProperty: "testIframes",
                    attributes: {
                        name: "testIframes",
                        value: "true"
                    },
                    initChecked: !1
                }) ]
            }) ]
        });
    },
    buildNodeFormSection: function() {
        var pathTextInput = new AST.form.Text({
            id: "path",
            label: "Path",
            model: this.getModel(),
            modelProperty: "path",
            attributes: {
                disabled: !0,
                "aria-readonly": !0
            }
        }), container = new AST.Element({
            tagName: "fieldset",
            children: [ new AST.Element({
                tagName: "legend",
                content: "Test a Node"
            }), new AST.form.DisplayText({
                label: "Select a Node",
                children: [ new AST.form.Button({
                    attributes: {
                        type: "button"
                    },
                    listeners: {
                        click: this.handleNodeCapture.bind(this),
                        keydown: this.handleNodeCaptureKeyboard.bind(this)
                    },
                    content: '<i class="fas fa-mouse-pointer"></i> Node Selector'
                }), new AST.form.Button({
                    attributes: {
                        type: "button"
                    },
                    listeners: {
                        click: this.handleNodeCaptureDOM.bind(this),
                        keydown: this.handleNodeCaptureKeyboard.bind(this)
                    },
                    content: '<i class="fas fa-code"></i> DOM Selector'
                }) ]
            }), pathTextInput ]
        });
        return AST.controller.addListener("nodecaptureselection", this.handleNodeCaptureSelection.bind(this, pathTextInput), this, pathTextInput.getEl()), 
        container;
    },
    handleRun: function(ev) {
        ev.preventDefault(), this.getSelectedNode() ? (this.connectCaptureResultsListener(), 
        this.postCommand("page", {
            type: "NODE_CAPTURE",
            frameId: this.getModel().get("moduleLocation"),
            uel: this.getModel().get("uel"),
            testTypes: [ AST.Util.TestTypes.AUTOMATIC, AST.Util.TestTypes.GUIDED_AUTOMATIC ]
        })) : this.postPromise("page", {
            type: "DOCUMENT_CAPTURE",
            testTypes: [ AST.Util.TestTypes.AUTOMATIC, AST.Util.TestTypes.GUIDED_AUTOMATIC ],
            testIframes: this.getModel().get("testIframes")
        }).then(function(response) {
            var data = {
                records: {}
            }, response = response.result.results;
            $.each($.parseJSON(response), AST.Util.mapEngineResult.bind(this, data)), 
            this.getModel().set("records", data.records), this.popup.close(), AST.controller.fireEvent("quicktestresults", this.getModel().getData());
        }.bind(this)).catch(function(error) {
            console.error(error);
        });
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.popup.close();
    }
}), AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.Delete = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.pattern.Delete.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault(), AST.controller.ajaxDelete(AST.Controller.WITH_TOKEN, "/api/assistant/reports/" + AST.Storage.get("activeReport", new AST.Model()).get("id") + "/pattern/" + this.getModel().data.id, {}, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("reloadpatternlist"), 
            AST.controller.fireEvent("reloadinstancelist");
        }.bind(this, el));
    },
    launch: function() {
        var deleteButton = new AST.form.Button({
            content: "Delete",
            attributes: {
                class: "red"
            }
        }), patternType = (deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        "1" === this.getModel().get("isGlobal") ? "Global" : "Pattern");
        new AST.window.Error({
            title: '<i class="fas fa-exclamation" data-fa-transform="shrink-6" data-fa-mask="fas fa-octagon"></i> Delete ' + patternType + ' "' + this.getModel().get("label") + '"?',
            height: 150,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "This action will delete the pattern and all testing data associated with it. Continue?"
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render();
    }
}), AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.emptyMember = {
    thumbnail: {},
    element: "",
    note: "",
    defect_id: "",
    defect_status: "new",
    defect_comments: ""
}, AST.Pages.pattern.Edit = function(data, target) {
    this.report = AST.Storage.get("activeReport", new AST.Model());
    var patternType = "1" === data.global ? "Global" : "Pattern";
    this.modalTitle = "Edit " + patternType, data.members = data.members || [], 
    0 === data.members.length && data.members.push(Object.assign({}, AST.Pages.pattern.emptyMember)), 
    data.name = AST.Util.decodeHTML(data.name), this.initModel(data), this.getModel().set("reportID", this.report.get("id")), 
    this.getModel().set("retain_instance", !1), this.getModel().setExternalMapperExport(function() {
        var filteredData = $.extend(!0, {}, this.getData());
        return filteredData.members.map(function(member) {
            return delete member.thumbnail, member;
        }), delete filteredData.modules, filteredData;
    }.bind(this.getModel())), this.getModel().setExternalMapperImport(function(data) {
        $.each(data, function(key, value) {
            "members" === key ? $.each(value, function(memberIndex, member) {
                $.each(member, function(attributeKey, attributeValue) {
                    this.set([ "members", memberIndex, attributeKey ].join("."), attributeValue);
                }.bind(this));
            }.bind(this)) : this.set(key, value);
        }.bind(this));
    }.bind(this.getModel())), this.getModel().initExternalListener("pattern"), this.setTarget(target);
}, $.extend(AST.Pages.pattern.Edit.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    copyFromInstance: !1,
    codeSnippet: [],
    thumbnail: [],
    handleSave: function(ev) {
        ev.preventDefault();
        var patternId, ev = AST.Pages.pattern.dataFormatters.formDataToRequestBody(this.getModel().getData());
        this.validate() && (patternId = this.getModel().get("patternID") ? this.getModel().get("patternID") : "", 
        AST.controller.ajaxPut(AST.Controller.WITH_TOKEN, "/api/assistant/reports/" + AST.Storage.get("activeReport", new AST.Model()).get("id") + "/pattern/" + patternId, ev, function(data, status, xhr) {
            "success" !== status ? alert("Error") : this.copyFromInstance && this.getModel().get("members.0.instance_id") && !this.getModel().get("retain_instance") ? this.deleteInstance() : (this.modal.close(), 
            AST.controller.fireEvent("reloadpatternlist"), AST.controller.fireEvent("reloadinstancelist"));
        }.bind(this), void 0, "PUT"));
    },
    deleteInstance: function() {
        var members = this.getModel().get("members");
        0 < members.length && members[0].instance_id ? (members = {
            instanceID: members[0].instance_id,
            reportID: AST.Storage.get("activeReport", new AST.Model()).get("id")
        }, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/delete", members, function() {
            this.modal.close(), AST.controller.fireEvent("reloadpatternlist"), AST.controller.fireEvent("reloadinstancelist");
        }.bind(this))) : (this.modal.close(), AST.controller.fireEvent("reloadpatternlist"), 
        AST.controller.fireEvent("reloadinstancelist"));
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("name")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Name is required"
        })), !$.isEmpty(this.getModel().get("members")[0].violation_id) && "0" !== this.getModel().get("members")[0].violation_id || errors.push(new AST.Element({
            tagName: "li",
            content: "Member (1) Violation is required"
        })), $.isEmpty(this.getModel().get("members")[0].element) && errors.push(new AST.Element({
            tagName: "li",
            content: "Member (1) Description is required"
        })), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && $.each(this.getModel().get("members"), function(index, member) {
            !$.isEmpty(member.thumbnail.data) && $.isEmpty(member.thumbnail.alt) && errors.push(new AST.Element({
                tagName: "li",
                content: "Member (" + (index + 1) + ") Thumbnail Alt Text is required"
            }));
        }), 0 === errors.length || (this.modal.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.modal.close(), AST.controller.fireEvent("reloadpatternlist");
    },
    launch: function() {
        this.renderPatternModal();
    },
    renderPatternModal: function() {
        if (this.modal = new AST.window.Modal({
            title: this.modalTitle,
            height: 90,
            width: 600,
            target: this.getTarget(),
            listeners: {
                submit: this.handleSave.bind(this)
            },
            children: [ new AST.form.DisplayText({
                label: "Asset",
                content: AST.Storage.get("activeAsset", new AST.Model()).get("name")
            }), new AST.form.DisplayText({
                label: "Report",
                content: this.report.get("name")
            }), new AST.form.Text({
                id: "name",
                label: "Name",
                model: this.getModel(),
                modelProperty: "name",
                attributes: {
                    required: "true"
                },
                required: !0
            }), this.getGlobalField(), this.getTabs() ],
            buttons: this.getButtons()
        }), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails")) for (var i = 0; i < this.getModel().get("members").length; i++) this.modal.addListener("inspectednode-" + this.codeSnippet[i].getId(), function(thumbnailField, params) {
            thumbnailField.handleInspectSelection(params.node, params.frameId);
        }.bind(this, this.thumbnail[i]));
        this.modal.render();
    },
    getButtons: function() {
        return [ new AST.form.Button({
            content: "Save",
            listeners: {
                click: this.handleSave.bind(this)
            }
        }), new AST.form.CancelButton({
            listeners: {
                click: this.handleCancel.bind(this)
            }
        }) ];
    },
    getGlobalField: function() {
        return AST.Pages.pattern.Edit.prototype.isPrototypeOf(this) ? new AST.form.DisplayText({
            label: "Type",
            content: "1" === this.getModel().get("global") ? "Global" : "Pattern"
        }) : new AST.form.RadioGroup({
            label: "Type",
            children: [ new AST.form.Radio({
                label: " Pattern",
                model: this.getModel(),
                modelProperty: "global",
                attributes: {
                    name: "pattern-type",
                    value: "0",
                    checked: "checked"
                }
            }), new AST.form.Radio({
                label: " Global",
                model: this.getModel(),
                modelProperty: "global",
                attributes: {
                    name: "pattern-type",
                    value: "1"
                }
            }) ]
        });
    },
    getTabs: function() {
        var tabPanel = new AST.tabs.Panel();
        return "1" !== this.getModel().get("global") && tabPanel.addChild(new AST.tabs.Tab({
            title: "Modules",
            children: [ this.getModuleList() ]
        })), tabPanel.addChild(new AST.tabs.Tab({
            title: "Members",
            children: [ this.getMembersPanel() ]
        })), tabPanel;
    },
    getModuleList: function() {
        return new AST.form.Fieldset({
            legend: "Module",
            children: [ new AST.Pages.pattern.Edit.ModulesDatagrid({
                model: this.getModel(),
                params: {
                    reportID: this.report.get("id"),
                    isWritable: !0
                }
            }) ]
        });
    },
    getMembersPanel: function() {
        var panel = new AST.Element({
            tagName: "div"
        });
        panel.setChildren([ new AST.PageActions({
            children: [ new AST.form.Button({
                content: '<i class="fas fa-plus-circle"></i><span class="a11y-offscreen-text">Add </span> Member',
                listeners: {
                    click: this.addMember.bind(this, panel)
                }
            }) ]
        }) ]);
        for (var i = 0; i < this.getModel().get("members").length; i++) panel.addChild(this.getMemberItem(i));
        return panel;
    },
    getMemberItem: function(index) {
        var violationDropdown = new AST.form.ComboBox({
            label: "Violation",
            model: this.getModel(),
            modelProperty: "members." + index + ".violation_id",
            dataUrl: "/api/assistant/bestpractices/list/mediaTypes",
            params: {
                reportID: this.report.get("id")
            },
            autoload: !0,
            optionKey: "violation_id",
            optionRenderer: function(data) {
                return data.short_description;
            },
            value: this.getModel().get("members." + index + ".violation_id") || "0",
            attributes: {
                style: "max-width: 500px;"
            },
            showPlaceholderOption: !1,
            disableNegativeOptions: !0
        }), violationDropdown = (this.decodeFormFieldHtml(index, "element"), this.decodeFormFieldHtml(index, "note"), 
        this.codeSnippet[index] = new AST.form.InspectTool({
            label: "Description",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "members." + index + ".element",
            required: !0
        }), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && (this.thumbnail[index] = new AST.form.Thumbnail({
            legend: "Thumbnail",
            model: this.getModel(),
            modelProperty: "members." + index + ".thumbnail"
        })), 0 === index && (violationDropdown.setRequired(!0), this.codeSnippet[index].setRequired(!0)), 
        [ violationDropdown, this.codeSnippet[index], new AST.form.TextArea({
            label: "Note",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "members." + index + ".note"
        }) ]);
        return !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && violationDropdown.push(this.thumbnail[index]), 
        violationDropdown.push(new AST.form.Select({
            id: "severity",
            labelPosition: "left",
            label: "Severity",
            dataUrl: "/api/severity/list",
            params: {
                reportID: this.report.get("id")
            },
            autoload: !0,
            optionKey: "value",
            optionRenderer: function(data) {
                return data.label;
            },
            model: this.getModel(),
            modelProperty: "members." + index + ".severity",
            value: this.getModel().get("members." + index + ".severity"),
            placeHolderOption: new AST.form.Option({
                attributes: {
                    value: -1
                },
                content: "Default"
            })
        }), this.getDefectFieldset(index)), new AST.form.Fieldset({
            legend: "Member (" + (index + 1) + ")",
            attributes: {
                class: "panel"
            },
            children: violationDropdown
        });
    },
    getDefectFieldset: function(index) {
        return new AST.form.Fieldset({
            legend: "Defect Details",
            children: [ new AST.form.Text({
                label: "Defect ID",
                model: this.getModel(),
                modelProperty: "members." + index + ".defect_id"
            }), new AST.form.Select({
                label: "Status",
                options: [ {
                    value: "new",
                    label: "New"
                }, {
                    value: "backlogged",
                    label: "Backlogged"
                }, {
                    value: "scheduled",
                    label: "Scheduled"
                }, {
                    value: "in_development",
                    label: "In Development"
                }, {
                    value: "needs_retesting",
                    label: "Needs Retesting"
                }, {
                    value: "in_qa",
                    label: "In QA"
                }, {
                    value: "failed_retesting",
                    label: "Failed Retesting"
                }, {
                    value: "fixed",
                    label: "Fixed"
                } ],
                autoload: !0,
                optionKey: "value",
                optionRenderer: function(data) {
                    return data.label;
                },
                model: this.getModel(),
                modelProperty: "members." + index + ".defect_status",
                value: this.getModel().get("members." + index + ".defect_status")
            }), new AST.form.TextArea({
                label: "Comments",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "members." + index + ".defect_comments"
            }) ]
        });
    },
    addMember: function(panel, ev) {
        ev.preventDefault(), this.getModel().get("members").push(Object.assign({}, AST.Pages.pattern.emptyMember));
        var ev = this.getModel().get("members").length - 1, newMember = this.getMemberItem(ev);
        newMember.setParent(panel), panel.getEl().appendChild(newMember.render()), 
        this.modal.addListener("inspectednode-" + this.codeSnippet[ev].getId(), function(thumbnailField, params) {
            thumbnailField.handleInspectSelection(params.node, params.frameId);
        }.bind(this, this.thumbnail[ev]));
    },
    decodeFormFieldHtml: function(memberIndex, field) {
        memberIndex = "members." + memberIndex + "." + field, field = this.getModel().get(memberIndex);
        field && this.getModel().set(memberIndex, AST.Util.decodeHTML(field));
    },
    handleInspect: function(index, ev) {
        ev.preventDefault(), AST.controller.addListener("nodecaptureselection", this.handleInspectSelection.bind(this, index), this, void 0, !0), 
        new AST.NodeCapture({
            filters: this._availableFilters,
            target: ev.currentTarget
        }).launch();
    },
    handleInspectKeyboard: function(index, ev) {
        ev.keyCode === AST.Util.KeyCodes.ENTER && (ev.preventDefault(), AST.controller.addListener("nodecaptureselection", this.handleInspectSelection.bind(this, index), this, void 0, !0), 
        new AST.NodeCapture({
            target: ev.currentTarget
        }).keyboardLaunch());
    },
    handleInspectSelection: function(index, node, frameId) {
        this.getModel().set("members." + index + ".element", node[0].outerHTML), 
        AST.Util.maskBody(), this.modal.addFocusTrap();
    }
}), AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.Edit = AST.Pages.pattern.Edit || {}, 
AST.Pages.pattern.Edit.ModulesDatagrid = function(c) {
    this.setModel(c.model || new AST.Model()), c.dataUrl = "/api/assistant/modules/list", 
    c.autoload = c.autoload || !0, c.renderer = function(rec) {
        return new AST.form.Checkbox({
            label: rec.moduleName,
            model: this.getModel(),
            modelProperty: "modules." + rec.id,
            attributes: {
                name: "modules.id",
                value: rec.id
            },
            initChecked: this.getModel().get("modules." + rec.id)
        }).render();
    }.bind(this), AST.list.Unordered.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.pattern.Edit.ModulesDatagrid.prototype, AST.list.Unordered.prototype, AST.hasDataModelMixin, {}), 
AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.New = function(data, target) {
    data.members = data.members || [ {} ], AST.Pages.pattern.Edit.prototype.constructor.call(this, data, target), 
    this.modalTitle = "Create New Pattern";
}, $.extend(AST.Pages.pattern.New.prototype, AST.Pages.pattern.Edit.prototype, {
    launch: function() {
        var requestBody = {
            reportID: this.report.get("id"),
            isWritable: !0
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/modules/list", requestBody, function(data, status, xhr) {
            "success" !== status ? alert("Error") : 25 < parseInt(data.recordsTotal) ? this.renderTooManyModulesModal() : this.renderPatternModal();
        }.bind(this), void 0, "POST");
    },
    getButtons: function() {
        var buttons = [ new AST.form.Button({
            content: "Save",
            listeners: {
                click: this.handleSave.bind(this)
            }
        }), new AST.form.CancelButton({
            listeners: {
                click: this.handleCancel.bind(this)
            }
        }) ], members = this.getModel().get("members");
        return 0 < members.length && members[0].instance_id && buttons.unshift(new AST.form.Checkbox({
            label: "Retain Original Violation Instance",
            model: this.getModel(),
            modelProperty: "retain_instance",
            attributes: {
                name: "retain_instance",
                value: "true"
            },
            initChecked: !1
        }), new AST.Element({
            tagName: "div",
            attributes: {
                class: "flex-space"
            }
        })), buttons;
    },
    renderTooManyModulesModal: function() {
        this.modal = new AST.window.Warning({
            title: '<i class="fas fa-exclamation-triangle"></i> Too Many Modules in Report',
            height: 170,
            width: 360,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "Pattern Creation in Access Assistant is limited to reports with 25 or fewer modules. If you would like to create patterns for this report you can do so in AMP"
            }) ],
            buttons: [ new AST.form.CancelButton({
                content: "Ok",
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }), this.modal.render();
    }
}), AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.Unlink = function(data, target) {
    data.pattern.modules = data.pattern.modules.filter(function(module) {
        return module.module_id !== data.moduleID;
    }), this.initModel(data.pattern), this.setTarget(target);
}, $.extend(AST.Pages.pattern.Unlink.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault();
        var ev = AST.Pages.pattern.dataFormatters.dataToUnlinkData(this.getModel().getData()), patternId = this.getModel().get("id") ? this.getModel().get("id") : "";
        AST.controller.ajaxPut(AST.Controller.WITH_TOKEN, "/api/assistant/reports/" + AST.Storage.get("activeReport", new AST.Model()).get("id") + "/pattern/" + patternId, ev, function(data, status, xhr) {
            "success" !== status ? alert("Error") : (el.bubbleEvent("closewindow"), 
            AST.controller.fireEvent("reloadpatternlist"), AST.controller.fireEvent("reloadinstancelist"));
        }.bind(this), void 0, "PUT");
    },
    launch: function() {
        var unlinkButton = new AST.form.Button({
            content: "Unlink"
        }), patternType = (unlinkButton.addListener("click", this.handleDelete.bind(this, unlinkButton)), 
        "1" === this.getModel().get("isGlobal") ? "Global" : "Pattern");
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Unlink ' + patternType + ' "' + this.getModel().get("label") + '"?',
            height: 150,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "This action will unlink the pattern from this module only. Continue?"
            }) ],
            buttons: [ unlinkButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render();
    }
}), AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.View = function(data, target) {
    this.modalTitle = "View Pattern", this.report = AST.Storage.get("activeReport", new AST.Model()), 
    this.patternId = parseInt(data.pattern_id), this.setTarget(target);
}, $.extend(AST.Pages.pattern.View.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    launch: function() {
        AST.controller.ajaxGet(!0, "/api/assistant/reports/" + this.report.get("id") + "/pattern/" + this.patternId, {}, this.draw.bind(this));
    },
    draw: function(data) {
        this.initModel(data.result), this.modal = new AST.window.Popup({
            title: this.modalTitle,
            height: 90,
            width: 600,
            target: this.getTarget(),
            children: [ new AST.form.DisplayText({
                label: "Asset",
                content: AST.Storage.get("activeAsset", new AST.Model()).get("name")
            }), new AST.form.DisplayText({
                label: "Report",
                content: this.report.get("name")
            }), new AST.form.DisplayText({
                label: "Name",
                content: this.getModel().get("label")
            }), new AST.form.DisplayText({
                label: "Type",
                content: this.getModel().get("global") ? "Global" : "Pattern"
            }), this.getTabs() ]
        }), this.modal.render();
    },
    getTabs: function() {
        return new AST.tabs.Panel({
            children: [ new AST.tabs.Tab({
                title: "Modules",
                children: [ this.getModuleList() ]
            }), new AST.tabs.Tab({
                title: "Members",
                children: [ this.getMembersPanel() ]
            }) ]
        });
    },
    getModuleList: function() {
        return new AST.Pages.pattern.View.ModulesDatagrid({
            model: this.getModel(),
            params: {
                reportID: this.report.get("id"),
                isWritable: !0
            }
        });
    },
    getMembersPanel: function() {
        var panel = new AST.Element({
            tagName: "div"
        });
        0 === this.getModel().get("members").length && this.getModel().set("members", [ {} ]);
        for (var i = 0; i < this.getModel().get("members").length; i++) panel.addChild(this.getMemberItem(i, this.getModel().get("members")[i]));
        return panel;
    },
    getMemberItem: function(index, child) {
        return new AST.form.Fieldset({
            legend: "Member (" + (index + 1) + ")",
            children: [ new AST.form.DisplayText({
                label: "Violation",
                content: child.bp_name
            }), new AST.form.DisplayText({
                label: "Description",
                content: AST.Util.encodeHTML(child.element)
            }), new AST.form.DisplayText({
                label: "Note",
                content: child.note
            }), new AST.form.Thumbnail({
                legend: "Thumbnail",
                model: this.getModel(),
                modelProperty: "members." + index + ".thumbnail",
                readOnly: !0,
                attributes: {
                    class: "large"
                }
            }), new AST.form.DisplayText({
                label: "Severity",
                content: child.severity_label
            }), this.getDefectFieldset(child) ]
        });
    },
    getDefectFieldset: function(child) {
        var status = {
            new: "New",
            backlogged: "Backlogged",
            scheduled: "Scheduled",
            in_development: "In Development",
            needs_retesting: "Needs Retesting",
            in_qa: "In QA",
            failed_retesting: "Failed Retesting",
            fixed: "Fixed"
        }[child.defect_status];
        return new AST.form.Fieldset({
            legend: "Defect Details",
            children: [ new AST.form.DisplayText({
                label: "Defect ID",
                content: child.defect_id
            }), new AST.form.DisplayText({
                label: "Status",
                content: status
            }), new AST.form.DisplayText({
                label: "Comments",
                content: child.defect_comments
            }) ]
        });
    }
}), AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.View = AST.Pages.pattern.View || {}, 
AST.Pages.pattern.View.ModulesDatagrid = function(c) {
    this.setModel(c.model || new AST.Model()), c.columns = [ new AST.datagrid.Column({
        content: "Module",
        dataIndex: "name"
    }) ], c.records = this.getModel().get("modules"), AST.datagrid.Simple.prototype.constructor.call(this, c);
}, $.extend(AST.Pages.pattern.View.ModulesDatagrid.prototype, AST.datagrid.Simple.prototype, AST.hasDataModelMixin, {}), 
AST.Pages.permissions = AST.Pages.permissions || {}, AST.Pages.permissions.Manage = function(c) {
    this.initModel((c = c || {}).data || {}), this.setTarget(c.target);
}, $.extend(AST.Pages.permissions.Manage.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    launch: function() {
        this.modal = new AST.window.Popup({
            title: '<i class="fas fa-key fa-fw"></i> Manage Permissions',
            height: 480,
            width: 80,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                attributes: {
                    class: "instructions"
                },
                content: "You have allowed Access Assistant to have access to the domains listed below. You can revoke access to individual domains or revoke access to all domains.  Access Assistant will always have access to the active tab."
            }), this.getDomainList() ],
            buttons: [ new AST.form.Button({
                content: "Revoke All",
                listeners: {
                    click: this.revokeAllConfirmation.bind(this)
                }
            }) ]
        }), this.modal.render(), this.reload();
    },
    reload: function() {
        AST.permissions.getAllOrigins(this.loadOrigins.bind(this));
    },
    loadOrigins: function(origins) {
        for (var domains = [ {
            domain: "Active Tab",
            revocable: !1
        } ], i = 0; i < origins.length; i++) {
            var origin = origins[i];
            domains.push({
                domain: origin,
                revocable: !0
            });
        }
        this.getDomainList().setRecords(domains), this.getDomainList().load();
    },
    getDomainList: function() {
        return this.domainList || (this.domainList = new AST.datagrid.Simple({
            columns: [ new AST.datagrid.Column({
                dataIndex: "domain",
                content: "Domain",
                attributes: {
                    class: "width-90"
                },
                renderer: function(rec) {
                    return AST.Util.encodeHTML(rec.domain);
                }
            }), new AST.datagrid.Column({
                content: "Access",
                renderer: function(rec) {
                    return rec.revocable ? new AST.form.Button({
                        listeners: {
                            click: this.revokeConfirmation.bind(this, rec.domain)
                        },
                        content: 'Revoke <span class="a11y-offscreen-text">: ' + rec.domain + "</span>"
                    }).render() : "Mandatory";
                }.bind(this)
            }) ],
            pagination: {
                enabled: !1
            }
        })), this.domainList;
    },
    revokeConfirmation: function(domain, ev) {
        ev.preventDefault();
        ev = new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Revoke Domain?',
            height: 170,
            width: 360,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: 'Are you sure you want to revoke access to "<em>' + AST.Util.encodeHTML(domain) + '</em>"?'
            }) ]
        });
        ev.setButtons([ new AST.form.Button({
            content: "Revoke",
            listeners: {
                click: this.handleRevoke.bind(this, ev, domain)
            }
        }), new AST.form.CancelButton({
            listeners: {
                click: function(confirm, ev) {
                    ev.preventDefault(), confirm.close();
                }.bind(this, ev)
            }
        }) ]), ev.render();
    },
    handleRevoke: function(confirm, domain, ev) {
        ev.preventDefault(), AST.permissions.removeOrigins(domain, this.reload.bind(this)), 
        confirm.close();
    },
    revokeAllConfirmation: function(ev) {
        ev.preventDefault();
        ev = new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Revoke All Domains?',
            height: 170,
            width: 360,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: 'Are you sure you want to revoke access to "<em>all domains</em>"?'
            }) ]
        });
        ev.setButtons([ new AST.form.Button({
            content: "Revoke",
            listeners: {
                click: this.handleRevokeAll.bind(this, ev)
            }
        }), new AST.form.CancelButton({
            listeners: {
                click: function(confirm, ev) {
                    ev.preventDefault(), confirm.close();
                }.bind(this, ev)
            }
        }) ]), ev.render();
    },
    handleRevokeAll: function(confirm, ev) {
        ev.preventDefault(), AST.permissions.getAllOrigins(function(origins) {
            AST.permissions.removeOrigins(origins, this.reload.bind(this));
        }.bind(this)), confirm.close();
    }
}), AST.Permissions = function() {}, $.extend(AST.Permissions.prototype, AST.postsMessagesMixin, {
    initialize: function() {
        AST.Util.isChrome() && (AST.controller.addListener("PERMISSIONS", this.showRequestModal, this), 
        AST.controller.addListener("HIDE_PERMISSIONS", this.closeRequestModal, this));
    },
    _originsToArray: function(origin) {
        return origin = Array.isArray(origin) ? origin : [ origin ];
    },
    _buildPermissionsObject: function(origins) {
        return {
            origins: origins = this._originsToArray(origins)
        };
    },
    getAllOrigins: function(callback) {
        browserAPI.permissions.getAll(function(permissions) {
            callback(permissions.origins);
        });
    },
    containsOrigin: function(origin, callback) {
        browserAPI.permissions.contains(this._buildPermissionsObject(origin), function(contains) {
            callback(contains);
        });
    },
    requestOrigins: function(origins, callback) {
        browserAPI.permissions.request(this._buildPermissionsObject(origins), function(granted) {
            callback(granted);
        });
    },
    removeOrigins: function(origins, callback) {
        browserAPI.permissions.remove(this._buildPermissionsObject(origins), function(removed) {
            callback(removed);
        });
    },
    requestModal: null,
    showRequestModal: function(payload, callback) {
        this.requestModal && this.requestModal.close(), "function" != typeof callback && (callback = function() {
            this.postCommand("background", {
                type: "RELOAD"
            });
        }.bind(this));
        var buttons = [], requestType = (payload.result.permissions && buttons.push(new AST.form.Button({
            content: "Allow Access",
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), browserAPI.permissions.request(payload.result.permissions, function(granted) {
                        granted ? (callback(), this.closeRequestModal(), AST.controller.fireEvent("HIDE_PERMISSIONS")) : AST.permissions.showRequestModal(payload, callback);
                    }.bind(this));
                }.bind(this)
            }
        })), "test the active page:"), children = ("selecthost" === payload.result.source && (requestType = "connect to the AMP instance:"), 
        "iframes" === payload.result.source && (requestType = "test the following <strong>iframes</strong> on the active page:"), 
        []);
        payload.result.permissions && 0 < payload.result.permissions.origins.length && children.push(new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: "Assistant does not have the required permissions to " + requestType
        }), new AST.list.Unordered({
            records: payload.result.permissions.origins,
            renderer: function(rec) {
                return rec;
            }
        })), children.push(new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: 'To allow access, activate the button below and then choose "Allow" on the permission popup.'
        })), this.requestModal = new AST.window.Warning({
            title: '<i class="fas fa-exclamation-triangle"></i> Permission Required',
            width: 360,
            modal: !0,
            children: children,
            buttons: buttons
        }), this.requestModal.render(), AST.controller.addListener("HIDE_PERMISSIONS", this.requestModal.close, this.requestModal, this.requestModal.getEl(), !0);
    },
    closeRequestModal: function() {
        this.requestModal && this.requestModal.close();
    }
}), AST.permissions = new AST.Permissions(), AST.permissions.initialize(), AST.Pages.alchemy = AST.Pages.alchemy || {}, 
AST.Pages.alchemy.handlers = {
    handleList: function() {
        new AST.Pages.alchemy.List().launch();
    },
    handleEdit: function(data, target) {
        new AST.Pages.alchemy.Edit(data, target).launch();
    }
}, AST.controller.addListener("alchemylist", AST.Pages.alchemy.handlers.handleList), 
AST.controller.addListener("alchemyedit", AST.Pages.alchemy.handlers.handleEdit), 
AST.Pages.alchemy = AST.Pages.alchemy || {}, AST.Pages.alchemy.Edit = function(data, target) {
    this.initModel(data), this.initHighlighting(), this.setTarget(target), this.getModel().set("projectID", AST.Storage.get("activeAsset", new AST.Model()).get("projectID")), 
    this.fixTemplates = {}, this.fixModels = {};
}, $.extend(AST.Pages.alchemy.Edit.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.HighlightsMixin, {
    handleSave: function(ev) {
        ev.preventDefault();
        var closeCallback = function(data, status, xhr) {
            this.modal.close(), AST.controller.fireEvent("alchemylist");
        }.bind(this);
        $.each(this.fixModels, function(engTestId, model) {
            var sendData, fixID;
            this.compareFixes(this.fixTemplates[engTestId], model.getData()) && model.get("fixID") ? (sendData = {
                projectID: this.getModel().get("projectID"),
                fixID: model.get("fixID")
            }, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/fixes/delete", sendData, closeCallback, closeCallback)) : this.compareFixes(this.fixTemplates[engTestId], model.getData()) && !model.isDirty() || (sendData = model.getData(), 
            fixID = model.get("fixID"), model = model.get("fixType"), delete sendData.fixID, 
            delete sendData.fixType, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/fixes/save", {
                projectID: this.getModel().get("projectID"),
                fingerprintID: this.getModel().get("id"),
                engineTestID: engTestId,
                fixType: model,
                fix: sendData,
                fixID: fixID
            }, closeCallback, closeCallback));
        }.bind(this));
    },
    saveFix: function(data) {
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/fixes/save", data, function(data, status, xhr) {});
    },
    compareFixes: function(template, fix) {
        for (var attribute in template) if (template.hasOwnProperty(attribute)) {
            if (!fix.hasOwnProperty(attribute)) return !1;
            if (null === template[attribute] && void 0 !== fix[attribute] && null !== fix[attribute] && 0 < fix[attribute].length && template[attribute] !== fix[attribute]) return !1;
        }
        return !0;
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.modal.close();
    },
    launch: function() {
        this.loadFingerprintInstances();
    },
    loadFingerprintInstances: function() {
        var sendData = this.getData();
        sendData.fingerprintID = sendData.id, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/fingerprint/instances", sendData, function(data, status, xhr) {
            "success" !== status ? alert("Error") : (this.instances = data.result, 
            this.loadFingerprintFixes());
        }.bind(this));
    },
    loadFingerprintFixes: function() {
        var sendData = this.getData();
        sendData.fingerprintID = sendData.id, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/fixes/list", sendData, function(data, status, xhr) {
            "success" !== status ? alert("Error") : ($.each(data.result, function(i, fixData) {
                var model = new AST.Model(fixData.fix);
                model.set("fixID", fixData.fixID), this.fixModels[parseInt(fixData.engineTestID)] = model;
            }.bind(this)), this.drawModal());
        }.bind(this));
    },
    drawModal: function() {
        $.each(this.instances, function(i, data) {
            return exampleBP = data, !1;
        });
        var exampleBP, fingerprintElements = [];
        this.getModel().get("fingerprint.css") && fingerprintElements.push(new AST.form.DisplayText({
            label: "CSS Selector",
            content: this.getModel().get("fingerprint.css")
        })), this.getModel().get("fingerprint.attNo") && fingerprintElements.push(new AST.form.DisplayText({
            label: "Attribute Count",
            content: this.getModel().get("fingerprint.attNo")
        })), this.getModel().get("fingerprint.url") && fingerprintElements.push(new AST.form.DisplayText({
            label: "URL",
            content: this.getModel().get("fingerprint.url")
        })), this.modal = new AST.window.Modal({
            title: "Fix Fingerprint",
            height: 80,
            width: 80,
            target: this.getTarget(),
            attributes: {
                class: "alchemy-fix-modal"
            },
            listeners: {
                submit: this.handleSave.bind(this)
            },
            children: [ new AST.Element({
                tagName: "h1",
                content: "Edit Fix"
            }), new AST.form.DisplayText({
                label: "Fix Status",
                content: (1 === parseInt(this.getModel().get("hasFix")) ? "" : "Not ") + "Defined"
            }), new AST.form.Fieldset({
                legend: "Fingerprint",
                children: fingerprintElements
            }), new AST.tabs.Panel({
                children: [ new AST.tabs.Tab({
                    title: "Applicable Fixes",
                    children: [ new AST.Element({
                        tagName: "ul",
                        attributes: {
                            class: "fixes"
                        },
                        children: this.getFixSection()
                    }) ]
                }), new AST.tabs.Tab({
                    title: "Known Instances",
                    children: [ new AST.Element({
                        tagName: "p",
                        attributes: {
                            class: "instructions"
                        },
                        content: "Access Assistant only knows of instances of violations and fingerprints that have been discovered by testing modules. The known instances of this fingerprint are displayed here. Note that instances of the fingerprint may appear on pages that have not been tested. These instances will still be fixed by Alchemy when the page is visited by a user, but those instances are not included in this list."
                    }), new AST.Element({
                        tagName: "ul",
                        attributes: {
                            class: "examples"
                        },
                        children: this._getExamples(exampleBP)
                    }) ]
                }) ]
            }) ],
            buttons: [ new AST.form.Button({
                content: "Save",
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ]
        }), AST.controller.addListener("windowclose", function(id) {
            id === this.modal.getId() && this.unhighlight();
        }.bind(this), this, this.modal.getEl()), this.modal.render();
    },
    getFixSection: function() {
        var bpContainers = [];
        return $.each(this.instances, this._renderBP.bind(this, bpContainers)), 
        bpContainers;
    },
    _renderBP: function(containers, i, data) {
        var legend = new AST.Element({
            tagName: "a",
            attributes: {
                href: "#"
            },
            listeners: {
                click: this.handleViewBP.bind(this, data)
            },
            content: data.name
        }), legend = new AST.Element({
            tagName: "li",
            children: [ new AST.form.Fieldset({
                legend: legend.render(),
                children: this._getFixes(data)
            }) ]
        });
        containers.push(legend);
    },
    _getExamples: function(data) {
        for (var examples = [], i = 0; i < data.instances.length; i++) {
            var clickable = new AST.Element({
                tagName: "p",
                content: data.instances[i].module_location
            }), location = data.instances[i].module_location;
            (-1 < location.toLowerCase().indexOf("http://") || -1 < location.toLowerCase().indexOf("https://") || -1 < location.toLowerCase().indexOf("file://")) && (location = location.substring(location.indexOf("://") + 3), 
            AST.Util.isValidUrl(location) && (clickable = new AST.Element({
                tagName: "a",
                attributes: {
                    href: "#"
                },
                listeners: {
                    click: this.highlight.bind(this, data.instances[i].module_location, data.instances[i].xpath)
                },
                content: data.instances[i].module_location
            }))), examples.push(new AST.Element({
                tagName: "li",
                children: [ clickable, new AST.Element({
                    tagName: "code",
                    attributes: {
                        class: "formatted"
                    },
                    content: data.instances[i].element
                }) ]
            }));
        }
        return examples;
    },
    _getFixes: function(data) {
        var fixInterfaces = [];
        return $.each(data.tests, function(i, testData) {
            try {
                var type, engTestId = testData.engine_test_id, test = window.LevelAccess_AccessEngine.ast_getTestById(engTestId);
                this.fixTemplates[engTestId] = test.fixType.fix, void 0 === this.fixModels[engTestId] && (this.fixModels[engTestId] = new AST.Model(test.fixType.fix)), 
                this.fixModels[engTestId].set("fixType", test.fixType.fixType), 
                null !== test.fixType.fix && (type = AST.alchemy.getFixTypeDescription(test.fixType.fixType), 
                fixInterfaces.push(new AST.Element({
                    tagName: "div",
                    children: [ new AST.form.DisplayText({
                        label: "Failed Test",
                        labelPosition: "top",
                        content: test.metaText
                    }), new AST.form.DisplayText({
                        label: "Fix Type",
                        labelPosition: "top",
                        content: type
                    }), new AST.form.DisplayText({
                        label: "instructions",
                        labelPosition: "top",
                        content: test.fixType.helperText
                    }), new AST.Element({
                        tagName: "hr"
                    }), AST.alchemy.fixes.Factory.create(new AST.alchemy.Fix({
                        type: test.fixType.fixType,
                        fix: test.fixType.fix
                    }), this.fixModels[engTestId]) ]
                })));
            } catch (e) {}
        }.bind(this)), fixInterfaces;
    },
    handleViewBP: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("bpview", [ data, ev.target ]);
    }
}), AST.Pages.alchemy = AST.Pages.alchemy || {}, AST.Pages.alchemy.List = function() {}, 
$.extend(AST.Pages.alchemy.List.prototype, {
    handleEdit: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("alchemyedit", [ data, ev.currentTarget ]);
    },
    launch: function() {
        var columns = [ new AST.datagrid.Column({
            content: "Fingerprint",
            renderer: function(rec) {
                return null === rec.fingerprint || void 0 === rec.fingerprint ? "" : rec.fingerprint.css ? "CSS: " + rec.fingerprint.css : rec.fingerprint.url ? "URL: " + rec.fingerprint.url : "";
            }.bind(this)
        }), new AST.datagrid.Column({
            content: "Fix<br/>Status",
            renderer: function(rec) {
                return 1 === parseInt(rec.hasFix) ? "Defined" : "Not Defined";
            }.bind(this)
        }), new AST.datagrid.Column({
            dataIndex: "instanceCount",
            children: [ new AST.Element({
                tagName: "span",
                content: "Known<br/>Instances"
            }), new AST.Element({
                tagName: "span",
                content: '&nbsp;<i class="fas fa-info-circle"></i>',
                attributes: {
                    title: "Access Assistant only knows of instances of violations and fingerprints that have been discovered by testing modules. The total number of known instances of the fingerprint is displayed in this column. Note that instances of the fingerprint may appear on pages that have not been tested. These instances will still be fixed by Alchemy when the page is visited by a user, but those instances will not be included in this count."
                }
            }) ]
        }) ], reqPerms = [ AST.Login.permissions.STANDARD_USER, AST.Login.permissions.ORGANIZATION_ADMINISTRATOR, AST.Login.permissions.SYSTEM_ADMINISTRATOR, AST.Login.permissions.ROOT_ADMINISTRATOR ], reqPerms = (AST.Login.hasPermission(reqPerms) && columns.push(new AST.datagrid.Column({
            content: "Actions",
            attributes: {
                class: "actions"
            },
            renderer: function(rec) {
                return new AST.Element({
                    tagName: "div",
                    children: [ new AST.form.Button({
                        listeners: {
                            click: this.handleEdit.bind(this, rec)
                        },
                        attributes: {
                            title: "Edit"
                        },
                        content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + rec.name + "</span>"
                    }) ]
                }).render();
            }.bind(this)
        })), new AST.datagrid.Simple({
            attributes: {
                class: "fixes"
            },
            columns: columns,
            dataUrl: "/api/assistant/fingerprint/list",
            autoload: !0,
            params: {
                projectID: AST.Storage.get("activeAsset", new AST.Model()).get("projectID")
            },
            dataMapping: function(data) {
                return data;
            },
            pagination: {
                enabled: !0,
                pageLength: 25
            }
        })), columns = (AST.controller.addListener("reloadalchemylist", reqPerms.load, reqPerms, reqPerms.getEl()), 
        new AST.Element({
            tagName: "section",
            attributes: {
                class: "home-screen"
            },
            children: [ new AST.form.Button({
                attributes: {
                    class: "page-back-btn",
                    title: "Back"
                },
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), AST.controller.fireEvent("assetview", AST.Storage.get("activeAsset", new AST.Model()).getData());
                    }
                },
                content: AST.Util.getBackButton("Back")
            }), new AST.Element({
                tagName: "h1",
                content: '<i class="fad fa-flask"></i> Alchemy Fixes for ' + AST.Storage.get("activeAsset", new AST.Model()).get("name")
            }), new AST.Element({
                tagName: "p",
                attributes: {
                    class: "instructions"
                },
                content: 'Alchemy allows organizations to apply accessibility fixes as an overlay to accessibility issues found on their web properties. An element that can be fixed by Alchemy is called a "fingerprint." Fingerprints uniquely identify an element that may appear one or more times on one or more pages within a site. Review each of the fingerprints below and specify the content that should be used to fix the accessibility issue anywhere that element appears on your site. When a user visits a page that contains an instance of one of the elements below, the specified fix will be applied.'
            }), new AST.Element({
                tagName: "h2",
                attributes: {
                    style: "margin: 1em 0 .5em"
                },
                content: "Fingerprints"
            }), new AST.Element({
                tagName: "p",
                attributes: {
                    class: "instructions"
                },
                content: "Review each of the fingerprints below and provide the requested content required to apply a fix."
            }), reqPerms ]
        }));
        AST.controller.renderPage(columns, "Alchemy Fixes");
    }
}), AST.Asset = AST.Asset || {}, AST.Asset.handlers = {
    handleList: function(data) {
        new AST.Asset.List(data).launch();
    },
    handleNew: function() {
        new AST.Asset.New({}).launch();
    },
    handleEdit: function(data) {
        new AST.Asset.Edit(data).launch();
    },
    handleDelete: function(data) {
        new AST.Asset.Delete(data).launch();
    },
    handleView: function(data) {
        new AST.Asset.View(data).launch();
    }
}, AST.controller.addListener("homelaunch", AST.Asset.handlers.handleList), AST.controller.addListener("assetlist", AST.Asset.handlers.handleList), 
AST.controller.addListener("assetedit", AST.Asset.handlers.handleEdit), AST.controller.addListener("assetnew", AST.Asset.handlers.handleNew), 
AST.controller.addListener("assetview", AST.Asset.handlers.handleView), AST.Asset = AST.Asset || {}, 
AST.Asset.Edit = function(data) {
    this.initModel(data);
}, $.extend(AST.Asset.Edit.prototype, AST.hasDataModelMixin, {
    handleSave: function(ev) {
        ev.preventDefault(), this.validate() && AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/projects/edit", this.getData(), function() {
            AST.controller.fireEvent("homelaunch");
        });
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("name")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Asset Name is required"
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("homelaunch");
    },
    launch: function() {
        this.getModel().set("name", AST.Util.decodeHTML(this.getModel().getData().name));
        var reqPerms, fields = [ new AST.Element({
            tagName: "h1",
            content: "Edit Asset: " + this.getModel().get("name")
        }), new AST.form.Text({
            id: "name",
            label: "Asset Name",
            model: this.getModel(),
            modelProperty: "name",
            required: !0
        }) ];
        AST.controller.isFeatureEnabled("assetTypes") && fields.push(new AST.form.Select({
            label: "Type",
            options: [ {
                id: AST.Util.AssetTypes.PRODUCTION,
                value: AST.Util.AssetTypes.PRODUCTION
            }, {
                id: AST.Util.AssetTypes.SANDBOX,
                value: AST.Util.AssetTypes.SANDBOX
            } ],
            optionKey: "id",
            optionRenderer: function(data) {
                return data.value;
            },
            showPlaceholderOption: !1,
            model: this.getModel(),
            modelProperty: "type",
            required: !0
        })), AST.controller.isFeatureEnabled("suppressSensitiveData") && (reqPerms = [ AST.Login.permissions.ORGANIZATION_ADMINISTRATOR, AST.Login.permissions.SYSTEM_ADMINISTRATOR, AST.Login.permissions.ROOT_ADMINISTRATOR ], 
        AST.Login.hasPermission(reqPerms) && fields.push(new AST.form.Checkbox({
            label: "Suppress Sensitive Data",
            model: this.getModel(),
            modelProperty: "suppressSensitiveData",
            labelPosition: "left",
            attributes: {
                name: "suppress_sensitive_data",
                value: "true"
            },
            initChecked: this.getModel().get("suppressSensitiveData")
        }))), this.form = new AST.form.Form({
            children: fields,
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Save"
                },
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this)
            }
        }), AST.controller.renderPage(this.form, "Edit Asset");
    }
}), AST.Asset = AST.Asset || {}, AST.Asset.List = function() {
    AST.Storage.set("last-data", {
        action: null,
        data: {}
    }), AST.controller.notifyCompanionExtension(null, {});
}, $.extend(AST.Asset.List.prototype, {
    handleNew: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("assetnew");
    },
    handleEdit: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("assetedit", data);
    },
    handleViewAsset: function(data, ev) {
        ev.preventDefault(), AST.controller.fireEvent("assetview", data);
    },
    launch: function() {
        var children = [ new AST.Element({
            tagName: "h1",
            content: "Assets"
        }) ], reqPerms = [ AST.Login.permissions.STANDARD_USER, AST.Login.permissions.ORGANIZATION_ADMINISTRATOR, AST.Login.permissions.SYSTEM_ADMINISTRATOR, AST.Login.permissions.ROOT_ADMINISTRATOR ], actions = [], columns = (AST.Login.hasPermission(reqPerms) && actions.push(new AST.form.Button({
            listeners: {
                click: this.handleNew.bind(this)
            },
            content: '<i class="fas fa-plus-circle"></i> <span class="a11y-offscreen-text">Create New </span>  Asset'
        })), actions.push(new AST.search.Search({
            id: "asset-list-search",
            placeholder: " Search Assets"
        })), [ new AST.datagrid.Column({
            dataIndex: "projectName",
            content: "Asset",
            renderer: function(rec) {
                return new AST.Element({
                    tagName: "a",
                    attributes: {
                        href: "#"
                    },
                    listeners: {
                        click: this.handleViewAsset.bind(this, rec)
                    },
                    content: rec.name
                }).render();
            }.bind(this)
        }), new AST.datagrid.Column({
            dataIndex: "organization_name",
            content: "Organization"
        }), new AST.datagrid.Column({
            dataIndex: "type",
            content: "Type",
            renderer: function(rec) {
                return rec.type && 0 < rec.type.length ? rec.type : AST.Util.AssetTypes.PRODUCTION;
            }
        }), new AST.datagrid.Column({
            content: "Actions",
            attributes: {
                class: "actions"
            },
            renderer: function(rec) {
                return rec.isWritable && "0" !== rec.isWritable ? new AST.form.Button({
                    listeners: {
                        click: this.handleEdit.bind(this, rec)
                    },
                    attributes: {
                        title: "Edit"
                    },
                    content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + rec.name + " asset </span>"
                }).render() : "&nbsp;";
            }.bind(this)
        }) ]), reqPerms = new AST.datagrid.Simple({
            columns: columns,
            dataUrl: "/api/assistant/projects/list",
            autoload: !0,
            actions: actions,
            dataMapping: function(data) {
                return data.projectID = data.id, data.organizationID = data.organization_id, 
                data.isWritable = !0 === data.isWritable, data.edit = data.isWritable, 
                delete data.id, delete data.organization_id, data;
            },
            params: {
                search: ""
            },
            pagination: {
                enabled: !0,
                pageLength: 25
            }
        }), actions = (reqPerms.ajaxCallback = function(data) {
            data.result && 0 < data.result.length && !data.result[0].hasOwnProperty("organization_name") && (columns.splice(1, 1), 
            this.setColumns(columns), this._renderTableHeaders()), data.paginationSupported ? (this.insertPaginationBars(), 
            this.setRecords(data.result), this.updatePagination(data), this._renderData()) : AST.datagrid.Simple.prototype.ajaxCallback.call(this, data);
        }.bind(reqPerms), children.push(reqPerms), new AST.Element({
            tagName: "section",
            attributes: {
                class: "asset-list"
            },
            children: children
        }));
        AST.controller.renderPage(actions, "Assets");
    }
}), AST.Asset = AST.Asset || {}, AST.Asset.New = function(data) {
    (data = data || {}).type = AST.Util.AssetTypes.PRODUCTION, this.initModel(data);
}, $.extend(AST.Asset.New.prototype, AST.hasDataModelMixin, {
    validate: function() {
        var errors = [];
        return ($.isEmpty(this.getModel().get("organizationID")) || this.getModel().get("organizationID") <= 0) && errors.push(new AST.Element({
            tagName: "li",
            content: "Parent Organization is required"
        })), $.isEmpty(this.getModel().get("name")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Asset Name is required"
        })), $.isEmpty(this.getModel().get("reportName")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Report Name is required"
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleSave: function(ev) {
        ev.preventDefault(), this.validate() && AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/projects/edit", this.getModel().getData(), function(data, status, xhr) {
            "success" !== status ? alert("Error") : (this.getModel().set("id", data.result.system_id), 
            this.getModel().set("projectID", data.result.system_id), this.getModel().set("edit", !0), 
            this.getModel().set("isWritable", !0), AST.Storage.set("activeAsset", this.getModel()), 
            this.handleCreateFirstReport());
        }.bind(this));
    },
    handleCreateFirstReport: function() {
        var data = {
            reportID: 0,
            projectID: this.getModel().get("projectID"),
            name: this.getModel().get("reportName")
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/reports/edit", data, function(data, status, xhr) {
            "success" !== status ? alert("Error") : AST.controller.fireEvent("assetview", AST.Storage.get("activeAsset", new AST.Model()).getData());
        }.bind(this));
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("homelaunch");
    },
    launch: function() {
        var reqPerms, fields = [ new AST.Element({
            tagName: "h1",
            content: "Create New Asset"
        }), new AST.form.Select({
            label: "Parent Organization",
            dataUrl: "/api/assistant/organizations/list",
            autoload: !0,
            optionKey: "orgID",
            optionRenderer: function(data) {
                return data.name;
            },
            model: this.getModel(),
            modelProperty: "organizationID",
            required: !0
        }), new AST.form.Text({
            label: "Asset Name",
            model: this.getModel(),
            modelProperty: "name",
            required: !0
        }) ];
        AST.controller.isFeatureEnabled("assetTypes") && fields.push(new AST.form.Select({
            label: "Type",
            options: [ {
                id: AST.Util.AssetTypes.PRODUCTION,
                value: AST.Util.AssetTypes.PRODUCTION
            }, {
                id: AST.Util.AssetTypes.SANDBOX,
                value: AST.Util.AssetTypes.SANDBOX
            } ],
            optionKey: "id",
            optionRenderer: function(data) {
                return data.value;
            },
            showPlaceholderOption: !1,
            model: this.getModel(),
            modelProperty: "type",
            required: !0
        })), AST.controller.isFeatureEnabled("suppressSensitiveData") && (reqPerms = [ AST.Login.permissions.ORGANIZATION_ADMINISTRATOR, AST.Login.permissions.SYSTEM_ADMINISTRATOR, AST.Login.permissions.ROOT_ADMINISTRATOR ], 
        AST.Login.hasPermission(reqPerms) && fields.push(new AST.form.Checkbox({
            label: "Suppress Sensitive Data",
            model: this.getModel(),
            modelProperty: "suppressSensitiveData",
            labelPosition: "left",
            attributes: {
                name: "suppress_sensitive_data",
                value: "true"
            },
            initChecked: !0
        }))), fields.push(new AST.Element({
            tagName: "hr"
        }), new AST.form.Text({
            label: "Report Name",
            model: this.getModel(),
            modelProperty: "reportName",
            required: !0
        })), this.form = new AST.form.Form({
            children: fields,
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Save"
                },
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ],
            listeners: {
                submit: this.handleSave.bind(this)
            }
        }), AST.controller.renderPage(this.form, "Create New Asset");
    }
}), AST.Asset = AST.Asset || {}, AST.Asset.View = function(data) {
    this.initModel(data), this.getModel().initExternalListener("asset"), AST.Storage.set("activeAsset", this.getModel());
}, $.extend(AST.Asset.View.prototype, AST.hasDataModelMixin, {
    handleEditReport: function(data, assetModel, ev) {
        ev.preventDefault(), AST.controller.fireEvent("reportedit", [ data, ev.currentTarget ]);
    },
    handleDeleteReport: function(data, assetModel, ev) {
        ev.preventDefault(), AST.controller.fireEvent("reportdelete", [ data, ev.currentTarget ]);
    },
    handleViewReport: function(data, assetModel, ev) {
        ev.preventDefault(), AST.controller.fireEvent("reportview", data);
    },
    handleNewReport: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("reportnew", this.getData());
    },
    handleMacros: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("macrolist");
    },
    handleFixes: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("alchemylist");
    },
    handleElementFilters: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("filterlist", this.getData(), ev.target);
    },
    launch: function() {
        var actions = [], actions = (this.getModel().get("isWritable") && (actions.push(new AST.form.Button({
            listeners: {
                click: this.handleNewReport.bind(this)
            },
            content: '<i class="fas fa-plus-circle"></i><span class="a11y-offscreen-text">Create New </span> Report'
        }), new AST.form.Button({
            listeners: {
                click: this.handleMacros.bind(this)
            },
            content: '<i class="fas fa-play"></i> Macros'
        })), AST.alchemy.isEnabled(AST.Storage.get("activeAsset").get("organizationID")) && actions.push(new AST.form.Button({
            listeners: {
                click: this.handleFixes.bind(this)
            },
            content: '<i class="fad fa-flask"></i> Alchemy Fixes'
        })), AST.controller.isFeatureEnabled("elementFiltering") && actions.push(new AST.form.Button({
            listeners: {
                click: this.handleElementFilters.bind(this)
            },
            content: '<i class="fas fa-hashtag"></i> Element Filters'
        }))), actions.push(new AST.search.Search({
            id: "report-list-search",
            placeholder: " Search Reports"
        })), new AST.datagrid.Simple({
            pagination: {
                enabled: !0,
                pageLength: 25
            },
            columns: [ new AST.datagrid.Column({
                dataIndex: "reportName",
                content: "Reports",
                renderer: function(rec) {
                    return new AST.Element({
                        tagName: "a",
                        attributes: {
                            href: "#"
                        },
                        listeners: {
                            click: this.handleViewReport.bind(this, rec, this.getModel())
                        },
                        content: rec.name
                    }).render();
                }.bind(this)
            }), new AST.datagrid.Column({
                content: "Actions",
                attributes: {
                    class: "actions"
                },
                renderer: function(rec) {
                    if (!rec.isWritable) return "&nbsp;";
                    var buttons = [ new AST.form.Button({
                        listeners: {
                            click: this.handleEditReport.bind(this, rec, this.getModel())
                        },
                        attributes: {
                            title: "Edit"
                        },
                        content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Edit ' + rec.name + " report</span>"
                    }) ];
                    return AST.controller.isFeatureEnabled("limitDelete") && !AST.Login.isSysAdmin(AST.Storage.get("activeAsset").get("organizationID")) || buttons.push(new AST.form.Button({
                        listeners: {
                            click: this.handleDeleteReport.bind(this, rec, this.getModel())
                        },
                        attributes: {
                            title: "Delete"
                        },
                        content: '<i class="fas fa-times"></i><span class="a11y-offscreen-text">Delete ' + rec.name + " report</span>"
                    })), new AST.Element({
                        tagName: "div",
                        children: buttons
                    }).render();
                }.bind(this)
            }) ],
            dataUrl: "/api/assistant/reports/list",
            params: {
                projectID: this.getModel().get("projectID")
            },
            autoload: !0,
            actions: actions
        })), children = (AST.controller.addListener("reloadassetlist", actions.load, actions, actions.getEl()), 
        [ new AST.form.Button({
            attributes: {
                class: "page-back-btn",
                title: "Back"
            },
            listeners: {
                click: function(ev) {
                    ev.preventDefault(), AST.controller.fireEvent("assetlist");
                }
            },
            content: AST.Util.getBackButton("Back")
        }), new AST.Element({
            tagName: "h1",
            content: "Asset: " + this.getModel().get("name")
        }), new AST.Element({
            tagName: "p",
            attributes: {
                class: "instructions"
            },
            content: "Create a new report to start a new audit or open an existing report to view test results or continue testing."
        }) ]), actions = (children.push(actions), new AST.Element({
            tagName: "section",
            attributes: {
                class: "report-list"
            },
            children: children
        }));
        AST.controller.renderPage(actions, "View Asset");
    }
}), AST.Pages.bestPractice = AST.Pages.bestPractice || {}, AST.Pages.bestPractice.handlers = {
    handleView: function(data, target) {
        data = {
            bestPracticeID: data.violation_id
        };
        AST.controller.isLoggedIn() ? AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/bestpractices/view", data, function(data, status, xhr) {
            new AST.Pages.bestPractice.View(data.result, target).launch();
        }.bind(this)) : AST.controller.ajaxPost(AST.Controller.WITHOUT_TOKEN, "/api/assistant/bestpractices/view", data, function(data, status, xhr) {
            new AST.Pages.bestPractice.View(data.result, target).launch();
        }.bind(this));
    }
}, AST.controller.addListener("bpview", AST.Pages.bestPractice.handlers.handleView), 
AST.Pages.bestPractice = AST.Pages.bestPractice || {}, AST.Pages.bestPractice.View = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.bestPractice.View.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    launch: function() {
        var children = [ new AST.Element({
            tagName: "h2",
            content: "Description"
        }), new AST.Element({
            tagName: "div",
            content: this.getModel().get("long_description")
        }) ];
        $.isEmpty(this.getModel().get("recommendation")) || (children.push(new AST.Element({
            tagName: "h2",
            content: "Recommendation"
        })), children.push(new AST.Element({
            tagName: "div",
            content: this.getModel().get("recommendation")
        }))), $.isEmpty(this.getModel().get("nonCompliantExample")) && $.isEmpty(this.getModel().get("compliantExample")) || (children.push(new AST.Element({
            tagName: "h2",
            content: "Examples"
        })), $.isEmpty(this.getModel().get("nonCompliantExample")) || (children.push(new AST.Element({
            tagName: "h3",
            content: "Non-Compliant Example"
        })), children.push(new AST.Element({
            tagName: "code",
            content: this.getModel().get("nonCompliantExample")
        }))), $.isEmpty(this.getModel().get("compliantExample")) || (children.push(new AST.Element({
            tagName: "h3",
            content: "Compliant Example"
        })), children.push(new AST.Element({
            tagName: "code",
            content: this.getModel().get("compliantExample")
        })))), this.modal = new AST.window.Popup({
            title: this.getModel().get("short_description"),
            height: 80,
            width: 80,
            target: this.getTarget(),
            attributes: {
                class: "bp-view"
            },
            children: children
        }), this.modal.render();
    }
}), AST.Pages.elementFilter = AST.Pages.elementFilter || {}, AST.Pages.elementFilter.handlers = {
    handleList: function() {
        new AST.Pages.elementFilter.List().launch();
    },
    handleNew: function() {
        new AST.Pages.elementFilter.New().launch();
    },
    handleView: function(data) {
        new AST.Pages.elementFilter.View(data).launch();
    },
    handleEdit: function(data, target) {
        new AST.Pages.elementFilter.Edit(data, target).launch();
    },
    handleDelete: function(data) {
        new AST.Pages.elementFilter.Delete(data).launch();
    }
}, AST.controller.addListener("filterlist", AST.Pages.elementFilter.handlers.handleList), 
AST.controller.addListener("filterview", AST.Pages.elementFilter.handlers.handleView), 
AST.controller.addListener("filternew", AST.Pages.elementFilter.handlers.handleNew), 
AST.controller.addListener("filteredit", AST.Pages.elementFilter.handlers.handleEdit), 
AST.controller.addListener("filterdelete", AST.Pages.elementFilter.handlers.handleDelete), 
AST.Pages.instance = AST.Pages.instance || {}, AST.Pages.instance.handlers = {
    handleEdit: function(data, target) {
        var sendData = {
            instanceID: data.instance.instance_id
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/list", sendData, function(instance, status, xhr) {
            data.instance = instance.result, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/bestpractices/view", {
                bestPracticeID: data.instance.violation_id
            }, function(bp, status, xhr) {
                data.bp = bp.result, new AST.Pages.instance.Edit(data, target).launch();
            }.bind(this));
        }.bind(this));
    },
    handleReview: function(data, target) {
        var sendData = {
            instanceID: data.instance.instance_id
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/list", sendData, function(instance, status, xhr) {
            data.instance = instance.result, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/bestpractices/view", {
                bestPracticeID: data.instance.violation_id
            }, function(bp, status, xhr) {
                data.bp = bp.result, new AST.Pages.instance.Review(data, target).launch();
            }.bind(this));
        }.bind(this));
    },
    handleDelete: function(data, target) {
        new AST.Pages.instance.Delete(data, target).launch();
    },
    handleBulkDelete: function(data, target) {
        new AST.Pages.instance.BulkDelete(data, target).launch();
    },
    handleBulkPass: function(data, target) {
        new AST.Pages.instance.BulkPassFail(data, target, "Pass").launch();
    },
    handleBulkFail: function(data, target) {
        new AST.Pages.instance.BulkPassFail(data, target, "Fail").launch();
    },
    handleAddToPattern: function(data, target) {
        data = {
            instanceID: data.instance_id
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/list", data, function(instance, status, xhr) {
            new AST.Pages.instance.AddToPattern(instance.result, target).launch();
        });
    }
}, AST.controller.addListener("instanceedit", AST.Pages.instance.handlers.handleEdit), 
AST.controller.addListener("instancereview", AST.Pages.instance.handlers.handleReview), 
AST.controller.addListener("instancedelete", AST.Pages.instance.handlers.handleDelete), 
AST.controller.addListener("instancebulkdelete", AST.Pages.instance.handlers.handleBulkDelete), 
AST.controller.addListener("instancebulkpass", AST.Pages.instance.handlers.handleBulkPass), 
AST.controller.addListener("instancebulkfail", AST.Pages.instance.handlers.handleBulkFail), 
AST.controller.addListener("instanceaddtopattern", AST.Pages.instance.handlers.handleAddToPattern), 
AST.Pages.instance = AST.Pages.instance || {}, AST.Pages.instance.AddToPattern = function(data, target) {
    this.report = AST.Storage.get("activeReport", new AST.Model()), this.initModel(data), 
    this.getModel().set("retain_instance", !1), this.getModel().set("note", this.getModel().get("attribute")), 
    this.getModel().set("reportID", this.report.get("id")), this.getModel().set("thumbnail", {}), 
    this.getModel().set("thumbnail.alt", this.getModel().get("thumbnailAltText")), 
    this.getModel().set("thumbnail.data", this.getModel().get("thumbnailDataUrl")), 
    this.setTarget(target);
}, $.extend(AST.Pages.instance.AddToPattern.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    codeSnippet: null,
    thumbnail: null,
    handleSave: function(ev) {
        var data;
        ev.preventDefault(), this.validate() && (ev = this.getModel().get("pattern_id"), 
        data = this.getModel().getData(), AST.controller.ajaxPut(AST.Controller.WITH_TOKEN, "/api/assistant/reports/" + AST.Storage.get("activeReport", new AST.Model()).get("id") + "/pattern/" + ev + "/member", data, function(data, status, xhr) {
            "success" !== status ? alert("Error") : this.getModel().get("retain_instance") ? (this.modal.close(), 
            AST.controller.fireEvent("reloadinstancelist")) : this.deleteInstance();
        }.bind(this), void 0, "PUT"), this.modal.close());
    },
    deleteInstance: function() {
        var data = {
            instanceID: this.getModel().get("instance_id"),
            reportID: AST.Storage.get("activeReport", new AST.Model()).get("id")
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/delete", data, function() {
            this.modal.close(), AST.controller.fireEvent("reloadinstancelist");
        }.bind(this));
    },
    validate: function() {
        var errors = [];
        return !$.isEmpty(this.getModel().get("pattern_id")) && "-1" !== this.getModel().get("pattern_id") || errors.push(new AST.Element({
            tagName: "li",
            content: "Pattern is required"
        })), !$.isEmpty(this.getModel().get("violation_id")) && "0" !== this.getModel().get("violation_id") || errors.push(new AST.Element({
            tagName: "li",
            content: "Violation is required"
        })), $.isEmpty(this.getModel().get("element")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Description is required"
        })), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && !$.isEmpty(this.getModel().get("thumbnail.data")) && $.isEmpty(this.getModel().get("thumbnail.alt")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Thumbnail Alt Text is required"
        })), 0 === errors.length || (this.modal.handleErrors(errors), !1);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.modal.close(), AST.controller.fireEvent("reloadinstancelist");
    },
    launch: function() {
        this.modal = new AST.window.Modal({
            title: "Add to Pattern",
            height: 90,
            width: 600,
            target: this.getTarget(),
            listeners: {
                submit: this.handleSave.bind(this)
            },
            children: [ new AST.form.Select({
                label: "Pattern",
                model: this.getModel(),
                modelProperty: "pattern_id",
                dataMethod: "GET",
                dataUrl: "/api/assistant/reports/" + this.getModel().get("reportID") + "/pattern-simple",
                autoload: !0,
                optionKey: "id",
                optionRenderer: function(data) {
                    return data.label;
                },
                showPlaceholderOption: !0,
                required: !0
            }), this.getInstanceDataFieldset() ],
            buttons: [ new AST.form.Checkbox({
                label: "Retain Original Violation Instance",
                model: this.getModel(),
                modelProperty: "retain_instance",
                attributes: {
                    name: "retain_instance",
                    value: "true"
                },
                initChecked: !1
            }), new AST.Element({
                tagName: "div",
                attributes: {
                    class: "flex-space"
                }
            }), new AST.form.Button({
                content: "Save",
                listeners: {
                    click: this.handleSave.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ]
        }), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && this.modal.addListener("inspectednode-" + this.codeSnippet.getId(), function(thumbnailField, params) {
            thumbnailField.handleInspectSelection(params.node, params.frameId);
        }.bind(this, this.thumbnail)), this.modal.render();
    },
    getInstanceDataFieldset: function() {
        var violationDropdown = new AST.form.ComboBox({
            label: "Violation",
            model: this.getModel(),
            modelProperty: "violation_id",
            dataUrl: "/api/assistant/bestpractices/list/mediaTypes",
            params: {
                reportID: this.report.get("id")
            },
            autoload: !0,
            optionKey: "violation_id",
            optionRenderer: function(data) {
                return data.short_description;
            },
            value: this.getModel().get("violation_id") || "0",
            attributes: {
                style: "max-width: 500px;"
            },
            showPlaceholderOption: !1,
            disableNegativeOptions: !0,
            required: !0
        });
        return this.decodeFormFieldHtml("element"), this.decodeFormFieldHtml("note"), 
        this.codeSnippet = new AST.form.InspectTool({
            label: "Description",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "element",
            required: !0
        }), this.thumbnail = new AST.form.Thumbnail({
            legend: "Thumbnail",
            model: this.getModel(),
            modelProperty: "thumbnail"
        }), new AST.form.Fieldset({
            legend: "Instance Data to Copy",
            attributes: {
                class: "panel"
            },
            children: [ violationDropdown, this.codeSnippet, new AST.form.TextArea({
                label: "Note",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "note"
            }), this.thumbnail, new AST.form.Select({
                id: "severity",
                labelPosition: "left",
                label: "Severity",
                dataUrl: "/api/severity/list",
                params: {
                    reportID: this.report.get("id")
                },
                autoload: !0,
                optionKey: "value",
                optionRenderer: function(data) {
                    return data.label;
                },
                model: this.getModel(),
                modelProperty: "severity",
                value: this.getModel().get("severity"),
                placeHolderOption: new AST.form.Option({
                    attributes: {
                        value: -1
                    },
                    content: "Default"
                })
            }), this.getDefectFieldset() ]
        });
    },
    getDefectFieldset: function() {
        return new AST.form.Fieldset({
            legend: "Defect Details",
            children: [ new AST.form.Text({
                label: "Defect ID",
                model: this.getModel(),
                modelProperty: "defect_id"
            }), new AST.form.Select({
                label: "Status",
                options: [ {
                    value: "new",
                    label: "New"
                }, {
                    value: "backlogged",
                    label: "Backlogged"
                }, {
                    value: "scheduled",
                    label: "Scheduled"
                }, {
                    value: "in_development",
                    label: "In Development"
                }, {
                    value: "needs_retesting",
                    label: "Needs Retesting"
                }, {
                    value: "in_qa",
                    label: "In QA"
                }, {
                    value: "failed_retesting",
                    label: "Failed Retesting"
                }, {
                    value: "fixed",
                    label: "Fixed"
                } ],
                autoload: !0,
                optionKey: "value",
                optionRenderer: function(data) {
                    return data.label;
                },
                model: this.getModel(),
                modelProperty: "defect_status",
                value: this.getModel().get("defect_status")
            }), new AST.form.TextArea({
                label: "Comments",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "defect_comments"
            }) ]
        });
    },
    decodeFormFieldHtml: function(field) {
        var value = this.getModel().get(field);
        value && this.getModel().set(field, AST.Util.decodeHTML(value));
    }
}), AST.Pages.instance = AST.Pages.instance || {}, AST.Pages.instance.BulkDelete = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.instance.BulkDelete.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault();
        ev = {
            instanceID: this.getModel().get("instance"),
            reportID: this.getModel().get("reportID")
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/delete", ev, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("moduleview", AST.Storage.get("activeModule", new AST.Model()).getData());
        }.bind(this, el));
    },
    launch: function() {
        var deleteButton = new AST.form.Button({
            content: "Delete"
        });
        deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Delete Selected Instances?',
            height: 250,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "This action will permanently delete the selected instances."
            }), new AST.Element({
                tagName: "p",
                content: "If any of the selected instances are part of a pattern or global, the associated pattern or global will also be deleted along with all the associated testing data."
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render(), deleteButton.getEl().focus();
    }
}), AST.Pages.instance = AST.Pages.instance || {}, AST.Pages.instance.BulkPassFail = function(data, target, newTestResult) {
    this.initModel(data), this.setTarget(target), this.setTestResult(newTestResult || "Pass");
}, $.extend(AST.Pages.instance.BulkPassFail.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handlePassFail: function(el, ev) {
        ev.preventDefault();
        ev = {
            instanceIds: this.getModel().get("instance")
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/" + this.getTestResult().toLowerCase(), ev, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("moduleview", AST.Storage.get("activeModule", new AST.Model()).getData());
        }.bind(this, el));
    },
    launch: function() {
        var passFailButton = new AST.form.Button({
            content: this.getTestResult()
        });
        passFailButton.addListener("click", this.handlePassFail.bind(this, passFailButton)), 
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> ' + this.getTestResult() + " Selected Instances?",
            height: 200,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "This action will " + this.getTestResult().toLowerCase() + " the selected instances."
            }) ],
            buttons: [ passFailButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render(), passFailButton.getEl().focus();
    },
    getTestResult: function() {
        return this._testResult;
    },
    setTestResult: function(testResult) {
        this._testResult = testResult;
    }
}), AST.Pages.instance = AST.Pages.instance || {}, AST.Pages.instance.Delete = function(data, target) {
    this.initModel(data), this.setTarget(target);
}, $.extend(AST.Pages.instance.Delete.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, {
    handleDelete: function(el, ev) {
        ev.preventDefault();
        ev = {
            instanceID: this.getModel().get("instance").instance_id,
            reportID: this.getModel().get("reportID")
        };
        AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/delete", ev, function(el) {
            el.bubbleEvent("closewindow"), AST.controller.fireEvent("moduleview", AST.Storage.get("activeModule", new AST.Model()).getData());
        }.bind(this, el));
    },
    launch: function() {
        var deleteButton = new AST.form.Button({
            content: "Delete"
        });
        deleteButton.addListener("click", this.handleDelete.bind(this, deleteButton)), 
        new AST.window.Modal({
            title: '<i class="fas fa-exclamation-triangle"></i> Delete Violation Instance?',
            height: 175,
            width: 300,
            target: this.getTarget(),
            children: [ new AST.Element({
                tagName: "p",
                content: "This action will permanently delete this instance. Continue?"
            }) ],
            buttons: [ deleteButton, new AST.form.CancelButton({
                listeners: {
                    click: function(ev) {
                        ev.preventDefault(), this.bubbleEvent("closewindow");
                    }
                }
            }) ]
        }).render();
    }
}), AST.Pages.instance = AST.Pages.instance || {}, AST.Pages.instance.Edit = function(data, target) {
    this.bpModel = new AST.Model(data.bp), this.initModel(data.instance), this.initHighlighting(), 
    this.getModel().set("element", AST.Util.decodeHTML(this.getModel().get("element"))), 
    this.getModel().set("attribute", AST.Util.decodeHTML(this.getModel().get("attribute"))), 
    this.getModel().set("xpath", AST.Util.decodeHTML(this.getModel().get("xpath"))), 
    this.getModel().set("contentIdentifier", AST.Util.decodeHTML(this.getModel().get("content_identifier"))), 
    this.getModel().set("userImpact", AST.Util.decodeHTML(this.getModel().get("user_impact"))), 
    this.getModel().set("stepsToReproduce", AST.Util.decodeHTML(this.getModel().get("steps_to_reproduce"))), 
    this.getModel().set("codeSuggestion", AST.Util.decodeHTML(this.getModel().get("code_suggestion"))), 
    this.getModel().set("description", AST.Util.decodeHTML(this.getModel().get("description"))), 
    this.getModel().set("remediation", AST.Util.decodeHTML(this.getModel().get("remediation"))), 
    this.getModel().set("thumbnail", {}), this.getModel().set("thumbnail.data", this.getModel().get("thumbnailDataUrl")), 
    this.getModel().set("thumbnail.alt", this.getModel().get("thumbnailAltText")), 
    this.getModel().initExternalListener("instance"), this.setTarget(target), this.fixModels = {}, 
    this.fixTemplates = {}, this.severities = {};
    function noop() {}
    AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/logView", {}, noop, noop);
}, $.extend(AST.Pages.instance.Edit.prototype, AST.hasDataModelMixin, AST.RememberFocusTargetMixin, AST.HighlightsMixin, {
    launch: function() {
        AST.controller.isFeatureEnabled("instanceSeverity") ? this.loadSeverities(this.loadFixes.bind(this)) : this.loadFixes();
    },
    loadSeverities: function(callback) {
        AST.controller.ajaxGet(AST.Controller.WITH_TOKEN, "/api/assistant/organization/" + AST.Storage.get("activeAsset").get("organizationID") + "/severities", {}, function(data, status, xhr) {
            var severityInList;
            "success" !== status ? alert("Error") : (this.severities = data.result, 
            severityInList = !1, this.severities.map(function(severity) {
                (severity.value === this.getModel().get("severity") || severity.value === parseInt(this.getModel().get("severity"))) && (severityInList = !0);
            }.bind(this)), this.getModel().set("severity", severityInList ? this.getModel().get("severity") : 0), 
            callback());
        }.bind(this));
    },
    loadFixes: function() {
        var sendData = {
            projectID: AST.Storage.get("activeAsset", new AST.Model()).get("projectID"),
            fingerprintID: this.getModel().get("fingerprint_id")
        };
        sendData.fingerprintID ? AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/fixes/list", sendData, function(data, status, xhr) {
            "success" !== status ? alert("Error") : ($.each(data.result, function(i, fixData) {
                var model = new AST.Model(fixData.fix);
                model.set("fixID", fixData.fixID), this.fixModels[parseInt(fixData.engineTestID)] = model;
            }.bind(this)), this.drawModal());
        }.bind(this)) : this.drawModal();
    },
    getNavButtons: function() {
        var navButtons = [];
        return 0 < this.getPreviousButton().length && navButtons.push(new AST.form.Button({
            content: '<i class="fas fa-caret-left"></i><span class="a11y-offscreen-text">Open Previous Violation</span>',
            attributes: {
                title: "Open Previous Violation",
                "aria-haspop": !0
            },
            listeners: {
                click: this.handlePrevious.bind(this)
            }
        })), 0 < this.getNextButton().length && navButtons.push(new AST.form.Button({
            content: '<i class="fas fa-caret-right"></i><span class="a11y-offscreen-text">Open Next Violation</span>',
            attributes: {
                title: "Open Next Violation",
                "aria-haspop": !0
            },
            listeners: {
                click: this.handleNext.bind(this)
            }
        })), navButtons;
    },
    getButtons: function() {
        var buttons = [ new AST.form.Button({
            content: "Save",
            listeners: {
                click: this.handleSave.bind(this)
            }
        }), new AST.form.CancelButton({
            listeners: {
                click: this.handleCancel.bind(this)
            }
        }) ];
        return parseInt(this.getModel().get("test_type_id")) === AST.Util.TestTypes.GUIDED_AUTOMATIC && buttons.unshift(new AST.form.Button({
            content: "Mark for Review",
            listeners: {
                click: this.handleReview.bind(this)
            }
        })), buttons.unshift(this.getHighlightToggleButton()), AST.controller.isFeatureEnabled("legacyPatterns") && buttons.unshift(new AST.form.MenuButton({
            content: '<div class="fa-layers"><i class="fas fa-circle"></i><span class="fa-layers-text fa-inverse" data-fa-transform="shrink-3">P</span></div> Pattern',
            attributes: {
                title: "Pattern"
            },
            children: [ new AST.form.MenuButtonItem({
                content: "Create New",
                listeners: {
                    click: this.handleAddPattern.bind(this)
                }
            }), new AST.form.MenuButtonItem({
                content: "Add to Existing",
                listeners: {
                    click: this.handleAddToExistingPattern.bind(this)
                }
            }) ]
        }), new AST.Element({
            tagName: "div",
            attributes: {
                class: "flex-space"
            }
        })), buttons;
    },
    drawModal: function() {
        this.highlight(AST.Storage.get("activeModule").get("moduleLocation"), this.getModel().get("xpath"), this.getModel().get("element"));
        let selector = this.getModel().get("xpath");
        -1 !== selector.indexOf("||") && (selectorParts = selector.split("||"), 
        selector = selectorParts[selectorParts.length - 1]);
        var selectorParts = [ new AST.Element({
            tagName: "h2",
            content: "Instance Details"
        }), new AST.form.DisplayText({
            label: "CSS Selector",
            labelPosition: "top",
            content: selector
        }) ];
        AST.controller.isFeatureEnabled("instanceRemediation") || (selectorParts.push(new AST.form.InspectTool({
            label: "Description",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "element"
        }), new AST.form.TextArea({
            label: "Note",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "attribute"
        })), AST.controller.isFeatureEnabled("instanceSeverity") && selectorParts.push(this.getSeverityCombobox())), 
        selectorParts.push(this.getTabArea()), this.modal = new AST.window.Modal({
            title: this.bpModel.get("short_description"),
            headerButtons: this.getNavButtons(),
            height: 80,
            width: 80,
            target: this.getTarget(),
            listeners: {
                submit: this.handleSave.bind(this, this.getModel())
            },
            children: selectorParts,
            buttons: this.getButtons()
        }), this.modal.render();
    },
    getSeverityCombobox: function() {
        return new AST.form.ComboBox({
            label: "Severity",
            model: this.getModel(),
            modelProperty: "severity",
            options: this.severities,
            optionKey: "value",
            optionRenderer: function(data) {
                return data.label;
            },
            value: this.getModel().get("severity") || 0,
            attributes: {
                style: "max-width: 1500px;"
            },
            showPlaceholderOption: !1,
            disableNegativeOptions: !0,
            required: !0
        });
    },
    validate: function(model) {
        var listItem, errors = [];
        return $.isEmpty(model.get("element")) && (AST.controller.isFeatureEnabled("instanceRemediation"), 
        (listItem = new AST.Element({
            tagName: "li",
            content: "Description is required"
        })).setAppendContent(!0), errors.push(listItem)), !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && !$.isEmpty(model.get("thumbnail.data")) && $.isEmpty(model.get("thumbnail.alt")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Alt Text is required"
        })), 0 === errors.length || (this.modal.handleErrors(errors), !1);
    },
    save: function(data) {
        this.validate(this.getModel()) && (this.closeModal(), AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/edit", data, function(data, status, xhr) {
            AST.controller.fireEvent("reloadinstancelist");
        }.bind(this)));
    },
    getSaveData: function() {
        var data = {
            element: this.getModel().get("element"),
            instanceID: this.getModel().get("instance_id"),
            moduleID: this.getModel().get("module_id"),
            violationID: this.getModel().get("violation_id"),
            attribute: this.getModel().get("attribute"),
            contentIdentifier: this.getModel().get("contentIdentifier"),
            userImpact: this.getModel().get("userImpact"),
            description: this.getModel().get("description"),
            stepsToReproduce: this.getModel().get("stepsToReproduce"),
            remediation: this.getModel().get("remediation"),
            codeSuggestion: this.getModel().get("codeSuggestion"),
            thumbnailAltText: this.getModel().get("thumbnail.alt"),
            thumbnailDataUrl: this.getModel().get("thumbnail.data")
        };
        return AST.controller.isFeatureEnabled("instanceSeverity") && (data.severity = this.getModel().get("severity")), 
        data;
    },
    handleSave: function(ev) {
        ev.preventDefault(), this.save(this.getSaveData());
    },
    handleReview: function(ev) {
        ev.preventDefault();
        ev = this.getSaveData();
        ev.testResult = AST.Util.InstanceStatus.REVIEW, this.save(ev);
    },
    handleAddPattern: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("patternnew", [ this.getModel().getData(), ev.currentTarget ]);
    },
    handleAddToExistingPattern: function(ev) {
        ev.preventDefault();
        var data = this.getModel().getData();
        data.moduleID = data.module_id, data.violationID = data.violation_id, AST.controller.fireEvent("instanceaddtopattern", [ data, ev.currentTarget ]);
    },
    closeModal: function() {
        this.unhighlight(), this.modal.close(), AST.controller.fireEvent("reloadinstancelist");
    },
    handleCancel: function(ev) {
        ev.preventDefault(), this.closeModal();
    },
    getPreviousButton: function() {
        var prevButtonInTable = $("[title~=Edit]", $(this.getTarget()).parents("tr").prev()), prevButtonInList = $("[title~=Edit]", $(this.getTarget()).parents("li").prev());
        return 0 < prevButtonInTable.length ? prevButtonInTable : prevButtonInList;
    },
    handlePrevious: function(ev) {
        var prevButtons = this.getPreviousButton();
        ev.preventDefault(), this.closeModal(), prevButtons[prevButtons.length - 1].click();
    },
    getNextButton: function() {
        var nextButtonInTable = $("[title~=Edit]", $(this.getTarget()).parents("tr").next()), nextButtonInList = $("[title~=Edit]", $(this.getTarget()).parents("li").next());
        return 0 < nextButtonInTable.length ? nextButtonInTable : nextButtonInList;
    },
    handleNext: function(ev) {
        ev.preventDefault(), this.closeModal(), this.getNextButton()[0].click();
    },
    getDetailTab: function() {
        var children = [ new AST.form.TextArea({
            label: "Content Identifier",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "contentIdentifier"
        }), new AST.form.InspectTool({
            label: "Description",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "element",
            required: !0
        }), new AST.form.TextArea({
            label: "Note",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "attribute"
        }), new AST.form.TextArea({
            label: "Resources",
            labelPosition: "top",
            model: this.getModel(),
            modelProperty: "description"
        }) ];
        return AST.controller.isFeatureEnabled("instanceSeverity") && children.push(this.getSeverityCombobox()), 
        new AST.tabs.Tab({
            title: "Details",
            attributes: {
                class: "bp-view"
            },
            children: children
        });
    },
    getThumbnailTab: function() {
        return new AST.tabs.Tab({
            title: "Thumbnail",
            attributes: {
                class: "bp-view"
            },
            children: [ new AST.form.Thumbnail({
                legend: "Thumbnail",
                model: this.getModel(),
                modelProperty: "thumbnail",
                attributes: {
                    class: "large"
                }
            }) ]
        });
    },
    getProblemTab: function() {
        var children = [ new AST.Element({
            tagName: "p",
            content: this.bpModel.get("long_description")
        }) ];
        return AST.controller.isFeatureEnabled("instanceRemediation") && children.unshift(new AST.Element({
            tagName: "div",
            children: [ new AST.form.TextArea({
                label: "User Impact",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "userImpact"
            }), new AST.form.TextArea({
                label: "Steps to Reproduce",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "stepsToReproduce"
            }) ]
        })), new AST.tabs.Tab({
            title: "Problem",
            attributes: {
                class: "bp-view"
            },
            children: children
        });
    },
    getSolutionTab: function() {
        var children = [ new AST.Element({
            tagName: "p",
            content: this.bpModel.get("recommendation")
        }), new AST.Element({
            tagName: "h3",
            content: "Examples"
        }), new AST.Element({
            tagName: "h4",
            content: "Non-Compliant Example"
        }), new AST.Element({
            tagName: "code",
            content: this.bpModel.get("nonCompliantExample")
        }), new AST.Element({
            tagName: "h4",
            content: "Compliant Example"
        }), new AST.Element({
            tagName: "code",
            content: this.bpModel.get("compliantExample")
        }) ];
        return AST.controller.isFeatureEnabled("instanceRemediation") && children.unshift(new AST.Element({
            tagName: "div",
            children: [ new AST.form.TextArea({
                label: "Remediation",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "remediation"
            }), new AST.form.TextArea({
                label: "Code Suggestion",
                labelPosition: "top",
                model: this.getModel(),
                modelProperty: "codeSuggestion"
            }) ]
        })), new AST.tabs.Tab({
            title: "Recommended Solution",
            attributes: {
                class: "bp-view"
            },
            children: children
        });
    },
    getTabArea: function() {
        var tabs = [ this.getProblemTab(), this.getSolutionTab() ];
        return AST.controller.isFeatureEnabled("instanceRemediation") && tabs.unshift(this.getDetailTab()), 
        !AST.controller.isSuppressSensitiveDataEnabled() && AST.controller.isFeatureEnabled("instanceThumbnails") && tabs.push(this.getThumbnailTab()), 
        AST.alchemy.isEnabled(AST.Storage.get("activeAsset").get("organizationID")) && tabs.push(this.getAlchemyTab()), 
        new AST.tabs.Panel({
            tagName: "div",
            children: tabs
        });
    },
    getAlchemyTab: function() {
        var container = new AST.Element({
            tagName: "div",
            children: this._getFixes()
        });
        return new AST.tabs.Tab({
            title: '<i class="fad fa-flask icon-black"></i> Alchemy Fix',
            attributes: {
                class: "bp-view"
            },
            children: [ container ]
        });
    },
    _getFixes: function() {
        var fixInterfaces = [];
        return $.each(this.fixModels, function(engineTestId, model) {
            try {
                var type, test = window.LevelAccess_AccessEngine.ast_getTestById(engineTestId), fixData = {};
                this.fixTemplates[engineTestId] = test.fixType.fix, $.each(test.fixType.fix, function(i, data) {
                    model.get(i) ? fixData[i] = model.get(i) : fixData[i] = test.fixType.fix[i];
                }), model.set("fixType", test.fixType.fixType), null !== test.fixType.fix && (type = AST.alchemy.getFixTypeDescription(test.fixType.fixType), 
                fixInterfaces.push(new AST.Element({
                    tagName: "div",
                    children: [ new AST.form.DisplayText({
                        label: "Failed Test",
                        labelPosition: "top",
                        content: test.metaText
                    }), new AST.form.DisplayText({
                        label: "Fix Type",
                        labelPosition: "top",
                        content: type
                    }), new AST.form.DisplayText({
                        label: "instructions",
                        labelPosition: "top",
                        content: test.fixType.helperText
                    }), new AST.Element({
                        tagName: "hr"
                    }), AST.alchemy.fixes.Factory.create(new AST.alchemy.Fix({
                        type: test.fixType.fixType,
                        fix: fixData
                    }), model, !0) ]
                })));
            } catch (e) {}
        }.bind(this)), 0 === fixInterfaces.length && fixInterfaces.push(new AST.Element({
            tagName: "p",
            content: '<i class="fas fa-exclamation-triangle"></i> This instance does not have any associated Alchemy fixes defined.'
        })), fixInterfaces;
    }
}), AST.Pages.instance = AST.Pages.instance || {}, AST.Pages.instance.Review = function(data, target) {
    AST.Pages.instance.Edit.prototype.constructor.call(this, data, target);
}, $.extend(AST.Pages.instance.Review.prototype, AST.Pages.instance.Edit.prototype, {
    launch: function() {
        AST.controller.isFeatureEnabled("instanceSeverity") ? this.loadSeverities(this.drawModal.bind(this)) : this.drawModal();
    },
    getButtons: function() {
        var buttons = [ new AST.form.Button({
            content: "Pass",
            listeners: {
                click: this.handlePass.bind(this)
            }
        }), new AST.form.Button({
            content: "Fail",
            attributes: {
                class: "red"
            },
            listeners: {
                click: this.handleFail.bind(this)
            }
        }), new AST.form.CancelButton({
            listeners: {
                click: this.handleCancel.bind(this)
            }
        }) ];
        return buttons.unshift(this.getHighlightToggleButton()), AST.controller.isFeatureEnabled("legacyPatterns") && buttons.unshift(new AST.form.MenuButton({
            content: '<div class="fa-layers"><i class="fas fa-circle"></i><span class="fa-layers-text fa-inverse" data-fa-transform="shrink-3">P</span></div> Pattern',
            attributes: {
                title: "Pattern"
            },
            children: [ new AST.form.MenuButtonItem({
                content: "Create New",
                listeners: {
                    click: this.handleAddPattern.bind(this)
                }
            }), new AST.form.MenuButtonItem({
                content: "Add to Existing",
                listeners: {
                    click: this.handleAddToExistingPattern.bind(this)
                }
            }) ]
        }), new AST.Element({
            tagName: "div",
            attributes: {
                class: "flex-space"
            }
        })), buttons;
    },
    handlePass: function(ev) {
        ev.preventDefault();
        ev = this.getSaveData();
        ev.testResult = AST.Util.InstanceStatus.PASSED, this.save(ev);
    },
    handleFail: function(ev) {
        ev.preventDefault();
        ev = this.getSaveData();
        ev.testResult = AST.Util.InstanceStatus.FAIL, this.save(ev);
    }
}), AST.Login = {
    permissions: {
        STANDARD_USER: "3",
        ORGANIZATION_ADMINISTRATOR: "4",
        SYSTEM_ADMINISTRATOR: "100",
        ROOT_ADMINISTRATOR: "200"
    },
    isSysAdmin: function(orgId) {
        var reqPerms = [ AST.Login.permissions.SYSTEM_ADMINISTRATOR, AST.Login.permissions.ROOT_ADMINISTRATOR ];
        return AST.Login.hasPermission(reqPerms, orgId);
    },
    hasPermission: function(permissions, orgId) {
        "object" != typeof permissions && (permissions = [ permissions ]);
        var userInfo = AST.Storage.get("user-info"), hasPerm = !1;
        return null !== userInfo && (orgId ? userInfo.permissions[orgId] && -1 !== permissions.indexOf(userInfo.permissions[orgId]) : ($.each(userInfo.permissions, function(i, userType) {
            if (-1 !== permissions.indexOf(userType)) return !(hasPerm = !0);
        }), hasPerm));
    },
    isAuthenticated: function() {
        var token = AST.Storage.get("token"), userInfo = AST.Storage.get("user-info");
        null === token || null === userInfo ? AST.Login.hasSavedHost() : AST.Login.handleLogin();
    },
    isSSO: function() {
        function handleLoginLaunch() {
            var host = AST.Storage.get("host");
            AST.controller.fireEvent("authlogin", {
                host: host
            });
        }
        try {
            $.post("https://" + AST.Storage.get("host") + "/api/assistant/user/isAmpLogin", {}, function(data, status, request) {
                if (!$.isEmpty(data) && !1 === data.amp_login) return data = AST.Storage.get("host"), 
                AST.controller.setEndPointUrl(null), AST.Storage.set("host", null), 
                void AST.controller.fireEvent("authsso", {
                    host: data
                });
                handleLoginLaunch();
            }).fail(handleLoginLaunch);
        } catch (e) {
            handleLoginLaunch();
        }
    },
    hasSavedHost: function() {
        var host = AST.Storage.get("host");
        null === host || "null" === host ? AST.controller.fireEvent("authselecthost") : AST.Login.isSSO();
    },
    changeHost: function() {
        AST.controller.setLoggedIn(!1), AST.Storage.set("user-info", null), AST.Storage.set("token", null);
        var host = AST.Storage.get("host");
        AST.controller.setEndPointUrl(null), AST.Storage.set("host", null), $("#user-info").empty(), 
        AST.controller.fireEvent("authselecthost", {
            host: host
        }), AST.controller.initializeAMPSupportedFeatures();
    },
    handleLogin: function() {
        AST.controller.setLoggedIn(!0);
        var userInfo = AST.Storage.get("user-info"), userInfoEl = new AST.Element({
            tagName: "ul",
            id: "user-info",
            children: [ new AST.Element({
                tagName: "li",
                content: '<i class="fas fa-user" title="User"></i> ' + userInfo.firstName + " " + userInfo.lastName
            }), new AST.Element({
                tagName: "li",
                content: '<i class="fas fa-plug" title="Host"></i> ' + userInfo.host,
                children: [ new AST.form.Button({
                    content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Change Host</span>',
                    attributes: {
                        title: "Change Host"
                    },
                    listeners: {
                        click: function(ev) {
                            ev.preventDefault(), AST.Login.changeHost();
                        }
                    }
                }) ]
            }) ]
        });
        $("#user-info").replaceWith(userInfoEl.render()), AST.controller.setEndPointUrl(userInfo.host), 
        AST.controller.initializeAMPSupportedFeatures();
        try {
            var event = $("[data-ssb_deeplink_event]").attr("data-ssb_deeplink_event"), data = $("[data-ssb_deeplink_data]").attr("data-ssb_deeplink_data");
            if ("" !== event && void 0 !== event) return data = JSON.parse(data), 
            void AST.controller.fireEvent(event, data);
        } catch (e) {}
        AST.controller.fireEvent("homelaunch");
    },
    handlers: {
        handleSelectHost: function(data) {
            new AST.Login.SelectHost(data).launch();
        },
        handleLogin: function(data) {
            new AST.Login.Login(data).launch();
        },
        handleTwoFactor: function(data) {
            new AST.Login.TwoFactor(data).launch();
        },
        handleSSO: function(data) {
            new AST.Login.SSO(data).launch();
        }
    }
}, AST.controller.addListener("authselecthost", AST.Login.handlers.handleSelectHost), 
AST.controller.addListener("authlogin", AST.Login.handlers.handleLogin), AST.controller.addListener("authtwofactor", AST.Login.handlers.handleTwoFactor), 
AST.controller.addListener("authsso", AST.Login.handlers.handleSSO), AST.controller.addListener("authloginsuccess", AST.Login.handleLogin), 
AST.controller.addListener("authloginfailure", AST.Login.handleFailure), AST.controller.addListener("storageready", AST.Login.isAuthenticated), 
AST.controller.addListener("appstart", AST.Login.isAuthenticated), AST.controller.addListener("logoff", AST.Login.changeHost), 
AST.Login = AST.Login || {}, AST.Login.Login = function(data) {
    this.initModel(data);
}, $.extend(AST.Login.Login.prototype, AST.hasDataModelMixin, {
    launch: function() {
        this.form = new AST.form.Form({
            attributes: {
                class: "login"
            },
            listeners: {
                submit: this.handleSubmit.bind(this)
            },
            children: [ new AST.Element({
                tagName: "h1",
                content: "Login to your AMP instance to get started."
            }), new AST.form.DisplayText({
                id: "host",
                label: "AMP URL",
                content: this.getModel().get("host") + " ",
                children: [ new AST.form.Button({
                    content: '<i class="fas fa-pencil-alt"></i><span class="a11y-offscreen-text">Change Host</span>',
                    attributes: {
                        title: "Change Host",
                        type: "button"
                    },
                    listeners: {
                        click: function(ev) {
                            ev.preventDefault(), AST.Login.changeHost();
                        }
                    }
                }) ]
            }), new AST.form.Text({
                id: "email",
                label: "Username",
                model: this.getModel(),
                modelProperty: "email",
                attributes: {
                    autocomplete: "username"
                }
            }), new AST.form.Password({
                id: "password",
                label: "Password",
                model: this.getModel(),
                modelProperty: "password",
                attributes: {
                    autocomplete: "current-password"
                }
            }) ],
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Login"
                },
                listeners: {
                    click: this.handleSubmit.bind(this)
                }
            }) ]
        }), AST.controller.renderPage(this.form, "Login"), $("#email").focus(), 
        void 0 !== this.getModel().get("error") && this.form.handleErrors([ new AST.Element({
            tagName: "li",
            content: this.getModel().get("error")
        }) ]);
    },
    handleFailure: function(response) {
        this.form.handleErrors([ new AST.Element({
            tagName: "li",
            content: response.message
        }) ]);
    },
    handleSubmit: function(ev) {
        ev.preventDefault();
        try {
            $.post("https://" + this.getModel().get("host") + "/api/assistant/user/authenticate", this.getData(), this.handleLoginSuccess.bind(this)).fail(this.handleLoginFailure.bind(this));
        } catch (e) {
            this.handleLoginFailure();
        }
    },
    handleLoginSuccess: function(data, status, request) {
        $.isEmpty(data) ? this.handleLoginFailure() : !0 === data.twoFactor ? AST.controller.fireEvent("authtwofactor", {
            email: data.email
        }) : (AST.Storage.set("user-info", data), AST.Storage.set("token", data.token), 
        AST.controller.fireEvent("authloginsuccess", data));
    },
    handleLoginFailure: function(jqXHR, textStatus, errorThrown) {
        "error" === textStatus ? this.form.handleErrors([ new AST.Element({
            tagName: "li",
            content: "The specified AMP instance does not exist. Edit the instance URL and try again."
        }) ]) : this.form.handleErrors([ new AST.Element({
            tagName: "li",
            content: "The username and/or password is not a valid login for the specified AMP instance. Please try again."
        }) ]);
    }
}), AST.Login = AST.Login || {}, AST.Login.SelectHost = function(data) {
    this.initModel(data = data || {}), this.getModel().initExternalListener("host");
}, $.extend(AST.Login.SelectHost.prototype, AST.hasDataModelMixin, {
    launch: function() {
        this.form = new AST.form.Form({
            attributes: {
                class: "login"
            },
            listeners: {
                submit: this.handleSubmit.bind(this)
            },
            children: [ new AST.Element({
                tagName: "h1",
                content: "Connect to AMP"
            }), new AST.Element({
                tagName: "h2",
                content: "Enter your AMP instance URL to save test results for your organization."
            }), new AST.Element({
                tagName: "div",
                attributes: {
                    class: "login-wrapper"
                },
                children: [ new AST.form.Text({
                    id: "host",
                    label: "AMP URL",
                    model: this.getModel(),
                    modelProperty: "host"
                }), new AST.form.Submit({
                    attributes: {
                        value: "Connect"
                    },
                    listeners: {
                        click: this.handleSubmit.bind(this)
                    }
                }) ]
            }) ]
        });
        var container = new AST.Element({
            tagName: "section",
            attributes: {
                class: "host-screen"
            },
            children: [ this.getCommunityContent(), this.form ]
        });
        AST.controller.renderPage(container, "Select Host"), $("#host").focus();
    },
    getCommunityContent: function() {
        return new AST.Element({
            tagName: "section",
            attributes: {
                class: "community-screen"
            },
            children: [ new AST.Element({
                tagName: "p",
                content: "Evaluate your web content for accessibility issues with the Quick Test and Preview Modes features."
            }), new AST.Element({
                tagName: "ul",
                attributes: {
                    class: "big-icons horizontal"
                },
                children: [ new AST.Element({
                    tagName: "li",
                    children: [ new AST.Element({
                        tagName: "a",
                        attributes: {
                            href: "#",
                            style: "text-decoration: none"
                        },
                        content: '<h2><i class="fas fa-play"></i> Quick Test</h2>',
                        listeners: {
                            click: function(ev) {
                                ev.preventDefault(), AST.controller.fireEvent("quicktest", ev.currentTarget);
                            }
                        }
                    }), new AST.Element({
                        tagName: "p",
                        content: "Run automated tests on your page with a Quick Test to identify the highest priority, most visible accessibility issues."
                    }) ]
                }), new AST.Element({
                    tagName: "li",
                    children: [ new AST.Element({
                        tagName: "a",
                        attributes: {
                            href: "#",
                            style: "text-decoration: none"
                        },
                        content: '<h2><i class="fas fa-mouse-pointer" data-fa-transform="right-1 down-1 shrink-8" data-fa-mask="fas fa-badge"></i> Preview Modes</h2>',
                        listeners: {
                            click: function(ev) {
                                ev.preventDefault(), AST.controller.fireEvent("previewmodes", ev.currentTarget);
                            }
                        }
                    }), new AST.Element({
                        tagName: "p",
                        content: "Use the Preview Modes feature to guide manual testing efforts. Each preview mode applies markup or styling to the page to help testers identify common accessibility violations at a glance."
                    }) ]
                }) ]
            }) ]
        });
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("host")) ? errors.push(new AST.Element({
            tagName: "li",
            content: "AMP URL is required"
        })) : AST.Util.isValidUrl(this.getModel().get("host")) || errors.push(new AST.Element({
            tagName: "li",
            content: 'AMP URL must be a valid url, i.e. "amp.levelaccess.net"'
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleSubmit: function(ev) {
        if (ev.preventDefault(), this.validate()) try {
            var origin;
            AST.Storage.set("host", this.getModel().get("host")), AST.Util.isChrome() ? (origin = "https://" + this.getModel().get("host") + "/*", 
            AST.permissions.containsOrigin(origin, function(contains) {
                contains ? this.checkSessionAndResponse() : AST.permissions.showRequestModal({
                    result: {
                        source: "selecthost",
                        permissions: {
                            origins: [ origin ]
                        }
                    }
                }, function(granted) {
                    granted ? this.checkSessionAndResponse() : AST.Login.isSSO();
                }.bind(this));
            }.bind(this))) : this.checkSessionAndResponse();
        } catch (e) {
            this.handleLoginFailure();
        }
    },
    checkSessionAndResponse: function() {
        window.postMessage({
            source: "ast",
            destination: "background",
            command: {
                type: "CHECK_SESSION",
                host: this.getModel().get("host")
            }
        }, window.origin), AST.controller.addListener("CHECK_SESSION_RESPONSE", function(msg) {
            if (!$.isEmpty(msg.result.response)) {
                msg = JSON.parse(msg.result.response);
                if (10 === msg.status && !$.isEmpty(msg.token)) return msg.host = AST.Storage.get("host"), 
                AST.Storage.set("user-info", msg), AST.Storage.set("token", msg.token), 
                void AST.controller.fireEvent("authloginsuccess", msg);
            }
            AST.Login.isSSO();
        }.bind(this), this, this.form.getEl());
    },
    handleLoginFailure: function(jqXHR, textStatus, errorThrown) {
        this.form.handleErrors([ new AST.Element({
            tagName: "li",
            content: "The specified AMP instance does not exist. Edit the instance URL and try again."
        }) ]);
    }
}), AST.Login = AST.Login || {}, AST.Login.SSO = function(data) {
    this.initModel(data);
}, $.extend(AST.Login.SSO.prototype, AST.hasDataModelMixin, {
    launch: function() {
        new AST.window.Warning({
            title: '<i class="fas fa-lock"></i> Authentication',
            height: 170,
            width: 80,
            children: [ new AST.Element({
                tagName: "p",
                content: "The AMP instance you specified has single sign on enabled."
            }), new AST.Element({
                tagName: "p",
                content: "Please login to your AMP account then relaunch ACCESS Assistant"
            }), new AST.form.DisplayText({
                labelPosition: "top",
                label: "AMP URL",
                model: this.getModel(),
                modelProperty: "host"
            }) ]
        }).render(!0);
    }
}), AST.Login = AST.Login || {}, AST.Login.TwoFactor = function(data) {
    this.initModel(data);
}, $.extend(AST.Login.TwoFactor.prototype, AST.hasDataModelMixin, {
    Statuses: {
        SUCCESS: 10,
        EXPIRED: 20,
        INVALID: 30,
        ATTEMPTS_EXCEEDED: 40
    },
    launch: function() {
        this.form = new AST.form.Form({
            attributes: {
                class: "login"
            },
            listeners: {
                submit: this.handleSubmit.bind(this)
            },
            children: [ new AST.Element({
                tagName: "h1",
                content: "Verify Login Token"
            }), new AST.Element({
                tagName: "p",
                attributes: {
                    class: "instructions"
                },
                content: "Please enter the passcode that was sent to the email address on file for your AMP account."
            }), new AST.form.Text({
                id: "passcode",
                label: "Passcode",
                model: this.getModel(),
                modelProperty: "passcode"
            }) ],
            buttons: [ new AST.form.Submit({
                attributes: {
                    value: "Submit"
                },
                listeners: {
                    click: this.handleSubmit.bind(this)
                }
            }), new AST.form.CancelButton({
                listeners: {
                    click: this.handleCancel.bind(this)
                }
            }) ]
        }), AST.controller.renderPage(this.form, "Login");
    },
    validate: function() {
        var errors = [];
        return $.isEmpty(this.getModel().get("passcode")) && errors.push(new AST.Element({
            tagName: "li",
            content: "Passcode is required"
        })), 0 === errors.length || (this.form.handleErrors(errors), !1);
    },
    handleSubmit: function(ev) {
        ev.preventDefault(), this.getData().host = AST.Storage.get("host");
        try {
            $.post("https://" + AST.Storage.get("host") + "/api/assistant/user/verifyTwoFactor", this.getData(), this.handleSuccess.bind(this)).fail(this.handleFailure.bind(this));
        } catch (e) {
            this.handleFailure();
        }
    },
    handleSuccess: function(data, status, request) {
        $.isEmpty(data) ? this.handleFailure({
            status: this.Statuses.INVALID
        }) : data.status === this.Statuses.SUCCESS ? (AST.Storage.set("user-info", data), 
        AST.Storage.set("token", data.token), AST.controller.fireEvent("authloginsuccess", data)) : data.status === this.Statuses.INVALID ? this.form.handleErrors([ new AST.Element({
            tagName: "li",
            content: data.message
        }) ]) : AST.controller.fireEvent("authlogin", {
            host: AST.Storage.get("host"),
            error: data.message
        });
    },
    handleFailure: function(jqXHR, textStatus, errorThrown) {
        this.form.handleErrors([ new AST.Element({
            tagName: "li",
            content: "The passcode could not be verified. Edit the passcode and try again."
        }) ]);
    },
    handleCancel: function(ev) {
        ev.preventDefault(), AST.controller.fireEvent("authlogin", {
            host: AST.Storage.get("host")
        });
    }
}), AST.Pages.macro = AST.Pages.macro || {}, AST.Pages.macro.handlers = {
    handleList: function() {
        new AST.Pages.macro.List().launch();
    },
    handleNew: function() {
        new AST.Pages.macro.New().launch();
    },
    handleView: function(data) {
        new AST.Pages.macro.View(data).launch();
    },
    handleEdit: function(data) {
        new AST.Pages.macro.Edit(data).launch();
    },
    handleDelete: function(data) {
        new AST.Pages.macro.Delete(data).launch();
    }
}, AST.controller.addListener("macrolist", AST.Pages.macro.handlers.handleList), 
AST.controller.addListener("macroview", AST.Pages.macro.handlers.handleView), AST.controller.addListener("macronew", AST.Pages.macro.handlers.handleNew), 
AST.controller.addListener("macroedit", AST.Pages.macro.handlers.handleEdit), AST.controller.addListener("macrodelete", AST.Pages.macro.handlers.handleDelete), 
AST.Pages.manualTest = AST.Pages.manualTest || {}, AST.Pages.manualTest.handlers = {
    handleWizard: function(id, target) {
        new AST.Pages.manualTest.Wizard({
            id: id
        }, target).launch();
    },
    handleStep1: function(target) {
        var data = AST.Storage.get("activeModule", new AST.Model()).getData();
        new AST.Pages.manualTest.Step1(data, target).launch();
    },
    handleStep2: function(data, target) {
        new AST.Pages.manualTest.Step2(data, target).launch();
    },
    handleStep3: function(data, target) {
        new AST.Pages.manualTest.Step3(data, target).launch();
    },
    handleAddInstance: function(data, target, fromModal) {
        new AST.Pages.manualTest.AddInstance(data, target, fromModal).launch();
    }
}, AST.controller.addListener("manualtestwizard", AST.Pages.manualTest.handlers.handleWizard), 
AST.controller.addListener("manualstep1", AST.Pages.manualTest.handlers.handleStep1), 
AST.controller.addListener("manualstep2", AST.Pages.manualTest.handlers.handleStep2), 
AST.controller.addListener("manualstep3", AST.Pages.manualTest.handlers.handleStep3), 
AST.controller.addListener("manualaddinstance", AST.Pages.manualTest.handlers.handleAddInstance), 
AST.Pages.module = AST.Pages.module || {}, AST.Pages.module.handlers = {
    handleNew: function(data) {
        data.path = "", new AST.Pages.module.New(data).launch();
    },
    handleNode: function(data) {
        data.path = "", new AST.Pages.module.Node(data).launch();
    },
    handleEdit: function(data) {
        new AST.Pages.module.Edit(data).launch();
    },
    handleDelete: function(data, target) {
        new AST.Pages.module.Delete(data, target).launch();
    },
    handleView: function(data) {
        new AST.Pages.module.View(data).launch();
    }
}, AST.controller.addListener("moduleedit", AST.Pages.module.handlers.handleEdit), 
AST.controller.addListener("moduledelete", AST.Pages.module.handlers.handleDelete), 
AST.controller.addListener("modulenew", AST.Pages.module.handlers.handleNew), AST.controller.addListener("modulenode", AST.Pages.module.handlers.handleNode), 
AST.controller.addListener("moduleview", AST.Pages.module.handlers.handleView), 
AST.Pages.pattern = AST.Pages.pattern || {}, AST.Pages.pattern.dataFormatters = {
    patternToPatternFormData: function(data) {
        return {
            patternID: data.id,
            reportID: data.reportID,
            name: data.label,
            global: data.isGlobal,
            members: data.members,
            modules: data.modules.reduce(function(modules, value) {
                return $.isPlainObject(value) && (modules[value.module_id] = !0), 
                modules;
            }, [])
        };
    },
    formDataToRequestBody: function(data) {
        return {
            name: data.name,
            global: "1" === data.global,
            modules: data.modules.reduce(function(modules, moduleBool, moduleId) {
                return moduleBool && modules.push(moduleId), modules;
            }, []),
            members: data.members.filter(function(member) {
                return !$.isEmptyObject(member);
            })
        };
    },
    dataToUnlinkData: function(data) {
        return {
            name: data.label,
            global: "1" === data.global,
            modules: data.modules.reduce(function(modules, moduleBool, moduleId) {
                return moduleBool && modules.push(moduleBool.module_id), modules;
            }, []),
            members: data.members
        };
    }
}, AST.Pages.pattern.handlers = {
    handleNew: function(data, target) {
        var screen;
        $.isEmptyObject(data) ? (screen = new AST.Pages.pattern.New({
            modules: [],
            members: []
        }, target)).launch() : (data = {
            instanceID: data.instance_id
        }, AST.controller.ajaxPost(AST.Controller.WITH_TOKEN, "/api/assistant/instance/list", data, function(instance, status, xhr) {
            var modules = [], thumbnail = (modules[instance.result.module_id] = !0, 
            {});
            thumbnail.alt = instance.result.thumbnailAltText || null, thumbnail.data = instance.result.thumbnailDataUrl || null, 
            (screen = new AST.Pages.pattern.New({
                modules: modules,
                members: [ {
                    instance_id: instance.result.instance_id,
                    violation_id: instance.result.violation_id,
                    element: instance.result.element,
                    note: instance.result.attribute,
                    thumbnail: thumbnail
                } ]
            }, target)).copyFromInstance = !0, screen.launch();
        }));
    },
    handleEdit: function(data, target) {
        new AST.Pages.pattern.Edit(AST.Pages.pattern.dataFormatters.patternToPatternFormData(data), target).launch();
    },
    handleDelete: function(data, target) {
        new AST.Pages.pattern.Delete(data, target).launch();
    },
    handleUnlink: function(data, target) {
        new AST.Pages.pattern.Unlink(data, target).launch();
    },
    handleView: function(data, target) {
        new AST.Pages.pattern.View(data, target).launch();
    }
}, AST.controller.addListener("patternedit", AST.Pages.pattern.handlers.handleEdit), 
AST.controller.addListener("patternnew", AST.Pages.pattern.handlers.handleNew), 
AST.controller.addListener("patterndelete", AST.Pages.pattern.handlers.handleDelete), 
AST.controller.addListener("patternunlink", AST.Pages.pattern.handlers.handleUnlink), 
AST.controller.addListener("patternview", AST.Pages.pattern.handlers.handleView), 
AST.Pages.permissions = AST.Pages.permissions || {}, AST.Pages.permissions.handlers = {
    handleManagePermissions: function(target, data) {
        new AST.Pages.permissions.Manage({
            target: target,
            data: data
        }).launch();
    }
}, AST.controller.addListener("managepermissions", AST.Pages.permissions.handlers.handleManagePermissions), 
AST.Pages.preview = AST.Pages.preview || {}, AST.Pages.preview.handlers = {
    handleModes: function(target, data) {
        new AST.Pages.preview.Modes({
            target: target,
            data: data
        }).launch();
    },
    handleToggleCSS: function(target, data) {
        new AST.Pages.preview.ToggleCSS({
            target: target,
            data: data
        }).launch();
    },
    handleBackgroundImages: function(target, data) {
        new AST.Pages.preview.BackgroundImages({
            target: target,
            data: data
        }).launch();
    },
    handleImages: function(target, data) {
        new AST.Pages.preview.Images({
            target: target,
            data: data
        }).launch();
    },
    handleLists: function(target, data) {
        new AST.Pages.preview.Lists({
            target: target,
            data: data
        }).launch();
    },
    handleIframes: function(target, data) {
        new AST.Pages.preview.Iframes({
            target: target,
            data: data
        }).launch();
    },
    handleHeadings: function(target, data) {
        new AST.Pages.preview.Headings({
            target: target,
            data: data
        }).launch();
    },
    handleLang: function(target, data) {
        new AST.Pages.preview.Lang({
            target: target,
            data: data
        }).launch();
    },
    handleTables: function(target, data) {
        new AST.Pages.preview.Tables({
            target: target,
            data: data
        }).launch();
    },
    handleTableDetail: function(target, data) {
        new AST.Pages.preview.Tables.Detail({
            target: target,
            data: data
        }).launch();
    }
}, AST.controller.addListener("previewmodes", AST.Pages.preview.handlers.handleModes), 
AST.controller.addListener("togglecss", AST.Pages.preview.handlers.handleToggleCSS), 
AST.controller.addListener("backgroundimages", AST.Pages.preview.handlers.handleBackgroundImages), 
AST.controller.addListener("images", AST.Pages.preview.handlers.handleImages), AST.controller.addListener("lists", AST.Pages.preview.handlers.handleLists), 
AST.controller.addListener("iframes", AST.Pages.preview.handlers.handleIframes), 
AST.controller.addListener("headings", AST.Pages.preview.handlers.handleHeadings), 
AST.controller.addListener("lang", AST.Pages.preview.handlers.handleLang), AST.controller.addListener("tables", AST.Pages.preview.handlers.handleTables), 
AST.controller.addListener("tabledetail", AST.Pages.preview.handlers.handleTableDetail), 
AST.Pages.quickTest = AST.Pages.quickTest || {}, AST.Pages.quickTest.handlers = {
    handleRunTest: function() {
        new AST.Pages.quickTest.Run().launch();
    },
    handleViewResults: function(data) {
        new AST.Pages.quickTest.View(data).launch();
    },
    handleViewInstance: function(data, target) {
        new AST.Pages.quickTest.Instance(data, target).launch();
    }
}, AST.controller.addListener("quicktest", AST.Pages.quickTest.handlers.handleRunTest), 
AST.controller.addListener("quicktestresults", AST.Pages.quickTest.handlers.handleViewResults), 
AST.controller.addListener("quicktestinstance", AST.Pages.quickTest.handlers.handleViewInstance), 
AST.Pages.report = AST.Pages.report || {}, AST.Pages.report.handlers = {
    handleNew: function(data) {
        data.reportName = "", new AST.Pages.report.New(data).launch();
    },
    handleEdit: function(data, target) {
        new AST.Pages.report.Edit(data, target).launch();
    },
    handleDelete: function(data, target) {
        new AST.Pages.report.Delete(data, target).launch();
    },
    handleView: function(data) {
        new AST.Pages.report.View(data).launch();
    }
}, AST.controller.addListener("reportedit", AST.Pages.report.handlers.handleEdit), 
AST.controller.addListener("reportdelete", AST.Pages.report.handlers.handleDelete), 
AST.controller.addListener("reportnew", AST.Pages.report.handlers.handleNew), AST.controller.addListener("reportview", AST.Pages.report.handlers.handleView);